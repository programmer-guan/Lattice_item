
// Verilog netlist produced by program ldbanno, Version Diamond (64-bit) 3.11.0.396.4

// ldbanno -n Verilog -o FPGA_DSP_Impl1_mapvo.vo -w -neg -gui -msgset C:/Users/Administrator/Desktop/lattice_item/lattice_item_v6/promote.xml FPGA_DSP_Impl1_map.ncd 
// Netlist created on Tue Jan 07 16:05:27 2020
// Netlist written on Tue Jan 07 16:05:30 2020
// Design is for device LCMXO2-2000HC
// Design is for package TQFP100
// Design is for performance grade 4

`timescale 1 ns / 1 ps

module top ( clk_in, rst_n_in, BUS_WE, BUS_CS, BUS_A, ENC_U, ENC_V, UVW, ABZ, 
             DI1, DI2, DI3, DI4, K_MODE, K_UP, K_DOWN, K_SET, TMR_CLK, TMR_DIR, 
             DEBUG_LED, SMG_LED, DO1, DO2, DO3, DO4, UART_RX, UART_TX, TR_DIR, 
             A_PHASE, B_PHASE, Z_PHASE, BUS_D );
  input  clk_in, rst_n_in, BUS_WE, BUS_CS;
  input  [4:0] BUS_A;
  input  ENC_U, ENC_V, UVW, ABZ, DI1, DI2, DI3, DI4, K_MODE, K_UP, K_DOWN, 
         K_SET, TMR_CLK, TMR_DIR, UART_RX;
  output DEBUG_LED;
  output [12:0] SMG_LED;
  output DO1, DO2, DO3, DO4, UART_TX, TR_DIR, A_PHASE, B_PHASE, Z_PHASE;
  inout  [7:0] BUS_D;
  wire   \OUT_PULSE_CHECK/input_f_dir , \OUT_PULSE_CHECK/n7113 , 
         \OUT_PULSE_CHECK/state_1 , out_pulse_data_7, out_pulse_data_6, 
         \OUT_PULSE_CHECK/n729 , \OUT_PULSE_CHECK/n730 , 
         \OUT_PULSE_CHECK/clk_in_c_enable_43 , clk_in_c, 
         \OUT_PULSE_CHECK/n5705 , out_pulse_data_5, out_pulse_data_4, 
         \OUT_PULSE_CHECK/n731 , \OUT_PULSE_CHECK/n732 , 
         \OUT_PULSE_CHECK/n5704 , out_pulse_data_3, out_pulse_data_2, 
         \OUT_PULSE_CHECK/n733 , \OUT_PULSE_CHECK/n734 , 
         \OUT_PULSE_CHECK/n5703 , out_pulse_data_1, out_pulse_data_0, 
         \OUT_PULSE_CHECK/n5 , \OUT_PULSE_CHECK/n735 , \OUT_PULSE_CHECK/n736 , 
         \OUT_PULSE_CHECK/n5702 , \OUT_PULSE_CHECK/n7139 , 
         \OUT_PULSE_CHECK/input_z_dir , \KEY_CHECK/k_set_r , K_SET_c, 
         \KEY_CHECK/cnt_19__N_367 , \KEY_CHECK/k_set_rr , \DSP_COM/cnt_27 , 
         \DSP_COM/n118 , \DSP_COM/n7105 , \DSP_COM/n5744 , \DSP_COM/cnt_26 , 
         \DSP_COM/cnt_25 , \DSP_COM/n119 , \DSP_COM/n120 , \DSP_COM/n5743 , 
         \DSP_COM/cnt_24 , \DSP_COM/cnt_23 , \DSP_COM/n121 , \DSP_COM/n122 , 
         \DSP_COM/n5742 , \DSP_COM/cnt_22 , \DSP_COM/cnt_21 , \DSP_COM/n123 , 
         \DSP_COM/n124 , \DSP_COM/n5741 , \DSP_COM/cnt_20 , \DSP_COM/cnt_19 , 
         \DSP_COM/n125 , \DSP_COM/n126 , \DSP_COM/n5740 , \DSP_COM/cnt_18 , 
         \DSP_COM/cnt_17 , \DSP_COM/n127 , \DSP_COM/n128 , \DSP_COM/n5739 , 
         \DSP_COM/cnt_16 , \DSP_COM/cnt_15 , \DSP_COM/n129 , \DSP_COM/n130 , 
         \DSP_COM/n5738 , \DSP_COM/cnt_14 , \DSP_COM/cnt_13 , \DSP_COM/n131 , 
         \DSP_COM/n132 , \DSP_COM/n5737 , \DSP_COM/cnt_12 , \DSP_COM/cnt_11 , 
         \DSP_COM/n133 , \DSP_COM/n134 , \DSP_COM/n5736 , \DSP_COM/cnt_10 , 
         \DSP_COM/cnt_9 , \DSP_COM/n135 , \DSP_COM/n136 , \DSP_COM/n5735 , 
         \DSP_COM/cnt_8 , \DSP_COM/cnt_7 , \DSP_COM/n137 , \DSP_COM/n138 , 
         \DSP_COM/n5734 , \DSP_COM/cnt_6 , \DSP_COM/cnt_5 , \DSP_COM/n139 , 
         \DSP_COM/n140 , \DSP_COM/n5733 , \DSP_COM/cnt_4 , \DSP_COM/cnt_3 , 
         \DSP_COM/n141 , \DSP_COM/n142 , \DSP_COM/n5732 , \DSP_COM/cnt_2 , 
         \DSP_COM/cnt_1 , \DSP_COM/n143 , \DSP_COM/n144 , \DSP_COM/n5731 , 
         \DSP_COM/cnt_0 , \DSP_COM/n145 , \SMART_ABS/RS485_COM_M/error_test_2 , 
         \SMART_ABS/RS485_COM_M/error_test_1 , \SMART_ABS/RS485_COM_M/n1093 , 
         \SMART_ABS/RS485_COM_M/n1094 , clk_in_c_enable_54, rx_485_begin, 
         \SMART_ABS/RS485_COM_M/n5694 , \SMART_ABS/RS485_COM_M/n5695 , 
         \SMART_ABS/RS485_COM_M/error_test_6 , 
         \SMART_ABS/RS485_COM_M/error_test_5 , \SMART_ABS/RS485_COM_M/n1089 , 
         \SMART_ABS/RS485_COM_M/n1090 , \SMART_ABS/RS485_COM_M/n5696 , 
         \SMART_ABS/RS485_COM_M/n5697 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_10 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_9 , 
         \SMART_ABS/RS485_COM_M/n989 , \SMART_ABS/RS485_COM_M/n990 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_67 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 , 
         \SMART_ABS/RS485_COM_M/n5691 , \SMART_ABS/RS485_COM_M/n5692 , 
         \SMART_ABS/RS485_COM_M/crc_out_0 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_80 , 
         \SMART_ABS/RS485_COM_M/crc_out_1 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_81 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_24 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_23 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_264 , 
         \SMART_ABS/RS485_COM_M/n5596 , \SMART_ABS/RS485_COM_M/rx_data_reg_22 , 
         \SMART_ABS/RS485_COM_M/n319 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_8 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_7 , 
         \SMART_ABS/RS485_COM_M/n991 , \SMART_ABS/RS485_COM_M/n992 , 
         \SMART_ABS/RS485_COM_M/n5690 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_6 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_5 , 
         \SMART_ABS/RS485_COM_M/n993 , \SMART_ABS/RS485_COM_M/n994 , 
         \SMART_ABS/RS485_COM_M/n5689 , \SMART_ABS/RS485_COM_M/r_bit_cnt_6 , 
         \SMART_ABS/RS485_COM_M/r_bit_cnt_5 , \SMART_ABS/RS485_COM_M/n34 , 
         \SMART_ABS/RS485_COM_M/n35 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_272 , 
         \SMART_ABS/RS485_COM_M/n3067 , \SMART_ABS/RS485_COM_M/n5729 , 
         \SMART_ABS/RS485_COM_M/r_bit_cnt_4 , 
         \SMART_ABS/RS485_COM_M/r_bit_cnt_3 , \SMART_ABS/RS485_COM_M/n36 , 
         \SMART_ABS/RS485_COM_M/n37 , \SMART_ABS/RS485_COM_M/n5728 , 
         \SMART_ABS/RS485_COM_M/r_bit_cnt_2 , 
         \SMART_ABS/RS485_COM_M/r_bit_cnt_1 , \SMART_ABS/RS485_COM_M/n38 , 
         \SMART_ABS/RS485_COM_M/n39 , \SMART_ABS/RS485_COM_M/n5727 , 
         \SMART_ABS/RS485_COM_M/r_bit_cnt_0 , \SMART_ABS/RS485_COM_M/n6462 , 
         \SMART_ABS/RS485_COM_M/n4692 , \SMART_ABS/RS485_COM_M/n40 , 
         \SMART_ABS/RS485_COM_M/crc_out_6 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_86 , 
         \SMART_ABS/RS485_COM_M/crc_out_7 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_87 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_20 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_19 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_18 , \SMART_ABS/RS485_COM_M/n5595 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_4 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_3 , 
         \SMART_ABS/RS485_COM_M/n995 , \SMART_ABS/RS485_COM_M/n996 , 
         \SMART_ABS/RS485_COM_M/n5688 , error_test_8, 
         \SMART_ABS/RS485_COM_M/error_test_7 , \SMART_ABS/RS485_COM_M/n1087 , 
         \SMART_ABS/RS485_COM_M/n1088 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_12 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_11 , 
         \SMART_ABS/RS485_COM_M/n987 , \SMART_ABS/RS485_COM_M/n988 , 
         \SMART_ABS/RS485_COM_M/n5693 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_13 , 
         \SMART_ABS/RS485_COM_M/n986 , \SMART_ABS/RS485_COM_M/error_test_0 , 
         \SMART_ABS/RS485_COM_M/n1095 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_0 , 
         \SMART_ABS/RS485_COM_M/n999 , \SMART_ABS/RS485_COM_M/n5687 , 
         \SMART_ABS/RS485_COM_M/error_test_4 , 
         \SMART_ABS/RS485_COM_M/error_test_3 , \SMART_ABS/RS485_COM_M/n1091 , 
         \SMART_ABS/RS485_COM_M/n1092 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_2 , 
         \SMART_ABS/RS485_COM_M/time_interval_reg_1 , 
         \SMART_ABS/RS485_COM_M/n997 , \SMART_ABS/RS485_COM_M/n998 , 
         \SMART_ABS/RS485_COM_M/crc_out_2 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_82 , 
         \SMART_ABS/RS485_COM_M/crc_out_3 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_83 , 
         \SMART_ABS/RS485_COM_M/crc_out_4 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_84 , 
         \SMART_ABS/RS485_COM_M/crc_out_5 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_85 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_21 , \SMG_SCAN/cnt_12 , 
         \SMG_SCAN/cnt_11 , \SMG_SCAN/n93 , \SMG_SCAN/n94 , 
         \SMG_SCAN/cnt_19__N_299 , \SMG_SCAN/n5712 , \SMG_SCAN/n5713 , 
         \SMG_SCAN/cnt_10 , \SMG_SCAN/cnt_9 , \SMG_SCAN/n95 , \SMG_SCAN/n96 , 
         \SMG_SCAN/n5711 , \SMG_SCAN/cnt_8 , \SMG_SCAN/cnt_7 , \SMG_SCAN/n97 , 
         \SMG_SCAN/n98 , \SMG_SCAN/n5710 , \SMG_SCAN/cnt_6 , \SMG_SCAN/cnt_5 , 
         \SMG_SCAN/n99 , \SMG_SCAN/n100 , \SMG_SCAN/n5709 , \SMG_SCAN/cnt_4 , 
         \SMG_SCAN/cnt_3 , \SMG_SCAN/n101 , \SMG_SCAN/n102 , \SMG_SCAN/n5708 , 
         \SMG_SCAN/cnt_2 , \SMG_SCAN/cnt_1 , \SMG_SCAN/n103 , \SMG_SCAN/n104 , 
         \SMG_SCAN/n5707 , \SMG_SCAN/cnt_0 , \SMG_SCAN/n105 , 
         \SMG_SCAN/cnt_19 , \SMG_SCAN/n86 , \SMG_SCAN/n5716 , 
         \SMG_SCAN/cnt_18 , \SMG_SCAN/cnt_17 , \SMG_SCAN/n87 , \SMG_SCAN/n88 , 
         \SMG_SCAN/n5715 , \SMG_SCAN/cnt_16 , \SMG_SCAN/cnt_15 , 
         \SMG_SCAN/n89 , \SMG_SCAN/n90 , \SMG_SCAN/n5714 , \SMG_SCAN/cnt_14 , 
         \SMG_SCAN/cnt_13 , \SMG_SCAN/n91 , \SMG_SCAN/n92 , \KEY_CHECK/cnt_19 , 
         \KEY_CHECK/n86 , \KEY_CHECK/n5726 , \KEY_CHECK/cnt_18 , 
         \KEY_CHECK/cnt_17 , \KEY_CHECK/n87 , \KEY_CHECK/n88 , 
         \KEY_CHECK/n5725 , \KEY_CHECK/cnt_16 , \KEY_CHECK/cnt_15 , 
         \KEY_CHECK/n89 , \KEY_CHECK/n90 , \KEY_CHECK/n5724 , 
         \KEY_CHECK/cnt_14 , \KEY_CHECK/cnt_13 , \KEY_CHECK/n91 , 
         \KEY_CHECK/n92 , \KEY_CHECK/n5723 , \KEY_CHECK/cnt_12 , 
         \KEY_CHECK/cnt_11 , \KEY_CHECK/n93 , \KEY_CHECK/n94 , 
         \KEY_CHECK/n5722 , \KEY_CHECK/cnt_10 , \KEY_CHECK/cnt_9 , 
         \KEY_CHECK/n95 , \KEY_CHECK/n96 , \KEY_CHECK/n5721 , 
         \KEY_CHECK/cnt_8 , \KEY_CHECK/cnt_7 , \KEY_CHECK/n97 , 
         \KEY_CHECK/n98 , \KEY_CHECK/n5720 , \KEY_CHECK/cnt_6 , 
         \KEY_CHECK/cnt_5 , \KEY_CHECK/n99 , \KEY_CHECK/n100 , 
         \KEY_CHECK/n5719 , \KEY_CHECK/cnt_4 , \KEY_CHECK/cnt_3 , 
         \KEY_CHECK/n101 , \KEY_CHECK/n102 , \KEY_CHECK/n5718 , 
         \KEY_CHECK/cnt_2 , \KEY_CHECK/cnt_1 , \KEY_CHECK/n103 , 
         \KEY_CHECK/n104 , \KEY_CHECK/n5717 , \KEY_CHECK/cnt_0 , 
         \KEY_CHECK/n105 , DEBUG_LED_c, \DSP_COM/n6583 , \DSP_COM/n6723 , 
         \DSP_COM/n6585 , \DSP_COM/debug_led_N_234 , BUS_D_out_0, BUS_A_c_0, 
         n13_adj_1082, \DSP_COM/n10_adj_1074 , DO1_c_0, n9_adj_1086, 
         \DSP_COM/out_IO_signal_7_N_124_0 , \DSP_COM/clk_in_c_enable_125 , 
         BUS_A_c_1, BUS_A_c_2, BUS_A_c_3, BUS_A_c_4, DO2_c_1, 
         \DSP_COM/n9_adj_1067 , \DSP_COM/out_IO_signal_7_N_124_1 , BUS_D_out_2, 
         DO3_c_2, \DSP_COM/n9_adj_1073 , \DSP_COM/out_IO_signal_7_N_124_2 , 
         n7122, DO4_c_3, n9, \DSP_COM/out_IO_signal_7_N_124_3 , 
         \DSP_COM/bus_we_r1 , \DSP_COM/bus_we_r , \DSP_COM/n7128 , 
         \DSP_COM/output_en , \DSP_COM/bus_cs_r , \DSP_COM/bus_cs_r1 , 
         \DSP_COM/n3029 , \OUT_PULSE_CHECK/input_b_r , 
         \OUT_PULSE_CHECK/input_b_r1 , \OUT_PULSE_CHECK/input_a_r1 , 
         \OUT_PULSE_CHECK/input_a_r , out_pulse_type_1, 
         \OUT_PULSE_CHECK/n6931 , \OUT_PULSE_CHECK/n6932 , 
         \OUT_PULSE_CHECK/n7067 , \OUT_PULSE_CHECK/clk_in_c_enable_17 , 
         \OUT_PULSE_CHECK/n7164 , \OUT_PULSE_CHECK/n2935 , 
         \OUT_PULSE_CHECK/state_0 , \OUT_PULSE_CHECK/n2307 , 
         \OUT_PULSE_CHECK/n2937 , \OUT_PULSE_CHECK/state_2__N_943 , 
         \OUT_PULSE_CHECK/n2316 , n4680, 
         \SMART_ABS/RS485_COM_M/com_error_7_N_812_7 , 
         \SMART_ABS/RS485_COM_M/com_error_7 , \SMART_ABS/RS485_COM_M/n4588 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_25 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_9 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1020 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_8 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1019 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_1 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_0 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_262 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_27 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1010 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_11 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1009 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_26 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1008 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_10 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1007 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_3 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_2 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_29 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1014 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_13 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1013 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_28 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1012 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_12 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1011 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_5 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_4 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_31 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1018 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_15 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1017 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_30 , 
         \SMART_ABS/RS485_COM_M/u_crc/n16_adj_1016 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_14 , 
         \SMART_ABS/RS485_COM_M/u_crc/n17_adj_1015 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_7 , 
         \SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_6 , 
         \SMART_ABS/RS485_COM_M/i_1 , \SMART_ABS/RS485_COM_M/i_0 , 
         \SMART_ABS/RS485_COM_M/n1 , n7124, begin_reg_1, begin_reg_0, 
         \SMART_ABS/RS485_COM_M/n6293 , \SMART_ABS/RS485_COM_M/n154 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_70 , 
         \SMART_ABS/RS485_COM_M/n1179 , \SMART_ABS/RS485_COM_M/i_2 , 
         \SMART_ABS/RS485_COM_M/n189 , \SMART_ABS/RS485_COM_M/n3572 , 
         \SMART_ABS/RS485_COM_M/n3600 , \SMART_ABS/RS485_COM_M/n700 , 
         \SMART_ABS/RS485_COM_M/n7109 , \SMART_ABS/RS485_COM_M/i_3 , 
         \SMART_ABS/RS485_COM_M/n7032 , \SMART_ABS/RS485_COM_M/rbaud_reg_0 , 
         \SMART_ABS/RS485_COM_M/rbaud_reg_1 , \SMART_ABS/RS485_COM_M/n29 , 
         \SMART_ABS/RS485_COM_M/n30 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_275 , 
         \SMART_ABS/RS485_COM_M/n3076 , \SMART_ABS/RS485_COM_M/rbaud_reg_2 , 
         \SMART_ABS/RS485_COM_M/rbaud_reg_3 , 
         \SMART_ABS/RS485_COM_M/n27_adj_1038 , 
         \SMART_ABS/RS485_COM_M/n28_adj_1039 , 
         \SMART_ABS/RS485_COM_M/rbaud_reg_4 , \SMART_ABS/RS485_COM_M/n7133 , 
         \SMART_ABS/RS485_COM_M/n26_adj_1031 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_72 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_71 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_193 , GND_net, 
         \SMART_ABS/RS485_COM_M/rx_data_reg_70 , \KEY_CHECK/k_down_r , 
         \KEY_CHECK/k_down_rr , \SMART_ABS/RS485_COM_M/rx_data_reg_74 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_73 , \KEY_CHECK/n13 , 
         \KEY_CHECK/n7131 , \SMART_ABS/RS485_COM_M/rx_data_reg_76 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_75 , \SMG_SCAN/n8 , \SMG_SCAN/n6 , 
         \SMG_SCAN/cnt_main_2 , \SMG_SCAN/clk_div , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_40 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_64 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_48 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_32 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_78 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_77 , \SMG_SCAN/n3074 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_47 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_55 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_39 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_79 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_63 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_46 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_54 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_38 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_62 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_45 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_69 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_53 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_37 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_61 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_44 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_68 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_52 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_36 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_43 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_67 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_51 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_35 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_42 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_66 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_50 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_34 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_58 , UART_RX_c, 
         \SMART_ABS/RS485_COM_M/tbaud_reg_0 , 
         \SMART_ABS/RS485_COM_M/tbaud_reg_1 , 
         \SMART_ABS/RS485_COM_M/n29_adj_1036 , 
         \SMART_ABS/RS485_COM_M/n1_adj_1024 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_263 , 
         \SMART_ABS/RS485_COM_M/n3568 , \SMART_ABS/RS485_COM_M/tbaud_reg_2 , 
         \SMART_ABS/RS485_COM_M/tbaud_reg_3 , \SMART_ABS/RS485_COM_M/n27 , 
         \SMART_ABS/RS485_COM_M/n28 , \SMART_ABS/RS485_COM_M/tbaud_reg_4 , 
         \SMART_ABS/RS485_COM_M/n7119 , \SMART_ABS/RS485_COM_M/n26 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_41 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_65 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_49 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_33 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_17 , 
         \SMART_ABS/RS485_COM_M/rx_data_reg_57 , 
         \SMART_ABS/RS485_COM_M/uart_rx_reg_0 , 
         \SMART_ABS/RS485_COM_M/uart_rx_reg_1 , \SMG_SCAN/n7126 , smg4_data_1, 
         \SMG_SCAN/n6702 , smg4_data_0, \SMG_SCAN/n6672 , 
         \SMG_SCAN/smg_data_12_N_303_1 , \SMG_SCAN/smg_data_12_N_303_0 , 
         \SMG_SCAN/clk_in_c_enable_266 , SMG_LED_c_0, SMG_LED_c_1, smg4_data_3, 
         \SMG_SCAN/n6696 , smg4_data_2, \SMG_SCAN/n6699 , 
         \SMG_SCAN/smg_data_12_N_303_3 , \SMG_SCAN/smg_data_12_N_303_2 , 
         SMG_LED_c_2, SMG_LED_c_3, smg4_data_5, \SMG_SCAN/n6690 , smg4_data_4, 
         \SMG_SCAN/n6693 , \SMG_SCAN/smg_data_12_N_303_5 , 
         \SMG_SCAN/smg_data_12_N_303_4 , SMG_LED_c_4, SMG_LED_c_5, smg4_data_7, 
         \SMG_SCAN/n6684 , smg4_data_6, \SMG_SCAN/n6687 , 
         \SMG_SCAN/smg_data_12_N_303_7 , \SMG_SCAN/smg_data_12_N_303_6 , 
         SMG_LED_c_6, SMG_LED_c_7, \SMG_SCAN/cnt_main_1 , 
         \SMG_SCAN/cnt_main_0 , \SMG_SCAN/smg_data_12_N_303_9 , 
         \SMG_SCAN/smg_data_12_N_303_8 , SMG_LED_c_8, SMG_LED_c_9, 
         \SMG_SCAN/smg_data_12_N_303_11 , \SMG_SCAN/smg_data_12_N_303_10 , 
         SMG_LED_c_10, SMG_LED_c_11, \SMG_SCAN/smg_data_12_N_303_12 , 
         SMG_LED_c_12, \SMG_SCAN/n6591 , \SMG_SCAN/n6589 , \SMG_SCAN/n6415 , 
         \SMG_SCAN/n6611 , \SMG_SCAN/clk_div_N_316 , \SMG_SCAN/n19 , 
         \SMG_SCAN/n20 , \SMG_SCAN/n18 , \SMART_ABS/RS485_COM_M/n4_adj_1033 , 
         TR_DIR_c, tr_dir_N_829, \SMART_ABS/RS485_COM_M/n3052 , 
         \SMART_ABS/RS485_COM_M/uart_tx_N_821 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_201 , UART_TX_c, 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_124 , n7110, n3735, 
         \DSP_COM/n7115 , n4, \DSP_COM/n6 , input_u_r, ENC_U_c, 
         \SMART_ABS/RS485_COM_M/n5852 , \SMART_ABS/RS485_COM_M/n144 , 
         input_u_r1, input_v_r, ENC_V_c, \SMART_ABS/RS485_COM_M/n6_adj_1034 , 
         \SMART_ABS/RS485_COM_M/n6556 , input_v_r1, \KEY_CHECK/n7130 , 
         \KEY_CHECK/n7138 , \KEY_CHECK/n7136 , \KEY_CHECK/n6957 , 
         \KEY_CHECK/n878 , \KEY_CHECK/clk_in_c_enable_121 , key_data_0, 
         key_data_1, \KEY_CHECK/n875 , \KEY_CHECK/n6961 , key_data_2, 
         key_data_3, n13_adj_1084, \DSP_COM/n2875 , BUS_D_out_1, 
         out_pulse_type_0, \DSP_COM/out_pulse_type_7_N_133_1 , 
         \DSP_COM/out_pulse_type_7_N_133_0 , out_pulse_type_3, BUS_D_out_3, 
         out_pulse_type_2, \DSP_COM/out_pulse_type_7_N_133_3 , 
         \DSP_COM/out_pulse_type_7_N_133_2 , out_pulse_type_5, BUS_D_out_5, 
         out_pulse_type_4, BUS_D_out_4, \DSP_COM/out_pulse_type_7_N_133_5 , 
         \DSP_COM/out_pulse_type_7_N_133_4 , out_pulse_type_7, BUS_D_out_7, 
         out_pulse_type_6, BUS_D_out_6, \DSP_COM/out_pulse_type_7_N_133_7 , 
         \DSP_COM/out_pulse_type_7_N_133_6 , \DSP_COM/n29_adj_1056 , 
         time_interval_0, \DSP_COM/n7155 , \DSP_COM/n6867 , 
         \DSP_COM/output_bus_data_7_N_197_0 , \DSP_COM/clk_in_c_enable_87 , 
         output_bus_data_0, \DSP_COM/n7061 , time_interval_1, \DSP_COM/n7062 , 
         \DSP_COM/n7065 , \DSP_COM/output_bus_data_7_N_197_1 , 
         output_bus_data_1, \DSP_COM/n29_adj_1065 , time_interval_2, 
         \DSP_COM/n3 , \DSP_COM/n7168 , \DSP_COM/output_bus_data_7_N_197_2 , 
         output_bus_data_2, \DSP_COM/n29_adj_1062 , time_interval_3, 
         \DSP_COM/n6666 , \DSP_COM/n6357 , \DSP_COM/output_bus_data_7_N_197_3 , 
         output_bus_data_3, \DSP_COM/n29_adj_1059 , time_interval_4, 
         \DSP_COM/n7158 , \DSP_COM/n6451 , \DSP_COM/output_bus_data_7_N_197_4 , 
         output_bus_data_4, \DSP_COM/n29_adj_1052 , time_interval_5, 
         \DSP_COM/n7161 , \DSP_COM/n6449 , \DSP_COM/output_bus_data_7_N_197_5 , 
         output_bus_data_5, \DSP_COM/n29 , time_interval_6, \DSP_COM/n7152 , 
         \DSP_COM/n6450 , \DSP_COM/output_bus_data_7_N_197_6 , 
         output_bus_data_6, \DSP_COM/n29_adj_1047 , time_interval_7, 
         \DSP_COM/n7171 , \DSP_COM/n6452 , \DSP_COM/output_bus_data_7_N_197_7 , 
         output_bus_data_7, \n7385\000/BUF1 , 
         \SMART_ABS/RS485_COM_M/r_begin_N_833 , r_begin, 
         \ENCODER_CHECK/input_abz_r , \ENCODER_CHECK/input_abz_r1 , 
         \ENCODER_CHECK/input_uvw_r , \ENCODER_CHECK/input_uvw_r1 , n7385, 
         encoder_error_data_0, \SMART_ABS/RS485_COM_M/rx_data_reg_16 , 
         \SMART_ABS/RS485_COM_M/n383 , \SMART_ABS/RS485_COM_M/n384_adj_1021 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_255 , rx_data_0, rx_data_1, 
         \SMART_ABS/RS485_COM_M/n381 , \SMART_ABS/RS485_COM_M/n382 , rx_data_2, 
         rx_data_3, \SMART_ABS/RS485_COM_M/n379 , \SMART_ABS/RS485_COM_M/n380 , 
         rx_data_4, rx_data_5, \SMART_ABS/RS485_COM_M/n377 , 
         \SMART_ABS/RS485_COM_M/n378 , rx_data_6, rx_data_7, 
         \SMART_ABS/RS485_COM_M/n375 , \SMART_ABS/RS485_COM_M/n376 , rx_data_8, 
         rx_data_9, \SMART_ABS/RS485_COM_M/n373 , \SMART_ABS/RS485_COM_M/n374 , 
         rx_data_10, rx_data_11, \SMART_ABS/RS485_COM_M/n371 , 
         \SMART_ABS/RS485_COM_M/n372 , rx_data_12, rx_data_13, 
         \SMART_ABS/RS485_COM_M/n369 , \SMART_ABS/RS485_COM_M/n370 , 
         rx_data_14, rx_data_15, \SMART_ABS/RS485_COM_M/n367 , 
         \SMART_ABS/RS485_COM_M/n368 , rx_data_16, rx_data_17, 
         \SMART_ABS/RS485_COM_M/n365 , \SMART_ABS/RS485_COM_M/n366 , 
         rx_data_18, rx_data_19, \SMART_ABS/RS485_COM_M/n363 , 
         \SMART_ABS/RS485_COM_M/n364 , rx_data_20, rx_data_21, 
         \SMART_ABS/RS485_COM_M/n361 , \SMART_ABS/RS485_COM_M/n362 , 
         rx_data_22, rx_data_23, \SMART_ABS/RS485_COM_M/n351 , 
         \SMART_ABS/RS485_COM_M/n352 , rx_data_32, rx_data_33, 
         \SMART_ABS/RS485_COM_M/n349 , \SMART_ABS/RS485_COM_M/n350 , 
         rx_data_34, rx_data_35, \SMART_ABS/RS485_COM_M/n347 , 
         \SMART_ABS/RS485_COM_M/n348 , rx_data_36, rx_data_37, 
         \SMART_ABS/RS485_COM_M/n345 , \SMART_ABS/RS485_COM_M/n346 , 
         rx_data_38, rx_data_39, \SMART_ABS/RS485_COM_M/rx_data_reg_56 , 
         \SMART_ABS/RS485_COM_M/n343 , \SMART_ABS/RS485_COM_M/n344 , 
         rx_data_40, rx_data_41, \SMART_ABS/RS485_COM_M/rx_data_reg_59 , 
         \SMART_ABS/RS485_COM_M/n341 , \SMART_ABS/RS485_COM_M/n342 , 
         rx_data_42, rx_data_43, \SMART_ABS/RS485_COM_M/rx_data_reg_60 , 
         \SMART_ABS/RS485_COM_M/n339 , \SMART_ABS/RS485_COM_M/n340 , 
         rx_data_44, rx_data_45, \SMART_ABS/RS485_COM_M/n337 , 
         \SMART_ABS/RS485_COM_M/n338 , rx_data_46, rx_data_47, 
         \SMART_ABS/RS485_COM_M/n335 , \SMART_ABS/RS485_COM_M/n336 , 
         rx_data_48, rx_data_49, \SMART_ABS/RS485_COM_M/n333 , 
         \SMART_ABS/RS485_COM_M/n334 , rx_data_50, rx_data_51, 
         \SMART_ABS/RS485_COM_M/n331 , \SMART_ABS/RS485_COM_M/n332 , 
         rx_data_52, rx_data_53, \SMART_ABS/RS485_COM_M/n329 , 
         \SMART_ABS/RS485_COM_M/n330 , rx_data_54, rx_data_55, 
         \SMART_ABS/RS485_COM_M/n328 , rx_data_56, 
         \SMART_ABS/RS485_COM_M/n7391 , 
         \SMART_ABS/RS485_COM_M/rx_data_63_N_382_58 , 
         \SMART_ABS/RS485_COM_M/rx_data_63_N_382_57 , 
         \SMART_ABS/RS485_COM_M/clk_in_c_enable_205 , rx_data_57, rx_data_58, 
         \SMART_ABS/RS485_COM_M/rx_data_63_N_382_59 , rx_data_59, 
         \SMART_ABS/RS485_COM_M/n324 , rx_data_60, 
         \SMART_ABS/RS485_COM_M/rx_data_63_N_382_62 , 
         \SMART_ABS/RS485_COM_M/rx_data_63_N_382_61 , rx_data_61, rx_data_62, 
         \SMART_ABS/RS485_COM_M/n7390 , 
         \SMART_ABS/RS485_COM_M/rx_data_63_N_382_63 , rx_data_63, 
         \DSP_COM/n13_adj_1066 , \DSP_COM/n2902 , smg0_data_1, smg0_data_0, 
         \DSP_COM/smg0_data_7_N_141_1 , \DSP_COM/smg0_data_7_N_141_0 , 
         smg0_data_3, smg0_data_2, \DSP_COM/smg0_data_7_N_141_3 , 
         \DSP_COM/smg0_data_7_N_141_2 , smg0_data_5, smg0_data_4, 
         \DSP_COM/smg0_data_7_N_141_5 , \DSP_COM/smg0_data_7_N_141_4 , 
         smg0_data_7, smg0_data_6, \DSP_COM/smg0_data_7_N_141_7 , 
         \DSP_COM/smg0_data_7_N_141_6 , \DSP_COM/n13_adj_1053 , \DSP_COM/n10 , 
         smg1_data_1, smg1_data_0, \DSP_COM/smg1_data_7_N_149_1 , 
         \DSP_COM/smg1_data_7_N_149_0 , smg1_data_3, smg1_data_2, 
         \DSP_COM/smg1_data_7_N_149_3 , \DSP_COM/smg1_data_7_N_149_2 , 
         smg1_data_4, \DSP_COM/n9 , \DSP_COM/smg1_data_7_N_149_4 , smg1_data_6, 
         \DSP_COM/n9_adj_1079 , smg1_data_5, n9_adj_1085, 
         \DSP_COM/smg1_data_7_N_149_6 , \DSP_COM/smg1_data_7_N_149_5 , 
         \DSP_COM/out_IO_signal_7__N_132 , n6483, smg1_data_7, 
         \DSP_COM/n9_adj_1078 , \DSP_COM/smg1_data_7_N_149_7 , 
         \DSP_COM/n13_adj_1069 , \DSP_COM/n10_adj_1070 , smg2_data_1, 
         smg2_data_0, \DSP_COM/smg2_data_7_N_157_1 , 
         \DSP_COM/smg2_data_7_N_157_0 , smg2_data_3, smg2_data_2, 
         \DSP_COM/smg2_data_7_N_157_3 , \DSP_COM/smg2_data_7_N_157_2 , 
         smg2_data_5, smg2_data_4, \DSP_COM/smg2_data_7_N_157_5 , 
         \DSP_COM/smg2_data_7_N_157_4 , smg2_data_7, smg2_data_6, 
         \DSP_COM/smg2_data_7_N_157_7 , \DSP_COM/smg2_data_7_N_157_6 , 
         n13_adj_1083, n10, smg3_data_1, smg3_data_0, 
         \DSP_COM/smg3_data_7_N_165_1 , \DSP_COM/smg3_data_7_N_165_0 , 
         smg3_data_3, smg3_data_2, smg3_data_7_N_165_3, 
         \DSP_COM/smg3_data_7_N_165_2 , smg3_data_5, smg3_data_4, 
         \DSP_COM/smg3_data_7_N_165_5 , \DSP_COM/smg3_data_7_N_165_4 , 
         smg3_data_7, smg3_data_6, \DSP_COM/smg3_data_7_N_165_7 , 
         \DSP_COM/smg3_data_7_N_165_6 , n13, \DSP_COM/smg4_data_7_N_173_1 , 
         smg4_data_7_N_173_0, \DSP_COM/smg4_data_7_N_173_3 , 
         \DSP_COM/smg4_data_7_N_173_2 , smg4_data_7_N_173_5, 
         \DSP_COM/smg4_data_7_N_173_4 , \DSP_COM/smg4_data_7_N_173_7 , 
         \DSP_COM/smg4_data_7_N_173_6 , \SMART_ABS/RS485_COM_M/n6_adj_1026 , 
         \SMART_ABS/RS485_COM_M/n7077 , \SMART_ABS/RS485_COM_M/n6509 , 
         \SMART_ABS/RS485_COM_M/n310 , \SMART_ABS/RS485_COM_M/n7_adj_1032 , 
         \SMART_ABS/RS485_COM_M/n6_adj_1045 , \SMART_ABS/RS485_COM_M/n5892 , 
         \SMART_ABS/RS485_COM_M/n7074 , \SMART_ABS/RS485_COM_M/n384 , 
         \SMART_ABS/RS485_COM_M/n1174 , \SMART_ABS/RS485_COM_M/n6500 , 
         \SMART_ABS/RS485_COM_M/n5868 , \SMART_ABS/RS485_COM_M/n7083 , 
         \SMART_ABS/RS485_COM_M/n5837 , \SMART_ABS/RS485_COM_M/n7378 , 
         \SMART_ABS/RS485_COM_M/n7076 , \SMART_ABS/RS485_COM_M/n6787 , 
         \SMART_ABS/RS485_COM_M/n6512 , \SMART_ABS/RS485_COM_M/n5856 , 
         \SMART_ABS/RS485_COM_M/n7090 , \SMART_ABS/RS485_COM_M/n7 , 
         \SMART_ABS/RS485_COM_M/n8_adj_1022 , \SMART_ABS/RS485_COM_M/n2824 , 
         \SMART_ABS/RS485_COM_M/n6506 , \SMART_ABS/RS485_COM_M/n7382 , 
         \SMART_ABS/RS485_COM_M/n253 , \SMART_ABS/RS485_COM_M/n7085 , 
         \DSP_COM/n6863 , \DSP_COM/n6866 , DI4_c, \DSP_COM/n7129 , 
         \DSP_COM/n6660 , \DSP_COM/n6871 , \DSP_COM/n6868 , DI3_c, DI2_c, 
         DI1_c, \SMART_ABS/RS485_COM_M/n7114 , \SMART_ABS/RS485_COM_M/n6007 , 
         \SMART_ABS/RS485_COM_M/n7377 , \SMART_ABS/RS485_COM_M/n5828 , 
         \SMART_ABS/RS485_COM_M/n6953 , \SMART_ABS/RS485_COM_M/n7174 , 
         TMR_CLK_c, \SMART_ABS/RS485_COM_M/n5864 , 
         \SMART_ABS/RS485_COM_M/n7091 , \SMART_ABS/RS485_COM_M/n6 , 
         \SMART_ABS/RS485_COM_M/n7088 , \SMART_ABS/RS485_COM_M/n8 , 
         \SMART_ABS/RS485_COM_M/n7078 , \SMART_ABS/RS485_COM_M/n7082 , 
         \SMART_ABS/RS485_COM_M/n31 , \SMART_ABS/RS485_COM_M/n7097 , 
         \SMART_ABS/RS485_COM_M/n7095 , \SMART_ABS/RS485_COM_M/n195 , 
         \SMART_ABS/RS485_COM_M/n6_adj_1027 , \SMART_ABS/RS485_COM_M/n6015 , 
         \SMART_ABS/RS485_COM_M/n5859 , \SMART_ABS/RS485_COM_M/n4_adj_1025 , 
         \SMART_ABS/RS485_COM_M/n8_adj_1042 , \SMART_ABS/RS485_COM_M/n1378 , 
         \SMART_ABS/RS485_COM_M/n7_adj_1030 , \SMART_ABS/RS485_COM_M/n5873 , 
         \SMART_ABS/RS485_COM_M/n7084 , \SMART_ABS/RS485_COM_M/n2733 , 
         \SMART_ABS/RS485_COM_M/n5844 , \SMART_ABS/RS485_COM_M/n6497 , 
         \SMART_ABS/RS485_COM_M/n6097 , \SMART_ABS/RS485_COM_M/n5805 , 
         \SMART_ABS/RS485_COM_M/n4876 , \SMART_ABS/RS485_COM_M/n7380 , 
         \SMART_ABS/RS485_COM_M/n5906 , \SMART_ABS/RS485_COM_M/n4_adj_1040 , 
         \SMART_ABS/RS485_COM_M/n4 , \SMART_ABS/RS485_COM_M/n4_adj_1023 , 
         \SMART_ABS/RS485_COM_M/n3595 , \SMART_ABS/RS485_COM_M/n3588 , 
         \SMART_ABS/RS485_COM_M/n7079 , \SMART_ABS/RS485_COM_M/n8_adj_1041 , 
         n7135, n6980, \DSP_COM/n7121 , \OUT_PULSE_CHECK/n10 , 
         \OUT_PULSE_CHECK/n12 , \DSP_COM/n7123 , BUS_WE_c, \DSP_COM/n7134 , 
         \DSP_COM/n18 , \DSP_COM/n6536 , \DSP_COM/n6581 , \DSP_COM/n20 , 
         \DSP_COM/n19 , \DSP_COM/n21 , \SMART_ABS/RS485_COM_M/n7080 , 
         \SMART_ABS/RS485_COM_M/n20 , \SMART_ABS/RS485_COM_M/n4_adj_1035 , 
         \SMART_ABS/RS485_COM_M/n3594 , \SMART_ABS/RS485_COM_M/n3619 , 
         \SMART_ABS/RS485_COM_M/n7093 , \SMART_ABS/RS485_COM_M/n2419 , 
         \SMART_ABS/RS485_COM_M/n7087 , \SMART_ABS/RS485_COM_M/n7099 , 
         \SMART_ABS/RS485_COM_M/n7101 , \SMART_ABS/RS485_COM_M/n7098 , 
         \SMART_ABS/RS485_COM_M/n9 , \SMART_ABS/RS485_COM_M/n4_adj_1028 , 
         \SMART_ABS/RS485_COM_M/n5774 , \SMART_ABS/RS485_COM_M/n6_adj_1029 , 
         \SMART_ABS/RS485_COM_M/n5769 , \SMART_ABS/RS485_COM_M/n6421 , 
         \SMART_ABS/RS485_COM_M/n6453 , \SMART_ABS/RS485_COM_M/n7145 , 
         \SMART_ABS/RS485_COM_M/n7125 , \SMART_ABS/RS485_COM_M/n6093 , 
         \SMART_ABS/RS485_COM_M/n6987 , \SMART_ABS/RS485_COM_M/n10 , 
         \SMART_ABS/RS485_COM_M/n7127 , \SMART_ABS/RS485_COM_M/n3554 , 
         \SMART_ABS/RS485_COM_M/n5 , \SMG_SCAN/n10 , \SMG_SCAN/n14 , 
         \SMG_SCAN/n5758 , \SMG_SCAN/n20_adj_1006 , \KEY_CHECK/n6577 , 
         \KEY_CHECK/n6579 , \KEY_CHECK/n6575 , \KEY_CHECK/n12 , 
         \KEY_CHECK/n6517 , ABZ_c, \KEY_CHECK/k_up_r , \KEY_CHECK/k_up_rr , 
         K_DOWN_c, BUS_CS_c, K_UP_c, TMR_DIR_c, \KEY_CHECK/k_mode_r , 
         \KEY_CHECK/k_mode_rr , K_MODE_c, UVW_c, rst_n_in_c, VCCI;

  OUT_PULSE_CHECK_SLICE_0 \OUT_PULSE_CHECK/SLICE_0 ( 
    .D1(\OUT_PULSE_CHECK/input_f_dir ), .C1(\OUT_PULSE_CHECK/n7113 ), 
    .B1(\OUT_PULSE_CHECK/state_1 ), .A1(out_pulse_data_7), 
    .D0(\OUT_PULSE_CHECK/input_f_dir ), .C0(\OUT_PULSE_CHECK/n7113 ), 
    .B0(\OUT_PULSE_CHECK/state_1 ), .A0(out_pulse_data_6), 
    .DI1(\OUT_PULSE_CHECK/n729 ), .DI0(\OUT_PULSE_CHECK/n730 ), 
    .CE(\OUT_PULSE_CHECK/clk_in_c_enable_43 ), .CLK(clk_in_c), 
    .FCI(\OUT_PULSE_CHECK/n5705 ), .F0(\OUT_PULSE_CHECK/n730 ), 
    .Q0(out_pulse_data_6), .F1(\OUT_PULSE_CHECK/n729 ), .Q1(out_pulse_data_7));
  OUT_PULSE_CHECK_SLICE_1 \OUT_PULSE_CHECK/SLICE_1 ( 
    .D1(\OUT_PULSE_CHECK/input_f_dir ), .C1(\OUT_PULSE_CHECK/n7113 ), 
    .B1(\OUT_PULSE_CHECK/state_1 ), .A1(out_pulse_data_5), 
    .D0(\OUT_PULSE_CHECK/input_f_dir ), .C0(\OUT_PULSE_CHECK/n7113 ), 
    .B0(\OUT_PULSE_CHECK/state_1 ), .A0(out_pulse_data_4), 
    .DI1(\OUT_PULSE_CHECK/n731 ), .DI0(\OUT_PULSE_CHECK/n732 ), 
    .CE(\OUT_PULSE_CHECK/clk_in_c_enable_43 ), .CLK(clk_in_c), 
    .FCI(\OUT_PULSE_CHECK/n5704 ), .F0(\OUT_PULSE_CHECK/n732 ), 
    .Q0(out_pulse_data_4), .F1(\OUT_PULSE_CHECK/n731 ), .Q1(out_pulse_data_5), 
    .FCO(\OUT_PULSE_CHECK/n5705 ));
  OUT_PULSE_CHECK_SLICE_2 \OUT_PULSE_CHECK/SLICE_2 ( 
    .D1(\OUT_PULSE_CHECK/input_f_dir ), .C1(\OUT_PULSE_CHECK/n7113 ), 
    .B1(\OUT_PULSE_CHECK/state_1 ), .A1(out_pulse_data_3), 
    .D0(\OUT_PULSE_CHECK/input_f_dir ), .C0(\OUT_PULSE_CHECK/n7113 ), 
    .B0(\OUT_PULSE_CHECK/state_1 ), .A0(out_pulse_data_2), 
    .DI1(\OUT_PULSE_CHECK/n733 ), .DI0(\OUT_PULSE_CHECK/n734 ), 
    .CE(\OUT_PULSE_CHECK/clk_in_c_enable_43 ), .CLK(clk_in_c), 
    .FCI(\OUT_PULSE_CHECK/n5703 ), .F0(\OUT_PULSE_CHECK/n734 ), 
    .Q0(out_pulse_data_2), .F1(\OUT_PULSE_CHECK/n733 ), .Q1(out_pulse_data_3), 
    .FCO(\OUT_PULSE_CHECK/n5704 ));
  OUT_PULSE_CHECK_SLICE_3 \OUT_PULSE_CHECK/SLICE_3 ( 
    .D1(\OUT_PULSE_CHECK/input_f_dir ), .C1(\OUT_PULSE_CHECK/n7113 ), 
    .B1(\OUT_PULSE_CHECK/state_1 ), .A1(out_pulse_data_1), 
    .C0(out_pulse_data_0), .B0(\OUT_PULSE_CHECK/n5 ), 
    .A0(\OUT_PULSE_CHECK/input_f_dir ), .DI1(\OUT_PULSE_CHECK/n735 ), 
    .DI0(\OUT_PULSE_CHECK/n736 ), .CE(\OUT_PULSE_CHECK/clk_in_c_enable_43 ), 
    .CLK(clk_in_c), .FCI(\OUT_PULSE_CHECK/n5702 ), .F0(\OUT_PULSE_CHECK/n736 ), 
    .Q0(out_pulse_data_0), .F1(\OUT_PULSE_CHECK/n735 ), .Q1(out_pulse_data_1), 
    .FCO(\OUT_PULSE_CHECK/n5703 ));
  SLICE_4 SLICE_4( .D1(\OUT_PULSE_CHECK/input_f_dir ), 
    .C1(\OUT_PULSE_CHECK/state_1 ), .B1(\OUT_PULSE_CHECK/n7139 ), 
    .A1(\OUT_PULSE_CHECK/input_z_dir ), .M1(\KEY_CHECK/k_set_r ), .M0(K_SET_c), 
    .CE(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .Q0(\KEY_CHECK/k_set_r ), 
    .Q1(\KEY_CHECK/k_set_rr ), .FCO(\OUT_PULSE_CHECK/n5702 ));
  DSP_COM_SLICE_5 \DSP_COM/SLICE_5 ( .A0(\DSP_COM/cnt_27 ), 
    .DI0(\DSP_COM/n118 ), .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), 
    .FCI(\DSP_COM/n5744 ), .F0(\DSP_COM/n118 ), .Q0(\DSP_COM/cnt_27 ));
  DSP_COM_SLICE_6 \DSP_COM/SLICE_6 ( .A1(\DSP_COM/cnt_26 ), 
    .A0(\DSP_COM/cnt_25 ), .DI1(\DSP_COM/n119 ), .DI0(\DSP_COM/n120 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5743 ), 
    .F0(\DSP_COM/n120 ), .Q0(\DSP_COM/cnt_25 ), .F1(\DSP_COM/n119 ), 
    .Q1(\DSP_COM/cnt_26 ), .FCO(\DSP_COM/n5744 ));
  DSP_COM_SLICE_7 \DSP_COM/SLICE_7 ( .A1(\DSP_COM/cnt_24 ), 
    .A0(\DSP_COM/cnt_23 ), .DI1(\DSP_COM/n121 ), .DI0(\DSP_COM/n122 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5742 ), 
    .F0(\DSP_COM/n122 ), .Q0(\DSP_COM/cnt_23 ), .F1(\DSP_COM/n121 ), 
    .Q1(\DSP_COM/cnt_24 ), .FCO(\DSP_COM/n5743 ));
  DSP_COM_SLICE_8 \DSP_COM/SLICE_8 ( .A1(\DSP_COM/cnt_22 ), 
    .A0(\DSP_COM/cnt_21 ), .DI1(\DSP_COM/n123 ), .DI0(\DSP_COM/n124 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5741 ), 
    .F0(\DSP_COM/n124 ), .Q0(\DSP_COM/cnt_21 ), .F1(\DSP_COM/n123 ), 
    .Q1(\DSP_COM/cnt_22 ), .FCO(\DSP_COM/n5742 ));
  DSP_COM_SLICE_9 \DSP_COM/SLICE_9 ( .A1(\DSP_COM/cnt_20 ), 
    .A0(\DSP_COM/cnt_19 ), .DI1(\DSP_COM/n125 ), .DI0(\DSP_COM/n126 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5740 ), 
    .F0(\DSP_COM/n126 ), .Q0(\DSP_COM/cnt_19 ), .F1(\DSP_COM/n125 ), 
    .Q1(\DSP_COM/cnt_20 ), .FCO(\DSP_COM/n5741 ));
  DSP_COM_SLICE_10 \DSP_COM/SLICE_10 ( .A1(\DSP_COM/cnt_18 ), 
    .A0(\DSP_COM/cnt_17 ), .DI1(\DSP_COM/n127 ), .DI0(\DSP_COM/n128 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5739 ), 
    .F0(\DSP_COM/n128 ), .Q0(\DSP_COM/cnt_17 ), .F1(\DSP_COM/n127 ), 
    .Q1(\DSP_COM/cnt_18 ), .FCO(\DSP_COM/n5740 ));
  DSP_COM_SLICE_11 \DSP_COM/SLICE_11 ( .A1(\DSP_COM/cnt_16 ), 
    .A0(\DSP_COM/cnt_15 ), .DI1(\DSP_COM/n129 ), .DI0(\DSP_COM/n130 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5738 ), 
    .F0(\DSP_COM/n130 ), .Q0(\DSP_COM/cnt_15 ), .F1(\DSP_COM/n129 ), 
    .Q1(\DSP_COM/cnt_16 ), .FCO(\DSP_COM/n5739 ));
  DSP_COM_SLICE_12 \DSP_COM/SLICE_12 ( .A1(\DSP_COM/cnt_14 ), 
    .A0(\DSP_COM/cnt_13 ), .DI1(\DSP_COM/n131 ), .DI0(\DSP_COM/n132 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5737 ), 
    .F0(\DSP_COM/n132 ), .Q0(\DSP_COM/cnt_13 ), .F1(\DSP_COM/n131 ), 
    .Q1(\DSP_COM/cnt_14 ), .FCO(\DSP_COM/n5738 ));
  DSP_COM_SLICE_13 \DSP_COM/SLICE_13 ( .A1(\DSP_COM/cnt_12 ), 
    .A0(\DSP_COM/cnt_11 ), .DI1(\DSP_COM/n133 ), .DI0(\DSP_COM/n134 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5736 ), 
    .F0(\DSP_COM/n134 ), .Q0(\DSP_COM/cnt_11 ), .F1(\DSP_COM/n133 ), 
    .Q1(\DSP_COM/cnt_12 ), .FCO(\DSP_COM/n5737 ));
  DSP_COM_SLICE_14 \DSP_COM/SLICE_14 ( .A1(\DSP_COM/cnt_10 ), 
    .A0(\DSP_COM/cnt_9 ), .DI1(\DSP_COM/n135 ), .DI0(\DSP_COM/n136 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5735 ), 
    .F0(\DSP_COM/n136 ), .Q0(\DSP_COM/cnt_9 ), .F1(\DSP_COM/n135 ), 
    .Q1(\DSP_COM/cnt_10 ), .FCO(\DSP_COM/n5736 ));
  DSP_COM_SLICE_15 \DSP_COM/SLICE_15 ( .A1(\DSP_COM/cnt_8 ), 
    .A0(\DSP_COM/cnt_7 ), .DI1(\DSP_COM/n137 ), .DI0(\DSP_COM/n138 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5734 ), 
    .F0(\DSP_COM/n138 ), .Q0(\DSP_COM/cnt_7 ), .F1(\DSP_COM/n137 ), 
    .Q1(\DSP_COM/cnt_8 ), .FCO(\DSP_COM/n5735 ));
  DSP_COM_SLICE_16 \DSP_COM/SLICE_16 ( .A1(\DSP_COM/cnt_6 ), 
    .A0(\DSP_COM/cnt_5 ), .DI1(\DSP_COM/n139 ), .DI0(\DSP_COM/n140 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5733 ), 
    .F0(\DSP_COM/n140 ), .Q0(\DSP_COM/cnt_5 ), .F1(\DSP_COM/n139 ), 
    .Q1(\DSP_COM/cnt_6 ), .FCO(\DSP_COM/n5734 ));
  DSP_COM_SLICE_17 \DSP_COM/SLICE_17 ( .A1(\DSP_COM/cnt_4 ), 
    .A0(\DSP_COM/cnt_3 ), .DI1(\DSP_COM/n141 ), .DI0(\DSP_COM/n142 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5732 ), 
    .F0(\DSP_COM/n142 ), .Q0(\DSP_COM/cnt_3 ), .F1(\DSP_COM/n141 ), 
    .Q1(\DSP_COM/cnt_4 ), .FCO(\DSP_COM/n5733 ));
  DSP_COM_SLICE_18 \DSP_COM/SLICE_18 ( .A1(\DSP_COM/cnt_2 ), 
    .A0(\DSP_COM/cnt_1 ), .DI1(\DSP_COM/n143 ), .DI0(\DSP_COM/n144 ), 
    .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), .FCI(\DSP_COM/n5731 ), 
    .F0(\DSP_COM/n144 ), .Q0(\DSP_COM/cnt_1 ), .F1(\DSP_COM/n143 ), 
    .Q1(\DSP_COM/cnt_2 ), .FCO(\DSP_COM/n5732 ));
  DSP_COM_SLICE_19 \DSP_COM/SLICE_19 ( .A1(\DSP_COM/cnt_0 ), 
    .DI1(\DSP_COM/n145 ), .LSR(\DSP_COM/n7105 ), .CLK(clk_in_c), 
    .F1(\DSP_COM/n145 ), .Q1(\DSP_COM/cnt_0 ), .FCO(\DSP_COM/n5731 ));
  SMART_ABS_RS485_COM_M_SLICE_20 \SMART_ABS/RS485_COM_M/SLICE_20 ( 
    .A1(\SMART_ABS/RS485_COM_M/error_test_2 ), 
    .A0(\SMART_ABS/RS485_COM_M/error_test_1 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n1093 ), .DI0(\SMART_ABS/RS485_COM_M/n1094 ), 
    .CE(clk_in_c_enable_54), .LSR(rx_485_begin), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5694 ), .F0(\SMART_ABS/RS485_COM_M/n1094 ), 
    .Q0(\SMART_ABS/RS485_COM_M/error_test_1 ), 
    .F1(\SMART_ABS/RS485_COM_M/n1093 ), 
    .Q1(\SMART_ABS/RS485_COM_M/error_test_2 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5695 ));
  SMART_ABS_RS485_COM_M_SLICE_21 \SMART_ABS/RS485_COM_M/SLICE_21 ( 
    .A1(\SMART_ABS/RS485_COM_M/error_test_6 ), 
    .A0(\SMART_ABS/RS485_COM_M/error_test_5 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n1089 ), .DI0(\SMART_ABS/RS485_COM_M/n1090 ), 
    .CE(clk_in_c_enable_54), .LSR(rx_485_begin), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5696 ), .F0(\SMART_ABS/RS485_COM_M/n1090 ), 
    .Q0(\SMART_ABS/RS485_COM_M/error_test_5 ), 
    .F1(\SMART_ABS/RS485_COM_M/n1089 ), 
    .Q1(\SMART_ABS/RS485_COM_M/error_test_6 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5697 ));
  SMART_ABS_RS485_COM_M_SLICE_22 \SMART_ABS/RS485_COM_M/SLICE_22 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n989 ), .DI0(\SMART_ABS/RS485_COM_M/n990 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5691 ), .F0(\SMART_ABS/RS485_COM_M/n990 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .F1(\SMART_ABS/RS485_COM_M/n989 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5692 ));
  SMART_ABS_RS485_COM_M_SLICE_23 \SMART_ABS/RS485_COM_M/SLICE_23 ( 
    .D0(\SMART_ABS/RS485_COM_M/crc_out_0 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_80 ), 
    .B0(\SMART_ABS/RS485_COM_M/crc_out_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_81 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_24 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_23 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5596 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_22 ), 
    .F1(\SMART_ABS/RS485_COM_M/n319 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_23 ));
  SMART_ABS_RS485_COM_M_SLICE_24 \SMART_ABS/RS485_COM_M/SLICE_24 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n991 ), .DI0(\SMART_ABS/RS485_COM_M/n992 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5690 ), .F0(\SMART_ABS/RS485_COM_M/n992 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .F1(\SMART_ABS/RS485_COM_M/n991 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5691 ));
  SMART_ABS_RS485_COM_M_SLICE_25 \SMART_ABS/RS485_COM_M/SLICE_25 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n993 ), .DI0(\SMART_ABS/RS485_COM_M/n994 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5689 ), .F0(\SMART_ABS/RS485_COM_M/n994 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .F1(\SMART_ABS/RS485_COM_M/n993 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5690 ));
  SMART_ABS_RS485_COM_M_SLICE_26 \SMART_ABS/RS485_COM_M/SLICE_26 ( 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n34 ), .DI0(\SMART_ABS/RS485_COM_M/n35 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_272 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3067 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5729 ), .F0(\SMART_ABS/RS485_COM_M/n35 ), 
    .Q0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), .F1(\SMART_ABS/RS485_COM_M/n34 ), 
    .Q1(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ));
  SMART_ABS_RS485_COM_M_SLICE_27 \SMART_ABS/RS485_COM_M/SLICE_27 ( 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n36 ), .DI0(\SMART_ABS/RS485_COM_M/n37 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_272 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3067 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5728 ), .F0(\SMART_ABS/RS485_COM_M/n37 ), 
    .Q0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), .F1(\SMART_ABS/RS485_COM_M/n36 ), 
    .Q1(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5729 ));
  SMART_ABS_RS485_COM_M_SLICE_28 \SMART_ABS/RS485_COM_M/SLICE_28 ( 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n38 ), .DI0(\SMART_ABS/RS485_COM_M/n39 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_272 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3067 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5727 ), .F0(\SMART_ABS/RS485_COM_M/n39 ), 
    .Q0(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), .F1(\SMART_ABS/RS485_COM_M/n38 ), 
    .Q1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5728 ));
  SMART_ABS_RS485_COM_M_SLICE_29 \SMART_ABS/RS485_COM_M/SLICE_29 ( 
    .C1(\SMART_ABS/RS485_COM_M/r_bit_cnt_0 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6462 ), .A1(\SMART_ABS/RS485_COM_M/n4692 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n40 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_272 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3067 ), .CLK(clk_in_c), 
    .F1(\SMART_ABS/RS485_COM_M/n40 ), .Q1(\SMART_ABS/RS485_COM_M/r_bit_cnt_0 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5727 ));
  SMART_ABS_RS485_COM_M_SLICE_30 \SMART_ABS/RS485_COM_M/SLICE_30 ( 
    .D1(\SMART_ABS/RS485_COM_M/crc_out_6 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_86 ), 
    .B1(\SMART_ABS/RS485_COM_M/crc_out_7 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_87 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_20 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_19 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_18 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_19 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5595 ));
  SMART_ABS_RS485_COM_M_SLICE_31 \SMART_ABS/RS485_COM_M/SLICE_31 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n995 ), .DI0(\SMART_ABS/RS485_COM_M/n996 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5688 ), .F0(\SMART_ABS/RS485_COM_M/n996 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .F1(\SMART_ABS/RS485_COM_M/n995 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5689 ));
  SMART_ABS_RS485_COM_M_SLICE_32 \SMART_ABS/RS485_COM_M/SLICE_32 ( 
    .A1(error_test_8), .A0(\SMART_ABS/RS485_COM_M/error_test_7 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n1087 ), .DI0(\SMART_ABS/RS485_COM_M/n1088 ), 
    .CE(clk_in_c_enable_54), .LSR(rx_485_begin), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5697 ), .F0(\SMART_ABS/RS485_COM_M/n1088 ), 
    .Q0(\SMART_ABS/RS485_COM_M/error_test_7 ), 
    .F1(\SMART_ABS/RS485_COM_M/n1087 ), .Q1(error_test_8));
  SMART_ABS_RS485_COM_M_SLICE_33 \SMART_ABS/RS485_COM_M/SLICE_33 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n987 ), .DI0(\SMART_ABS/RS485_COM_M/n988 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5692 ), .F0(\SMART_ABS/RS485_COM_M/n988 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .F1(\SMART_ABS/RS485_COM_M/n987 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5693 ));
  SMART_ABS_RS485_COM_M_SLICE_34 \SMART_ABS/RS485_COM_M/SLICE_34 ( 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n986 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5693 ), .F0(\SMART_ABS/RS485_COM_M/n986 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ));
  SMART_ABS_RS485_COM_M_SLICE_35 \SMART_ABS/RS485_COM_M/SLICE_35 ( 
    .A1(\SMART_ABS/RS485_COM_M/error_test_0 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n1095 ), .CE(clk_in_c_enable_54), 
    .LSR(rx_485_begin), .CLK(clk_in_c), .F1(\SMART_ABS/RS485_COM_M/n1095 ), 
    .Q1(\SMART_ABS/RS485_COM_M/error_test_0 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5694 ));
  SMART_ABS_RS485_COM_M_SLICE_36 \SMART_ABS/RS485_COM_M/SLICE_36 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_0 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n999 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .F1(\SMART_ABS/RS485_COM_M/n999 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_0 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5687 ));
  SMART_ABS_RS485_COM_M_SLICE_37 \SMART_ABS/RS485_COM_M/SLICE_37 ( 
    .A1(\SMART_ABS/RS485_COM_M/error_test_4 ), 
    .A0(\SMART_ABS/RS485_COM_M/error_test_3 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n1091 ), .DI0(\SMART_ABS/RS485_COM_M/n1092 ), 
    .CE(clk_in_c_enable_54), .LSR(rx_485_begin), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5695 ), .F0(\SMART_ABS/RS485_COM_M/n1092 ), 
    .Q0(\SMART_ABS/RS485_COM_M/error_test_3 ), 
    .F1(\SMART_ABS/RS485_COM_M/n1091 ), 
    .Q1(\SMART_ABS/RS485_COM_M/error_test_4 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5696 ));
  SMART_ABS_RS485_COM_M_SLICE_38 \SMART_ABS/RS485_COM_M/SLICE_38 ( 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_2 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_1 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n997 ), .DI0(\SMART_ABS/RS485_COM_M/n998 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ), 
    .LSR(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5687 ), .F0(\SMART_ABS/RS485_COM_M/n998 ), 
    .Q0(\SMART_ABS/RS485_COM_M/time_interval_reg_1 ), 
    .F1(\SMART_ABS/RS485_COM_M/n997 ), 
    .Q1(\SMART_ABS/RS485_COM_M/time_interval_reg_2 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5688 ));
  SMART_ABS_RS485_COM_M_SLICE_39 \SMART_ABS/RS485_COM_M/SLICE_39 ( 
    .D1(\SMART_ABS/RS485_COM_M/crc_out_2 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_82 ), 
    .B1(\SMART_ABS/RS485_COM_M/crc_out_3 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_83 ), 
    .D0(\SMART_ABS/RS485_COM_M/crc_out_4 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_84 ), 
    .B0(\SMART_ABS/RS485_COM_M/crc_out_5 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_85 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_22 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_21 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .FCI(\SMART_ABS/RS485_COM_M/n5595 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_20 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_21 ), 
    .FCO(\SMART_ABS/RS485_COM_M/n5596 ));
  SMG_SCAN_SLICE_40 \SMG_SCAN/SLICE_40 ( .A1(\SMG_SCAN/cnt_12 ), 
    .A0(\SMG_SCAN/cnt_11 ), .DI1(\SMG_SCAN/n93 ), .DI0(\SMG_SCAN/n94 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5712 ), 
    .F0(\SMG_SCAN/n94 ), .Q0(\SMG_SCAN/cnt_11 ), .F1(\SMG_SCAN/n93 ), 
    .Q1(\SMG_SCAN/cnt_12 ), .FCO(\SMG_SCAN/n5713 ));
  SMG_SCAN_SLICE_41 \SMG_SCAN/SLICE_41 ( .A1(\SMG_SCAN/cnt_10 ), 
    .A0(\SMG_SCAN/cnt_9 ), .DI1(\SMG_SCAN/n95 ), .DI0(\SMG_SCAN/n96 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5711 ), 
    .F0(\SMG_SCAN/n96 ), .Q0(\SMG_SCAN/cnt_9 ), .F1(\SMG_SCAN/n95 ), 
    .Q1(\SMG_SCAN/cnt_10 ), .FCO(\SMG_SCAN/n5712 ));
  SMG_SCAN_SLICE_42 \SMG_SCAN/SLICE_42 ( .A1(\SMG_SCAN/cnt_8 ), 
    .A0(\SMG_SCAN/cnt_7 ), .DI1(\SMG_SCAN/n97 ), .DI0(\SMG_SCAN/n98 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5710 ), 
    .F0(\SMG_SCAN/n98 ), .Q0(\SMG_SCAN/cnt_7 ), .F1(\SMG_SCAN/n97 ), 
    .Q1(\SMG_SCAN/cnt_8 ), .FCO(\SMG_SCAN/n5711 ));
  SMG_SCAN_SLICE_43 \SMG_SCAN/SLICE_43 ( .A1(\SMG_SCAN/cnt_6 ), 
    .A0(\SMG_SCAN/cnt_5 ), .DI1(\SMG_SCAN/n99 ), .DI0(\SMG_SCAN/n100 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5709 ), 
    .F0(\SMG_SCAN/n100 ), .Q0(\SMG_SCAN/cnt_5 ), .F1(\SMG_SCAN/n99 ), 
    .Q1(\SMG_SCAN/cnt_6 ), .FCO(\SMG_SCAN/n5710 ));
  SMG_SCAN_SLICE_44 \SMG_SCAN/SLICE_44 ( .A1(\SMG_SCAN/cnt_4 ), 
    .A0(\SMG_SCAN/cnt_3 ), .DI1(\SMG_SCAN/n101 ), .DI0(\SMG_SCAN/n102 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5708 ), 
    .F0(\SMG_SCAN/n102 ), .Q0(\SMG_SCAN/cnt_3 ), .F1(\SMG_SCAN/n101 ), 
    .Q1(\SMG_SCAN/cnt_4 ), .FCO(\SMG_SCAN/n5709 ));
  SMG_SCAN_SLICE_45 \SMG_SCAN/SLICE_45 ( .A1(\SMG_SCAN/cnt_2 ), 
    .A0(\SMG_SCAN/cnt_1 ), .DI1(\SMG_SCAN/n103 ), .DI0(\SMG_SCAN/n104 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5707 ), 
    .F0(\SMG_SCAN/n104 ), .Q0(\SMG_SCAN/cnt_1 ), .F1(\SMG_SCAN/n103 ), 
    .Q1(\SMG_SCAN/cnt_2 ), .FCO(\SMG_SCAN/n5708 ));
  SMG_SCAN_SLICE_46 \SMG_SCAN/SLICE_46 ( .A1(\SMG_SCAN/cnt_0 ), 
    .DI1(\SMG_SCAN/n105 ), .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), 
    .F1(\SMG_SCAN/n105 ), .Q1(\SMG_SCAN/cnt_0 ), .FCO(\SMG_SCAN/n5707 ));
  SMG_SCAN_SLICE_47 \SMG_SCAN/SLICE_47 ( .A0(\SMG_SCAN/cnt_19 ), 
    .DI0(\SMG_SCAN/n86 ), .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), 
    .FCI(\SMG_SCAN/n5716 ), .F0(\SMG_SCAN/n86 ), .Q0(\SMG_SCAN/cnt_19 ));
  SMG_SCAN_SLICE_48 \SMG_SCAN/SLICE_48 ( .A1(\SMG_SCAN/cnt_18 ), 
    .A0(\SMG_SCAN/cnt_17 ), .DI1(\SMG_SCAN/n87 ), .DI0(\SMG_SCAN/n88 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5715 ), 
    .F0(\SMG_SCAN/n88 ), .Q0(\SMG_SCAN/cnt_17 ), .F1(\SMG_SCAN/n87 ), 
    .Q1(\SMG_SCAN/cnt_18 ), .FCO(\SMG_SCAN/n5716 ));
  SMG_SCAN_SLICE_49 \SMG_SCAN/SLICE_49 ( .A1(\SMG_SCAN/cnt_16 ), 
    .A0(\SMG_SCAN/cnt_15 ), .DI1(\SMG_SCAN/n89 ), .DI0(\SMG_SCAN/n90 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5714 ), 
    .F0(\SMG_SCAN/n90 ), .Q0(\SMG_SCAN/cnt_15 ), .F1(\SMG_SCAN/n89 ), 
    .Q1(\SMG_SCAN/cnt_16 ), .FCO(\SMG_SCAN/n5715 ));
  SMG_SCAN_SLICE_50 \SMG_SCAN/SLICE_50 ( .A1(\SMG_SCAN/cnt_14 ), 
    .A0(\SMG_SCAN/cnt_13 ), .DI1(\SMG_SCAN/n91 ), .DI0(\SMG_SCAN/n92 ), 
    .LSR(\SMG_SCAN/cnt_19__N_299 ), .CLK(clk_in_c), .FCI(\SMG_SCAN/n5713 ), 
    .F0(\SMG_SCAN/n92 ), .Q0(\SMG_SCAN/cnt_13 ), .F1(\SMG_SCAN/n91 ), 
    .Q1(\SMG_SCAN/cnt_14 ), .FCO(\SMG_SCAN/n5714 ));
  KEY_CHECK_SLICE_51 \KEY_CHECK/SLICE_51 ( .A0(\KEY_CHECK/cnt_19 ), 
    .DI0(\KEY_CHECK/n86 ), .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), 
    .FCI(\KEY_CHECK/n5726 ), .F0(\KEY_CHECK/n86 ), .Q0(\KEY_CHECK/cnt_19 ));
  KEY_CHECK_SLICE_52 \KEY_CHECK/SLICE_52 ( .A1(\KEY_CHECK/cnt_18 ), 
    .A0(\KEY_CHECK/cnt_17 ), .DI1(\KEY_CHECK/n87 ), .DI0(\KEY_CHECK/n88 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5725 ), 
    .F0(\KEY_CHECK/n88 ), .Q0(\KEY_CHECK/cnt_17 ), .F1(\KEY_CHECK/n87 ), 
    .Q1(\KEY_CHECK/cnt_18 ), .FCO(\KEY_CHECK/n5726 ));
  KEY_CHECK_SLICE_53 \KEY_CHECK/SLICE_53 ( .A1(\KEY_CHECK/cnt_16 ), 
    .A0(\KEY_CHECK/cnt_15 ), .DI1(\KEY_CHECK/n89 ), .DI0(\KEY_CHECK/n90 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5724 ), 
    .F0(\KEY_CHECK/n90 ), .Q0(\KEY_CHECK/cnt_15 ), .F1(\KEY_CHECK/n89 ), 
    .Q1(\KEY_CHECK/cnt_16 ), .FCO(\KEY_CHECK/n5725 ));
  KEY_CHECK_SLICE_54 \KEY_CHECK/SLICE_54 ( .A1(\KEY_CHECK/cnt_14 ), 
    .A0(\KEY_CHECK/cnt_13 ), .DI1(\KEY_CHECK/n91 ), .DI0(\KEY_CHECK/n92 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5723 ), 
    .F0(\KEY_CHECK/n92 ), .Q0(\KEY_CHECK/cnt_13 ), .F1(\KEY_CHECK/n91 ), 
    .Q1(\KEY_CHECK/cnt_14 ), .FCO(\KEY_CHECK/n5724 ));
  KEY_CHECK_SLICE_55 \KEY_CHECK/SLICE_55 ( .A1(\KEY_CHECK/cnt_12 ), 
    .A0(\KEY_CHECK/cnt_11 ), .DI1(\KEY_CHECK/n93 ), .DI0(\KEY_CHECK/n94 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5722 ), 
    .F0(\KEY_CHECK/n94 ), .Q0(\KEY_CHECK/cnt_11 ), .F1(\KEY_CHECK/n93 ), 
    .Q1(\KEY_CHECK/cnt_12 ), .FCO(\KEY_CHECK/n5723 ));
  KEY_CHECK_SLICE_56 \KEY_CHECK/SLICE_56 ( .A1(\KEY_CHECK/cnt_10 ), 
    .A0(\KEY_CHECK/cnt_9 ), .DI1(\KEY_CHECK/n95 ), .DI0(\KEY_CHECK/n96 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5721 ), 
    .F0(\KEY_CHECK/n96 ), .Q0(\KEY_CHECK/cnt_9 ), .F1(\KEY_CHECK/n95 ), 
    .Q1(\KEY_CHECK/cnt_10 ), .FCO(\KEY_CHECK/n5722 ));
  KEY_CHECK_SLICE_57 \KEY_CHECK/SLICE_57 ( .A1(\KEY_CHECK/cnt_8 ), 
    .A0(\KEY_CHECK/cnt_7 ), .DI1(\KEY_CHECK/n97 ), .DI0(\KEY_CHECK/n98 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5720 ), 
    .F0(\KEY_CHECK/n98 ), .Q0(\KEY_CHECK/cnt_7 ), .F1(\KEY_CHECK/n97 ), 
    .Q1(\KEY_CHECK/cnt_8 ), .FCO(\KEY_CHECK/n5721 ));
  KEY_CHECK_SLICE_58 \KEY_CHECK/SLICE_58 ( .A1(\KEY_CHECK/cnt_6 ), 
    .A0(\KEY_CHECK/cnt_5 ), .DI1(\KEY_CHECK/n99 ), .DI0(\KEY_CHECK/n100 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5719 ), 
    .F0(\KEY_CHECK/n100 ), .Q0(\KEY_CHECK/cnt_5 ), .F1(\KEY_CHECK/n99 ), 
    .Q1(\KEY_CHECK/cnt_6 ), .FCO(\KEY_CHECK/n5720 ));
  KEY_CHECK_SLICE_59 \KEY_CHECK/SLICE_59 ( .A1(\KEY_CHECK/cnt_4 ), 
    .A0(\KEY_CHECK/cnt_3 ), .DI1(\KEY_CHECK/n101 ), .DI0(\KEY_CHECK/n102 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5718 ), 
    .F0(\KEY_CHECK/n102 ), .Q0(\KEY_CHECK/cnt_3 ), .F1(\KEY_CHECK/n101 ), 
    .Q1(\KEY_CHECK/cnt_4 ), .FCO(\KEY_CHECK/n5719 ));
  KEY_CHECK_SLICE_60 \KEY_CHECK/SLICE_60 ( .A1(\KEY_CHECK/cnt_2 ), 
    .A0(\KEY_CHECK/cnt_1 ), .DI1(\KEY_CHECK/n103 ), .DI0(\KEY_CHECK/n104 ), 
    .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .FCI(\KEY_CHECK/n5717 ), 
    .F0(\KEY_CHECK/n104 ), .Q0(\KEY_CHECK/cnt_1 ), .F1(\KEY_CHECK/n103 ), 
    .Q1(\KEY_CHECK/cnt_2 ), .FCO(\KEY_CHECK/n5718 ));
  KEY_CHECK_SLICE_61 \KEY_CHECK/SLICE_61 ( .A1(\KEY_CHECK/cnt_0 ), 
    .DI1(\KEY_CHECK/n105 ), .LSR(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), 
    .F1(\KEY_CHECK/n105 ), .Q1(\KEY_CHECK/cnt_0 ), .FCO(\KEY_CHECK/n5717 ));
  DSP_COM_SLICE_62 \DSP_COM/SLICE_62 ( .D1(\DSP_COM/cnt_14 ), 
    .C1(\DSP_COM/cnt_15 ), .B1(\DSP_COM/cnt_3 ), .A1(\DSP_COM/cnt_2 ), 
    .D0(DEBUG_LED_c), .C0(\DSP_COM/n6583 ), .B0(\DSP_COM/n6723 ), 
    .A0(\DSP_COM/n6585 ), .DI0(\DSP_COM/debug_led_N_234 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/debug_led_N_234 ), .Q0(DEBUG_LED_c), .F1(\DSP_COM/n6585 ));
  DSP_COM_SLICE_63 \DSP_COM/SLICE_63 ( .B1(BUS_D_out_0), .A1(BUS_A_c_0), 
    .D0(n13_adj_1082), .C0(\DSP_COM/n10_adj_1074 ), .B0(DO1_c_0), 
    .A0(n9_adj_1086), .DI0(\DSP_COM/out_IO_signal_7_N_124_0 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_IO_signal_7_N_124_0 ), .Q0(DO1_c_0), .F1(n9_adj_1086));
  DSP_COM_SLICE_64 \DSP_COM/SLICE_64 ( .D1(BUS_A_c_1), .C1(BUS_A_c_2), 
    .B1(BUS_A_c_3), .A1(BUS_A_c_4), .D0(n13_adj_1082), 
    .C0(\DSP_COM/n10_adj_1074 ), .B0(DO2_c_1), .A0(\DSP_COM/n9_adj_1067 ), 
    .DI0(\DSP_COM/out_IO_signal_7_N_124_1 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_IO_signal_7_N_124_1 ), .Q0(DO2_c_1), 
    .F1(\DSP_COM/n10_adj_1074 ));
  DSP_COM_SLICE_65 \DSP_COM/SLICE_65 ( .B1(BUS_D_out_2), .A1(BUS_A_c_0), 
    .D0(n13_adj_1082), .C0(\DSP_COM/n10_adj_1074 ), .B0(DO3_c_2), 
    .A0(\DSP_COM/n9_adj_1073 ), .DI0(\DSP_COM/out_IO_signal_7_N_124_2 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_IO_signal_7_N_124_2 ), .Q0(DO3_c_2), 
    .F1(\DSP_COM/n9_adj_1073 ));
  SLICE_66 SLICE_66( .C1(n7122), .B1(BUS_A_c_4), .A1(BUS_A_c_3), 
    .D0(n13_adj_1082), .C0(\DSP_COM/n10_adj_1074 ), .B0(DO4_c_3), .A0(n9), 
    .DI0(\DSP_COM/out_IO_signal_7_N_124_3 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_IO_signal_7_N_124_3 ), .Q0(DO4_c_3), .F1(n13_adj_1082));
  DSP_COM_SLICE_69 \DSP_COM/SLICE_69 ( .B1(\DSP_COM/bus_we_r1 ), 
    .A1(\DSP_COM/bus_we_r ), .D0(\DSP_COM/n7128 ), .C0(\DSP_COM/output_en ), 
    .B0(\DSP_COM/bus_cs_r ), .A0(\DSP_COM/bus_cs_r1 ), .DI0(\DSP_COM/n3029 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/n3029 ), .Q0(\DSP_COM/output_en ), 
    .F1(\DSP_COM/n7128 ));
  OUT_PULSE_CHECK_SLICE_82 \OUT_PULSE_CHECK/SLICE_82 ( 
    .D1(\OUT_PULSE_CHECK/input_b_r ), .C1(\OUT_PULSE_CHECK/input_b_r1 ), 
    .B1(\OUT_PULSE_CHECK/input_a_r1 ), .A1(\OUT_PULSE_CHECK/input_a_r ), 
    .D0(out_pulse_type_1), .C0(\OUT_PULSE_CHECK/n6931 ), 
    .B0(\OUT_PULSE_CHECK/input_b_r ), .A0(\OUT_PULSE_CHECK/n6932 ), 
    .DI0(\OUT_PULSE_CHECK/n7067 ), .CE(\OUT_PULSE_CHECK/clk_in_c_enable_17 ), 
    .CLK(clk_in_c), .F0(\OUT_PULSE_CHECK/n7067 ), 
    .Q0(\OUT_PULSE_CHECK/input_f_dir ), .F1(\OUT_PULSE_CHECK/n6931 ));
  OUT_PULSE_CHECK_SLICE_83 \OUT_PULSE_CHECK/SLICE_83 ( 
    .D1(\OUT_PULSE_CHECK/input_a_r ), .C1(\OUT_PULSE_CHECK/input_a_r1 ), 
    .B1(\OUT_PULSE_CHECK/input_b_r ), .A1(out_pulse_type_1), 
    .D0(\OUT_PULSE_CHECK/input_a_r ), .C0(\OUT_PULSE_CHECK/input_a_r1 ), 
    .B0(\OUT_PULSE_CHECK/input_b_r ), .A0(out_pulse_type_1), 
    .DI0(\OUT_PULSE_CHECK/n7164 ), .M0(\OUT_PULSE_CHECK/input_b_r1 ), 
    .CE(\OUT_PULSE_CHECK/clk_in_c_enable_17 ), .CLK(clk_in_c), 
    .OFX0(\OUT_PULSE_CHECK/n7164 ), .Q0(\OUT_PULSE_CHECK/input_z_dir ));
  OUT_PULSE_CHECK_SLICE_84 \OUT_PULSE_CHECK/SLICE_84 ( 
    .D1(\OUT_PULSE_CHECK/input_z_dir ), .C1(\OUT_PULSE_CHECK/input_f_dir ), 
    .B1(\OUT_PULSE_CHECK/n7139 ), .A1(\OUT_PULSE_CHECK/state_1 ), 
    .D0(\OUT_PULSE_CHECK/n2935 ), .C0(\OUT_PULSE_CHECK/input_f_dir ), 
    .B0(\OUT_PULSE_CHECK/input_z_dir ), .A0(\OUT_PULSE_CHECK/state_0 ), 
    .DI1(\OUT_PULSE_CHECK/n2307 ), .DI0(\OUT_PULSE_CHECK/n2937 ), 
    .CLK(clk_in_c), .F0(\OUT_PULSE_CHECK/n2937 ), 
    .Q0(\OUT_PULSE_CHECK/state_0 ), .F1(\OUT_PULSE_CHECK/n2307 ), 
    .Q1(\OUT_PULSE_CHECK/state_1 ));
  OUT_PULSE_CHECK_SLICE_85 \OUT_PULSE_CHECK/SLICE_85 ( 
    .C1(\OUT_PULSE_CHECK/state_1 ), .B1(\OUT_PULSE_CHECK/input_f_dir ), 
    .A1(\OUT_PULSE_CHECK/state_2__N_943 ), 
    .C0(\OUT_PULSE_CHECK/state_2__N_943 ), .B0(\OUT_PULSE_CHECK/input_z_dir ), 
    .A0(\OUT_PULSE_CHECK/input_f_dir ), .DI0(\OUT_PULSE_CHECK/n2316 ), 
    .M1(\OUT_PULSE_CHECK/input_a_r ), .CLK(clk_in_c), 
    .F0(\OUT_PULSE_CHECK/n2316 ), .Q0(\OUT_PULSE_CHECK/state_2__N_943 ), 
    .F1(\OUT_PULSE_CHECK/n2935 ), .Q1(\OUT_PULSE_CHECK/input_a_r1 ));
  SMART_ABS_RS485_COM_M_SLICE_86 \SMART_ABS/RS485_COM_M/SLICE_86 ( 
    .D1(\SMART_ABS/RS485_COM_M/error_test_2 ), 
    .C1(\SMART_ABS/RS485_COM_M/error_test_3 ), 
    .B1(\SMART_ABS/RS485_COM_M/error_test_4 ), 
    .A1(\SMART_ABS/RS485_COM_M/error_test_1 ), .B0(error_test_8), .A0(n4680), 
    .DI0(\SMART_ABS/RS485_COM_M/com_error_7_N_812_7 ), .CE(rx_485_begin), 
    .CLK(clk_in_c), .F0(\SMART_ABS/RS485_COM_M/com_error_7_N_812_7 ), 
    .Q0(\SMART_ABS/RS485_COM_M/com_error_7 ), 
    .F1(\SMART_ABS/RS485_COM_M/n4588 ));
  SMART_ABS_RS485_COM_M_u_crc_SLICE_87 \SMART_ABS/RS485_COM_M/u_crc/SLICE_87 
    ( .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_25 ), 
    .C1(\SMART_ABS/RS485_COM_M/u_crc/n16 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_9 ), 
    .A1(\SMART_ABS/RS485_COM_M/u_crc/n17 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_24 ), 
    .C0(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1020 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_8 ), 
    .A0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1019 ), 
    .DI1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_1 ), 
    .DI0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_0 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_262 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_0 ), 
    .Q0(\SMART_ABS/RS485_COM_M/crc_out_0 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_1 ), 
    .Q1(\SMART_ABS/RS485_COM_M/crc_out_1 ));
  SMART_ABS_RS485_COM_M_u_crc_SLICE_88 \SMART_ABS/RS485_COM_M/u_crc/SLICE_88 
    ( .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_27 ), 
    .C1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1010 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_11 ), 
    .A1(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1009 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_26 ), 
    .C0(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1008 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_10 ), 
    .A0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1007 ), 
    .DI1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_3 ), 
    .DI0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_2 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_262 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_2 ), 
    .Q0(\SMART_ABS/RS485_COM_M/crc_out_2 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_3 ), 
    .Q1(\SMART_ABS/RS485_COM_M/crc_out_3 ));
  SMART_ABS_RS485_COM_M_u_crc_SLICE_89 \SMART_ABS/RS485_COM_M/u_crc/SLICE_89 
    ( .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_29 ), 
    .C1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1014 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_13 ), 
    .A1(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1013 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_28 ), 
    .C0(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1012 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_12 ), 
    .A0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1011 ), 
    .DI1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_5 ), 
    .DI0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_4 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_262 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_4 ), 
    .Q0(\SMART_ABS/RS485_COM_M/crc_out_4 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_5 ), 
    .Q1(\SMART_ABS/RS485_COM_M/crc_out_5 ));
  SMART_ABS_RS485_COM_M_u_crc_SLICE_90 \SMART_ABS/RS485_COM_M/u_crc/SLICE_90 
    ( .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_31 ), 
    .C1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1018 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_15 ), 
    .A1(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1017 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_30 ), 
    .C0(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1016 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_14 ), 
    .A0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1015 ), 
    .DI1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_7 ), 
    .DI0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_6 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_262 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_6 ), 
    .Q0(\SMART_ABS/RS485_COM_M/crc_out_6 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/crc_out_7_N_844_7 ), 
    .Q1(\SMART_ABS/RS485_COM_M/crc_out_7 ));
  SMART_ABS_RS485_COM_M_SLICE_91 \SMART_ABS/RS485_COM_M/SLICE_91 ( 
    .D1(\SMART_ABS/RS485_COM_M/i_1 ), .C1(\SMART_ABS/RS485_COM_M/i_0 ), 
    .B1(\SMART_ABS/RS485_COM_M/n1 ), .A1(n7124), 
    .D0(\SMART_ABS/RS485_COM_M/n1 ), .C0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .B0(begin_reg_1), .A0(begin_reg_0), .DI1(\SMART_ABS/RS485_COM_M/n6293 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n154 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_70 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1179 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n154 ), .Q0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6293 ), .Q1(\SMART_ABS/RS485_COM_M/i_1 ));
  SMART_ABS_RS485_COM_M_SLICE_92 \SMART_ABS/RS485_COM_M/SLICE_92 ( 
    .D1(\SMART_ABS/RS485_COM_M/i_0 ), .C1(\SMART_ABS/RS485_COM_M/i_1 ), 
    .B1(\SMART_ABS/RS485_COM_M/n1 ), .A1(n7124), 
    .D0(\SMART_ABS/RS485_COM_M/i_2 ), .C0(\SMART_ABS/RS485_COM_M/n189 ), 
    .B0(\SMART_ABS/RS485_COM_M/n3572 ), .A0(\SMART_ABS/RS485_COM_M/n3600 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n700 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_70 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1179 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n700 ), .Q0(\SMART_ABS/RS485_COM_M/i_2 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3600 ));
  SMART_ABS_RS485_COM_M_SLICE_93 \SMART_ABS/RS485_COM_M/SLICE_93 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7109 ), .C1(\SMART_ABS/RS485_COM_M/i_1 ), 
    .B1(\SMART_ABS/RS485_COM_M/i_2 ), .A1(\SMART_ABS/RS485_COM_M/i_3 ), 
    .D0(\SMART_ABS/RS485_COM_M/n1 ), .C0(\SMART_ABS/RS485_COM_M/i_3 ), 
    .B0(begin_reg_1), .A0(begin_reg_0), .DI0(\SMART_ABS/RS485_COM_M/n7032 ), 
    .M0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_70 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1179 ), .CLK(clk_in_c), 
    .OFX0(\SMART_ABS/RS485_COM_M/n7032 ), .Q0(\SMART_ABS/RS485_COM_M/i_3 ));
  SMART_ABS_RS485_COM_M_SLICE_95 \SMART_ABS/RS485_COM_M/SLICE_95 ( 
    .B1(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .A1(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n29 ), .DI0(\SMART_ABS/RS485_COM_M/n30 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_275 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3076 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n30 ), .Q0(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .F1(\SMART_ABS/RS485_COM_M/n29 ), .Q1(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ));
  SMART_ABS_RS485_COM_M_SLICE_96 \SMART_ABS/RS485_COM_M/SLICE_96 ( 
    .D1(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), 
    .C1(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ), 
    .B1(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ), 
    .A1(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .C0(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), 
    .B0(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n27_adj_1038 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n28_adj_1039 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_275 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3076 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n28_adj_1039 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), 
    .F1(\SMART_ABS/RS485_COM_M/n27_adj_1038 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ));
  SMART_ABS_RS485_COM_M_SLICE_97 \SMART_ABS/RS485_COM_M/SLICE_97 ( 
    .B1(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ), 
    .A1(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .D0(\SMART_ABS/RS485_COM_M/rbaud_reg_4 ), 
    .C0(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7133 ), 
    .A0(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n26_adj_1031 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_275 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3076 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n26_adj_1031 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rbaud_reg_4 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7133 ));
  SLICE_129 SLICE_129( .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_72 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_71 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(GND_net), .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_70 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_71 ));
  SLICE_130 SLICE_130( .B1(\KEY_CHECK/k_down_r ), .A1(\KEY_CHECK/k_down_rr ), 
    .D0(\KEY_CHECK/cnt_12 ), .C0(\KEY_CHECK/cnt_14 ), .B0(\KEY_CHECK/cnt_7 ), 
    .A0(\KEY_CHECK/cnt_10 ), .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_74 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_73 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\KEY_CHECK/n13 ), .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_72 ), 
    .F1(\KEY_CHECK/n7131 ), .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_73 ));
  SLICE_131 SLICE_131( .B1(\SMG_SCAN/cnt_19 ), .A1(\SMG_SCAN/cnt_16 ), 
    .D0(\SMG_SCAN/cnt_13 ), .C0(\SMG_SCAN/cnt_8 ), .B0(\SMG_SCAN/cnt_6 ), 
    .A0(\SMG_SCAN/cnt_3 ), .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_76 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_75 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMG_SCAN/n8 ), .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_74 ), 
    .F1(\SMG_SCAN/n6 ), .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_75 ));
  SLICE_132 SLICE_132( .B1(\SMG_SCAN/cnt_main_2 ), .A1(\SMG_SCAN/clk_div ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_40 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_64 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_48 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_32 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_78 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_77 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1020 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_76 ), .F1(\SMG_SCAN/n3074 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_77 ));
  SMART_ABS_RS485_COM_M_SLICE_133 \SMART_ABS/RS485_COM_M/SLICE_133 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_47 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_71 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_55 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_39 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_23 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_79 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_63 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_87 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_80 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_79 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1017 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_78 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1018 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_79 ));
  SMART_ABS_RS485_COM_M_SLICE_134 \SMART_ABS/RS485_COM_M/SLICE_134 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_46 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_70 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_54 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_38 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_22 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_78 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_62 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_86 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_82 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_81 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1015 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_80 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1016 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_81 ));
  SMART_ABS_RS485_COM_M_SLICE_135 \SMART_ABS/RS485_COM_M/SLICE_135 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_45 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_69 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_53 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_37 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_21 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_77 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_61 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_85 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_84 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_83 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1013 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_82 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1014 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_83 ));
  SMART_ABS_RS485_COM_M_SLICE_136 \SMART_ABS/RS485_COM_M/SLICE_136 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_44 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_68 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_52 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_36 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_43 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_67 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_51 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_35 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_86 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_85 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1010 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_84 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1012 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_85 ));
  SMART_ABS_RS485_COM_M_SLICE_137 \SMART_ABS/RS485_COM_M/SLICE_137 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_42 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_66 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_50 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_34 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_18 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_74 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_58 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_82 ), .M1(UART_RX_c), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_87 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1007 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_86 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n16_adj_1008 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_87 ));
  SMART_ABS_RS485_COM_M_SLICE_138 \SMART_ABS/RS485_COM_M/SLICE_138 ( 
    .B1(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .A1(\SMART_ABS/RS485_COM_M/tbaud_reg_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n29_adj_1036 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n1_adj_1024 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_263 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3568 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n1_adj_1024 ), 
    .Q0(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .F1(\SMART_ABS/RS485_COM_M/n29_adj_1036 ), 
    .Q1(\SMART_ABS/RS485_COM_M/tbaud_reg_1 ));
  SMART_ABS_RS485_COM_M_SLICE_139 \SMART_ABS/RS485_COM_M/SLICE_139 ( 
    .D1(\SMART_ABS/RS485_COM_M/tbaud_reg_2 ), 
    .C1(\SMART_ABS/RS485_COM_M/tbaud_reg_3 ), 
    .B1(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .A1(\SMART_ABS/RS485_COM_M/tbaud_reg_1 ), 
    .C0(\SMART_ABS/RS485_COM_M/tbaud_reg_2 ), 
    .B0(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .A0(\SMART_ABS/RS485_COM_M/tbaud_reg_1 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n27 ), .DI0(\SMART_ABS/RS485_COM_M/n28 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_263 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3568 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n28 ), .Q0(\SMART_ABS/RS485_COM_M/tbaud_reg_2 ), 
    .F1(\SMART_ABS/RS485_COM_M/n27 ), .Q1(\SMART_ABS/RS485_COM_M/tbaud_reg_3 ));
  SMART_ABS_RS485_COM_M_SLICE_140 \SMART_ABS/RS485_COM_M/SLICE_140 ( 
    .B1(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .A1(\SMART_ABS/RS485_COM_M/tbaud_reg_1 ), 
    .D0(\SMART_ABS/RS485_COM_M/tbaud_reg_4 ), 
    .C0(\SMART_ABS/RS485_COM_M/tbaud_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7119 ), 
    .A0(\SMART_ABS/RS485_COM_M/tbaud_reg_2 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n26 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_263 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n3568 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n26 ), .Q0(\SMART_ABS/RS485_COM_M/tbaud_reg_4 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7119 ));
  SMART_ABS_RS485_COM_M_SLICE_141 \SMART_ABS/RS485_COM_M/SLICE_141 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_41 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_65 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_49 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_33 ), 
    .D0(\SMART_ABS/RS485_COM_M/rx_data_reg_17 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_73 ), 
    .B0(\SMART_ABS/RS485_COM_M/rx_data_reg_57 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_81 ), 
    .M1(\SMART_ABS/RS485_COM_M/uart_rx_reg_0 ), .M0(UART_RX_c), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/u_crc/n17 ), 
    .Q0(\SMART_ABS/RS485_COM_M/uart_rx_reg_0 ), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n16 ), 
    .Q1(\SMART_ABS/RS485_COM_M/uart_rx_reg_1 ));
  SMG_SCAN_SLICE_142 \SMG_SCAN/SLICE_142 ( .D1(\SMG_SCAN/n7126 ), 
    .C1(\SMG_SCAN/cnt_main_2 ), .B1(smg4_data_1), .A1(\SMG_SCAN/n6702 ), 
    .C0(\SMG_SCAN/cnt_main_2 ), .B0(smg4_data_0), .A0(\SMG_SCAN/n6672 ), 
    .DI1(\SMG_SCAN/smg_data_12_N_303_1 ), .DI0(\SMG_SCAN/smg_data_12_N_303_0 ), 
    .CE(\SMG_SCAN/clk_in_c_enable_266 ), .CLK(clk_in_c), 
    .F0(\SMG_SCAN/smg_data_12_N_303_0 ), .Q0(SMG_LED_c_0), 
    .F1(\SMG_SCAN/smg_data_12_N_303_1 ), .Q1(SMG_LED_c_1));
  SMG_SCAN_SLICE_143 \SMG_SCAN/SLICE_143 ( .D1(\SMG_SCAN/n7126 ), 
    .C1(\SMG_SCAN/cnt_main_2 ), .B1(smg4_data_3), .A1(\SMG_SCAN/n6696 ), 
    .D0(\SMG_SCAN/n7126 ), .C0(\SMG_SCAN/cnt_main_2 ), .B0(smg4_data_2), 
    .A0(\SMG_SCAN/n6699 ), .DI1(\SMG_SCAN/smg_data_12_N_303_3 ), 
    .DI0(\SMG_SCAN/smg_data_12_N_303_2 ), .CE(\SMG_SCAN/clk_in_c_enable_266 ), 
    .CLK(clk_in_c), .F0(\SMG_SCAN/smg_data_12_N_303_2 ), .Q0(SMG_LED_c_2), 
    .F1(\SMG_SCAN/smg_data_12_N_303_3 ), .Q1(SMG_LED_c_3));
  SMG_SCAN_SLICE_144 \SMG_SCAN/SLICE_144 ( .C1(\SMG_SCAN/cnt_main_2 ), 
    .B1(smg4_data_5), .A1(\SMG_SCAN/n6690 ), .C0(\SMG_SCAN/cnt_main_2 ), 
    .B0(smg4_data_4), .A0(\SMG_SCAN/n6693 ), 
    .DI1(\SMG_SCAN/smg_data_12_N_303_5 ), .DI0(\SMG_SCAN/smg_data_12_N_303_4 ), 
    .CE(\SMG_SCAN/clk_in_c_enable_266 ), .CLK(clk_in_c), 
    .F0(\SMG_SCAN/smg_data_12_N_303_4 ), .Q0(SMG_LED_c_4), 
    .F1(\SMG_SCAN/smg_data_12_N_303_5 ), .Q1(SMG_LED_c_5));
  SMG_SCAN_SLICE_145 \SMG_SCAN/SLICE_145 ( .C1(\SMG_SCAN/cnt_main_2 ), 
    .B1(smg4_data_7), .A1(\SMG_SCAN/n6684 ), .C0(\SMG_SCAN/cnt_main_2 ), 
    .B0(smg4_data_6), .A0(\SMG_SCAN/n6687 ), 
    .DI1(\SMG_SCAN/smg_data_12_N_303_7 ), .DI0(\SMG_SCAN/smg_data_12_N_303_6 ), 
    .CE(\SMG_SCAN/clk_in_c_enable_266 ), .CLK(clk_in_c), 
    .F0(\SMG_SCAN/smg_data_12_N_303_6 ), .Q0(SMG_LED_c_6), 
    .F1(\SMG_SCAN/smg_data_12_N_303_7 ), .Q1(SMG_LED_c_7));
  SMG_SCAN_SLICE_146 \SMG_SCAN/SLICE_146 ( .C1(\SMG_SCAN/cnt_main_2 ), 
    .B1(\SMG_SCAN/cnt_main_1 ), .A1(\SMG_SCAN/cnt_main_0 ), 
    .A0(\SMG_SCAN/cnt_main_2 ), .DI1(\SMG_SCAN/smg_data_12_N_303_9 ), 
    .DI0(\SMG_SCAN/smg_data_12_N_303_8 ), .CE(\SMG_SCAN/clk_in_c_enable_266 ), 
    .CLK(clk_in_c), .F0(\SMG_SCAN/smg_data_12_N_303_8 ), .Q0(SMG_LED_c_8), 
    .F1(\SMG_SCAN/smg_data_12_N_303_9 ), .Q1(SMG_LED_c_9));
  SMG_SCAN_SLICE_147 \SMG_SCAN/SLICE_147 ( .C1(\SMG_SCAN/cnt_main_0 ), 
    .B1(\SMG_SCAN/cnt_main_2 ), .A1(\SMG_SCAN/cnt_main_1 ), 
    .C0(\SMG_SCAN/cnt_main_1 ), .B0(\SMG_SCAN/cnt_main_0 ), 
    .A0(\SMG_SCAN/cnt_main_2 ), .DI1(\SMG_SCAN/smg_data_12_N_303_11 ), 
    .DI0(\SMG_SCAN/smg_data_12_N_303_10 ), .CE(\SMG_SCAN/clk_in_c_enable_266 ), 
    .CLK(clk_in_c), .F0(\SMG_SCAN/smg_data_12_N_303_10 ), .Q0(SMG_LED_c_10), 
    .F1(\SMG_SCAN/smg_data_12_N_303_11 ), .Q1(SMG_LED_c_11));
  SMG_SCAN_SLICE_148 \SMG_SCAN/SLICE_148 ( .B1(\SMG_SCAN/cnt_main_1 ), 
    .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(\SMG_SCAN/cnt_main_2 ), .A0(\SMG_SCAN/cnt_main_1 ), 
    .DI0(\SMG_SCAN/smg_data_12_N_303_12 ), .CE(\SMG_SCAN/clk_in_c_enable_266 ), 
    .CLK(clk_in_c), .F0(\SMG_SCAN/smg_data_12_N_303_12 ), .Q0(SMG_LED_c_12), 
    .F1(\SMG_SCAN/n7126 ));
  SMG_SCAN_SLICE_149 \SMG_SCAN/SLICE_149 ( .D1(\SMG_SCAN/cnt_7 ), 
    .C1(\SMG_SCAN/n6591 ), .B1(\SMG_SCAN/cnt_2 ), .A1(\SMG_SCAN/n6589 ), 
    .D0(\SMG_SCAN/n6415 ), .C0(\SMG_SCAN/n8 ), .B0(\SMG_SCAN/cnt_9 ), 
    .A0(\SMG_SCAN/n6611 ), .DI0(\SMG_SCAN/clk_div_N_316 ), .CLK(clk_in_c), 
    .F0(\SMG_SCAN/clk_div_N_316 ), .Q0(\SMG_SCAN/clk_div ), 
    .F1(\SMG_SCAN/n6611 ));
  SMG_SCAN_SLICE_150 \SMG_SCAN/SLICE_150 ( .B1(\SMG_SCAN/cnt_main_0 ), 
    .A1(\SMG_SCAN/cnt_main_1 ), .A0(\SMG_SCAN/cnt_main_0 ), 
    .DI1(\SMG_SCAN/n19 ), .DI0(\SMG_SCAN/n20 ), .CE(\SMG_SCAN/clk_div ), 
    .LSR(\SMG_SCAN/n3074 ), .CLK(clk_in_c), .F0(\SMG_SCAN/n20 ), 
    .Q0(\SMG_SCAN/cnt_main_0 ), .F1(\SMG_SCAN/n19 ), 
    .Q1(\SMG_SCAN/cnt_main_1 ));
  SMG_SCAN_SLICE_151 \SMG_SCAN/SLICE_151 ( .D1(\SMG_SCAN/cnt_main_2 ), 
    .C1(\SMG_SCAN/clk_div ), .B1(\SMG_SCAN/cnt_main_1 ), 
    .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_2 ), 
    .B0(\SMG_SCAN/cnt_main_1 ), .A0(\SMG_SCAN/cnt_main_0 ), 
    .DI0(\SMG_SCAN/n18 ), .CE(\SMG_SCAN/clk_div ), .LSR(\SMG_SCAN/n3074 ), 
    .CLK(clk_in_c), .F0(\SMG_SCAN/n18 ), .Q0(\SMG_SCAN/cnt_main_2 ), 
    .F1(\SMG_SCAN/clk_in_c_enable_266 ));
  SLICE_152 SLICE_152( .B1(begin_reg_1), .A1(begin_reg_0), 
    .D0(\SMART_ABS/RS485_COM_M/n4_adj_1033 ), .C0(TR_DIR_c), .B0(tr_dir_N_829), 
    .A0(\SMART_ABS/RS485_COM_M/i_2 ), .DI0(\SMART_ABS/RS485_COM_M/n3052 ), 
    .CLK(clk_in_c), .F0(\SMART_ABS/RS485_COM_M/n3052 ), .Q0(TR_DIR_c), 
    .F1(tr_dir_N_829));
  SMART_ABS_RS485_COM_M_SLICE_153 \SMART_ABS/RS485_COM_M/SLICE_153 ( 
    .D1(\SMART_ABS/RS485_COM_M/i_3 ), .C1(\SMART_ABS/RS485_COM_M/i_2 ), 
    .B1(\SMART_ABS/RS485_COM_M/i_1 ), .A1(\SMART_ABS/RS485_COM_M/i_0 ), 
    .D0(\SMART_ABS/RS485_COM_M/i_0 ), .C0(\SMART_ABS/RS485_COM_M/i_2 ), 
    .B0(\SMART_ABS/RS485_COM_M/i_3 ), .A0(\SMART_ABS/RS485_COM_M/i_1 ), 
    .DI0(\SMART_ABS/RS485_COM_M/uart_tx_N_821 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_201 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/uart_tx_N_821 ), .Q0(UART_TX_c), 
    .F1(\SMART_ABS/RS485_COM_M/clk_in_c_enable_124 ));
  SLICE_154 SLICE_154( .C1(begin_reg_1), .B1(begin_reg_0), .A1(n7110), 
    .D0(n7124), .C0(n3735), .B0(BUS_A_c_0), .A0(\DSP_COM/n7115 ), .DI1(n4), 
    .DI0(\DSP_COM/n6 ), .CLK(clk_in_c), .F0(\DSP_COM/n6 ), .Q0(begin_reg_0), 
    .F1(n4), .Q1(begin_reg_1));
  SLICE_155 SLICE_155( .B1(\SMART_ABS/RS485_COM_M/i_2 ), 
    .A1(\SMART_ABS/RS485_COM_M/i_0 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), .M1(input_u_r), 
    .M0(ENC_U_c), .CLK(clk_in_c), .F0(\SMART_ABS/RS485_COM_M/n5852 ), 
    .Q0(input_u_r), .F1(\SMART_ABS/RS485_COM_M/n144 ), .Q1(input_u_r1));
  SLICE_156 SLICE_156( .B1(\SMART_ABS/RS485_COM_M/tbaud_reg_3 ), 
    .A1(\SMART_ABS/RS485_COM_M/tbaud_reg_1 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_0 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), .M1(input_v_r), .M0(ENC_V_c), 
    .CLK(clk_in_c), .F0(\SMART_ABS/RS485_COM_M/n6_adj_1034 ), .Q0(input_v_r), 
    .F1(\SMART_ABS/RS485_COM_M/n6556 ), .Q1(input_v_r1));
  KEY_CHECK_SLICE_157 \KEY_CHECK/SLICE_157 ( .D1(\KEY_CHECK/n7131 ), 
    .C1(\KEY_CHECK/n7130 ), .B1(\KEY_CHECK/n7138 ), .A1(\KEY_CHECK/n7136 ), 
    .D0(\KEY_CHECK/n7138 ), .C0(\KEY_CHECK/n7136 ), .B0(\KEY_CHECK/n7130 ), 
    .A0(\KEY_CHECK/n7131 ), .DI1(\KEY_CHECK/n6957 ), .DI0(\KEY_CHECK/n878 ), 
    .CE(\KEY_CHECK/clk_in_c_enable_121 ), .CLK(clk_in_c), 
    .F0(\KEY_CHECK/n878 ), .Q0(key_data_0), .F1(\KEY_CHECK/n6957 ), 
    .Q1(key_data_1));
  KEY_CHECK_SLICE_158 \KEY_CHECK/SLICE_158 ( .D1(\KEY_CHECK/n7136 ), 
    .C1(\KEY_CHECK/n7138 ), .B1(\KEY_CHECK/n7130 ), .A1(\KEY_CHECK/n7131 ), 
    .D0(\KEY_CHECK/n7130 ), .C0(\KEY_CHECK/n7131 ), .B0(\KEY_CHECK/n7138 ), 
    .A0(\KEY_CHECK/n7136 ), .DI1(\KEY_CHECK/n875 ), .DI0(\KEY_CHECK/n6961 ), 
    .CE(\KEY_CHECK/clk_in_c_enable_121 ), .CLK(clk_in_c), 
    .F0(\KEY_CHECK/n6961 ), .Q0(key_data_2), .F1(\KEY_CHECK/n875 ), 
    .Q1(key_data_3));
  DSP_COM_SLICE_159 \DSP_COM/SLICE_159 ( .D1(n13_adj_1084), 
    .C1(\DSP_COM/n2875 ), .B1(out_pulse_type_1), .A1(BUS_D_out_1), 
    .D0(n13_adj_1084), .C0(\DSP_COM/n2875 ), .B0(out_pulse_type_0), 
    .A0(BUS_D_out_0), .DI1(\DSP_COM/out_pulse_type_7_N_133_1 ), 
    .DI0(\DSP_COM/out_pulse_type_7_N_133_0 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_pulse_type_7_N_133_0 ), .Q0(out_pulse_type_0), 
    .F1(\DSP_COM/out_pulse_type_7_N_133_1 ), .Q1(out_pulse_type_1));
  DSP_COM_SLICE_160 \DSP_COM/SLICE_160 ( .D1(n13_adj_1084), 
    .C1(\DSP_COM/n2875 ), .B1(out_pulse_type_3), .A1(BUS_D_out_3), 
    .D0(n13_adj_1084), .C0(\DSP_COM/n2875 ), .B0(out_pulse_type_2), 
    .A0(BUS_D_out_2), .DI1(\DSP_COM/out_pulse_type_7_N_133_3 ), 
    .DI0(\DSP_COM/out_pulse_type_7_N_133_2 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_pulse_type_7_N_133_2 ), .Q0(out_pulse_type_2), 
    .F1(\DSP_COM/out_pulse_type_7_N_133_3 ), .Q1(out_pulse_type_3));
  DSP_COM_SLICE_161 \DSP_COM/SLICE_161 ( .D1(n13_adj_1084), 
    .C1(\DSP_COM/n2875 ), .B1(out_pulse_type_5), .A1(BUS_D_out_5), 
    .D0(n13_adj_1084), .C0(\DSP_COM/n2875 ), .B0(out_pulse_type_4), 
    .A0(BUS_D_out_4), .DI1(\DSP_COM/out_pulse_type_7_N_133_5 ), 
    .DI0(\DSP_COM/out_pulse_type_7_N_133_4 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_pulse_type_7_N_133_4 ), .Q0(out_pulse_type_4), 
    .F1(\DSP_COM/out_pulse_type_7_N_133_5 ), .Q1(out_pulse_type_5));
  DSP_COM_SLICE_162 \DSP_COM/SLICE_162 ( .D1(n13_adj_1084), 
    .C1(\DSP_COM/n2875 ), .B1(out_pulse_type_7), .A1(BUS_D_out_7), 
    .D0(n13_adj_1084), .C0(\DSP_COM/n2875 ), .B0(out_pulse_type_6), 
    .A0(BUS_D_out_6), .DI1(\DSP_COM/out_pulse_type_7_N_133_7 ), 
    .DI0(\DSP_COM/out_pulse_type_7_N_133_6 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/out_pulse_type_7_N_133_6 ), .Q0(out_pulse_type_6), 
    .F1(\DSP_COM/out_pulse_type_7_N_133_7 ), .Q1(out_pulse_type_7));
  DSP_COM_SLICE_163 \DSP_COM/SLICE_163 ( .C1(\DSP_COM/n29_adj_1056 ), 
    .B1(time_interval_0), .A1(BUS_A_c_3), .C0(BUS_A_c_3), .B0(\DSP_COM/n7155 ), 
    .A0(\DSP_COM/n6867 ), .DI0(\DSP_COM/output_bus_data_7_N_197_0 ), 
    .M0(BUS_A_c_4), .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_0 ), .Q0(output_bus_data_0));
  DSP_COM_SLICE_164 \DSP_COM/SLICE_164 ( .C1(BUS_A_c_3), .B1(\DSP_COM/n7061 ), 
    .A1(time_interval_1), .C0(BUS_A_c_4), .B0(\DSP_COM/n7062 ), 
    .A0(\DSP_COM/n7065 ), .DI0(\DSP_COM/output_bus_data_7_N_197_1 ), 
    .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/output_bus_data_7_N_197_1 ), .Q0(output_bus_data_1), 
    .F1(\DSP_COM/n7062 ));
  DSP_COM_SLICE_165 \DSP_COM/SLICE_165 ( .C1(\DSP_COM/n29_adj_1065 ), 
    .B1(time_interval_2), .A1(BUS_A_c_3), .D0(\DSP_COM/n3 ), 
    .C0(\DSP_COM/n7168 ), .B0(BUS_A_c_3), .A0(BUS_A_c_2), 
    .DI0(\DSP_COM/output_bus_data_7_N_197_2 ), .M0(BUS_A_c_4), 
    .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_2 ), .Q0(output_bus_data_2));
  DSP_COM_SLICE_166 \DSP_COM/SLICE_166 ( .C1(\DSP_COM/n29_adj_1062 ), 
    .B1(time_interval_3), .A1(BUS_A_c_3), .D0(BUS_A_c_2), .C0(BUS_A_c_3), 
    .B0(\DSP_COM/n6666 ), .A0(\DSP_COM/n6357 ), 
    .DI0(\DSP_COM/output_bus_data_7_N_197_3 ), .M0(BUS_A_c_4), 
    .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_3 ), .Q0(output_bus_data_3));
  DSP_COM_SLICE_167 \DSP_COM/SLICE_167 ( .C1(\DSP_COM/n29_adj_1059 ), 
    .B1(time_interval_4), .A1(BUS_A_c_3), .C0(BUS_A_c_3), .B0(\DSP_COM/n7158 ), 
    .A0(\DSP_COM/n6451 ), .DI0(\DSP_COM/output_bus_data_7_N_197_4 ), 
    .M0(BUS_A_c_4), .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_4 ), .Q0(output_bus_data_4));
  DSP_COM_SLICE_168 \DSP_COM/SLICE_168 ( .C1(\DSP_COM/n29_adj_1052 ), 
    .B1(time_interval_5), .A1(BUS_A_c_3), .C0(BUS_A_c_3), .B0(\DSP_COM/n7161 ), 
    .A0(\DSP_COM/n6449 ), .DI0(\DSP_COM/output_bus_data_7_N_197_5 ), 
    .M0(BUS_A_c_4), .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_5 ), .Q0(output_bus_data_5));
  DSP_COM_SLICE_169 \DSP_COM/SLICE_169 ( .C1(\DSP_COM/n29 ), 
    .B1(time_interval_6), .A1(BUS_A_c_3), .C0(BUS_A_c_3), .B0(\DSP_COM/n7152 ), 
    .A0(\DSP_COM/n6450 ), .DI0(\DSP_COM/output_bus_data_7_N_197_6 ), 
    .M0(BUS_A_c_4), .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_6 ), .Q0(output_bus_data_6));
  DSP_COM_SLICE_170 \DSP_COM/SLICE_170 ( .C1(\DSP_COM/n29_adj_1047 ), 
    .B1(time_interval_7), .A1(BUS_A_c_3), .C0(BUS_A_c_3), .B0(\DSP_COM/n7171 ), 
    .A0(\DSP_COM/n6452 ), .DI0(\DSP_COM/output_bus_data_7_N_197_7 ), 
    .M0(BUS_A_c_4), .CE(\DSP_COM/clk_in_c_enable_87 ), .CLK(clk_in_c), 
    .OFX0(\DSP_COM/output_bus_data_7_N_197_7 ), .Q0(output_bus_data_7));
  SLICE_171 SLICE_171( .D1(\DSP_COM/cnt_5 ), .C1(\DSP_COM/cnt_22 ), 
    .B1(\DSP_COM/cnt_24 ), .A1(\DSP_COM/cnt_16 ), .DI0(\n7385\000/BUF1 ), 
    .CE(\SMART_ABS/RS485_COM_M/r_begin_N_833 ), .LSR(rx_485_begin), 
    .CLK(clk_in_c), .F0(\n7385\000/BUF1 ), .Q0(r_begin), .F1(\DSP_COM/n6583 ));
  SLICE_172 SLICE_172( .D1(\ENCODER_CHECK/input_abz_r ), 
    .C1(\ENCODER_CHECK/input_abz_r1 ), .B1(\ENCODER_CHECK/input_uvw_r ), 
    .A1(\ENCODER_CHECK/input_uvw_r1 ), .DI0(n7385), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_124 ), .LSR(tr_dir_N_829), 
    .CLK(clk_in_c), .F0(n7385), .Q0(rx_485_begin), .F1(encoder_error_data_0));
  SMART_ABS_RS485_COM_M_SLICE_173 \SMART_ABS/RS485_COM_M/SLICE_173 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_17 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_16 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n383 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n384_adj_1021 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n384_adj_1021 ), .Q0(rx_data_0), 
    .F1(\SMART_ABS/RS485_COM_M/n383 ), .Q1(rx_data_1));
  SMART_ABS_RS485_COM_M_SLICE_174 \SMART_ABS/RS485_COM_M/SLICE_174 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_19 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_18 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n381 ), .DI0(\SMART_ABS/RS485_COM_M/n382 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n382 ), .Q0(rx_data_2), 
    .F1(\SMART_ABS/RS485_COM_M/n381 ), .Q1(rx_data_3));
  SMART_ABS_RS485_COM_M_SLICE_175 \SMART_ABS/RS485_COM_M/SLICE_175 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_21 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_20 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n379 ), .DI0(\SMART_ABS/RS485_COM_M/n380 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n380 ), .Q0(rx_data_4), 
    .F1(\SMART_ABS/RS485_COM_M/n379 ), .Q1(rx_data_5));
  SMART_ABS_RS485_COM_M_SLICE_176 \SMART_ABS/RS485_COM_M/SLICE_176 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_23 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_22 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n377 ), .DI0(\SMART_ABS/RS485_COM_M/n378 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n378 ), .Q0(rx_data_6), 
    .F1(\SMART_ABS/RS485_COM_M/n377 ), .Q1(rx_data_7));
  SMART_ABS_RS485_COM_M_SLICE_177 \SMART_ABS/RS485_COM_M/SLICE_177 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_25 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_24 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n375 ), .DI0(\SMART_ABS/RS485_COM_M/n376 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n376 ), .Q0(rx_data_8), 
    .F1(\SMART_ABS/RS485_COM_M/n375 ), .Q1(rx_data_9));
  SMART_ABS_RS485_COM_M_SLICE_178 \SMART_ABS/RS485_COM_M/SLICE_178 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_27 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_26 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n373 ), .DI0(\SMART_ABS/RS485_COM_M/n374 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n374 ), .Q0(rx_data_10), 
    .F1(\SMART_ABS/RS485_COM_M/n373 ), .Q1(rx_data_11));
  SMART_ABS_RS485_COM_M_SLICE_179 \SMART_ABS/RS485_COM_M/SLICE_179 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_29 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_28 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n371 ), .DI0(\SMART_ABS/RS485_COM_M/n372 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n372 ), .Q0(rx_data_12), 
    .F1(\SMART_ABS/RS485_COM_M/n371 ), .Q1(rx_data_13));
  SMART_ABS_RS485_COM_M_SLICE_180 \SMART_ABS/RS485_COM_M/SLICE_180 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_31 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_30 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n369 ), .DI0(\SMART_ABS/RS485_COM_M/n370 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n370 ), .Q0(rx_data_14), 
    .F1(\SMART_ABS/RS485_COM_M/n369 ), .Q1(rx_data_15));
  SMART_ABS_RS485_COM_M_SLICE_181 \SMART_ABS/RS485_COM_M/SLICE_181 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_33 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_32 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n367 ), .DI0(\SMART_ABS/RS485_COM_M/n368 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n368 ), .Q0(rx_data_16), 
    .F1(\SMART_ABS/RS485_COM_M/n367 ), .Q1(rx_data_17));
  SMART_ABS_RS485_COM_M_SLICE_182 \SMART_ABS/RS485_COM_M/SLICE_182 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_35 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_34 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n365 ), .DI0(\SMART_ABS/RS485_COM_M/n366 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n366 ), .Q0(rx_data_18), 
    .F1(\SMART_ABS/RS485_COM_M/n365 ), .Q1(rx_data_19));
  SMART_ABS_RS485_COM_M_SLICE_183 \SMART_ABS/RS485_COM_M/SLICE_183 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_37 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_36 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n363 ), .DI0(\SMART_ABS/RS485_COM_M/n364 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n364 ), .Q0(rx_data_20), 
    .F1(\SMART_ABS/RS485_COM_M/n363 ), .Q1(rx_data_21));
  SMART_ABS_RS485_COM_M_SLICE_184 \SMART_ABS/RS485_COM_M/SLICE_184 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_39 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_38 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n361 ), .DI0(\SMART_ABS/RS485_COM_M/n362 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n362 ), .Q0(rx_data_22), 
    .F1(\SMART_ABS/RS485_COM_M/n361 ), .Q1(rx_data_23));
  SMART_ABS_RS485_COM_M_SLICE_185 \SMART_ABS/RS485_COM_M/SLICE_185 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_49 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_48 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n351 ), .DI0(\SMART_ABS/RS485_COM_M/n352 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n352 ), .Q0(rx_data_32), 
    .F1(\SMART_ABS/RS485_COM_M/n351 ), .Q1(rx_data_33));
  SMART_ABS_RS485_COM_M_SLICE_186 \SMART_ABS/RS485_COM_M/SLICE_186 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_51 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_50 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n349 ), .DI0(\SMART_ABS/RS485_COM_M/n350 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n350 ), .Q0(rx_data_34), 
    .F1(\SMART_ABS/RS485_COM_M/n349 ), .Q1(rx_data_35));
  SMART_ABS_RS485_COM_M_SLICE_187 \SMART_ABS/RS485_COM_M/SLICE_187 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_53 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_52 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n347 ), .DI0(\SMART_ABS/RS485_COM_M/n348 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n348 ), .Q0(rx_data_36), 
    .F1(\SMART_ABS/RS485_COM_M/n347 ), .Q1(rx_data_37));
  SMART_ABS_RS485_COM_M_SLICE_188 \SMART_ABS/RS485_COM_M/SLICE_188 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_55 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_54 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n345 ), .DI0(\SMART_ABS/RS485_COM_M/n346 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n346 ), .Q0(rx_data_38), 
    .F1(\SMART_ABS/RS485_COM_M/n345 ), .Q1(rx_data_39));
  SMART_ABS_RS485_COM_M_SLICE_189 \SMART_ABS/RS485_COM_M/SLICE_189 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_57 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_56 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n343 ), .DI0(\SMART_ABS/RS485_COM_M/n344 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n344 ), .Q0(rx_data_40), 
    .F1(\SMART_ABS/RS485_COM_M/n343 ), .Q1(rx_data_41));
  SMART_ABS_RS485_COM_M_SLICE_190 \SMART_ABS/RS485_COM_M/SLICE_190 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_59 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_58 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n341 ), .DI0(\SMART_ABS/RS485_COM_M/n342 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n342 ), .Q0(rx_data_42), 
    .F1(\SMART_ABS/RS485_COM_M/n341 ), .Q1(rx_data_43));
  SMART_ABS_RS485_COM_M_SLICE_191 \SMART_ABS/RS485_COM_M/SLICE_191 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_61 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_60 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n339 ), .DI0(\SMART_ABS/RS485_COM_M/n340 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n340 ), .Q0(rx_data_44), 
    .F1(\SMART_ABS/RS485_COM_M/n339 ), .Q1(rx_data_45));
  SMART_ABS_RS485_COM_M_SLICE_192 \SMART_ABS/RS485_COM_M/SLICE_192 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_63 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_62 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n337 ), .DI0(\SMART_ABS/RS485_COM_M/n338 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n338 ), .Q0(rx_data_46), 
    .F1(\SMART_ABS/RS485_COM_M/n337 ), .Q1(rx_data_47));
  SMART_ABS_RS485_COM_M_SLICE_193 \SMART_ABS/RS485_COM_M/SLICE_193 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_65 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_64 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n335 ), .DI0(\SMART_ABS/RS485_COM_M/n336 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n336 ), .Q0(rx_data_48), 
    .F1(\SMART_ABS/RS485_COM_M/n335 ), .Q1(rx_data_49));
  SMART_ABS_RS485_COM_M_SLICE_194 \SMART_ABS/RS485_COM_M/SLICE_194 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_67 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_66 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n333 ), .DI0(\SMART_ABS/RS485_COM_M/n334 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n334 ), .Q0(rx_data_50), 
    .F1(\SMART_ABS/RS485_COM_M/n333 ), .Q1(rx_data_51));
  SMART_ABS_RS485_COM_M_SLICE_195 \SMART_ABS/RS485_COM_M/SLICE_195 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_69 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_68 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n331 ), .DI0(\SMART_ABS/RS485_COM_M/n332 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n332 ), .Q0(rx_data_52), 
    .F1(\SMART_ABS/RS485_COM_M/n331 ), .Q1(rx_data_53));
  SMART_ABS_RS485_COM_M_SLICE_196 \SMART_ABS/RS485_COM_M/SLICE_196 ( 
    .B1(\SMART_ABS/RS485_COM_M/n319 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_71 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_70 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n329 ), .DI0(\SMART_ABS/RS485_COM_M/n330 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n330 ), .Q0(rx_data_54), 
    .F1(\SMART_ABS/RS485_COM_M/n329 ), .Q1(rx_data_55));
  SMART_ABS_RS485_COM_M_SLICE_197 \SMART_ABS/RS485_COM_M/SLICE_197 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_16 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_72 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_56 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_80 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_72 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n328 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n328 ), .Q0(rx_data_56), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1019 ));
  SMART_ABS_RS485_COM_M_SLICE_198 \SMART_ABS/RS485_COM_M/SLICE_198 ( 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_74 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7391 ), .A1(\SMART_ABS/RS485_COM_M/n319 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_73 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7391 ), .A0(\SMART_ABS/RS485_COM_M/n319 ), 
    .DI1(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_58 ), 
    .DI0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_57 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_205 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_57 ), .Q0(rx_data_57), 
    .F1(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_58 ), .Q1(rx_data_58));
  SMART_ABS_RS485_COM_M_SLICE_199 \SMART_ABS/RS485_COM_M/SLICE_199 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_19 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_75 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_59 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_83 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_75 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7391 ), .A0(\SMART_ABS/RS485_COM_M/n319 ), 
    .DI0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_59 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_205 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_59 ), .Q0(rx_data_59), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1009 ));
  SMART_ABS_RS485_COM_M_SLICE_200 \SMART_ABS/RS485_COM_M/SLICE_200 ( 
    .D1(\SMART_ABS/RS485_COM_M/rx_data_reg_20 ), 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_76 ), 
    .B1(\SMART_ABS/RS485_COM_M/rx_data_reg_60 ), 
    .A1(\SMART_ABS/RS485_COM_M/rx_data_reg_84 ), 
    .B0(\SMART_ABS/RS485_COM_M/n319 ), 
    .A0(\SMART_ABS/RS485_COM_M/rx_data_reg_76 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n324 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .LSR(\SMART_ABS/RS485_COM_M/com_error_7 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n324 ), .Q0(rx_data_60), 
    .F1(\SMART_ABS/RS485_COM_M/u_crc/n17_adj_1011 ));
  SMART_ABS_RS485_COM_M_SLICE_201 \SMART_ABS/RS485_COM_M/SLICE_201 ( 
    .C1(\SMART_ABS/RS485_COM_M/rx_data_reg_78 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7391 ), .A1(\SMART_ABS/RS485_COM_M/n319 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_77 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7391 ), .A0(\SMART_ABS/RS485_COM_M/n319 ), 
    .DI1(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_62 ), 
    .DI0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_61 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_205 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_61 ), .Q0(rx_data_61), 
    .F1(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_62 ), .Q1(rx_data_62));
  SMART_ABS_RS485_COM_M_SLICE_202 \SMART_ABS/RS485_COM_M/SLICE_202 ( 
    .B1(\SMART_ABS/RS485_COM_M/n7391 ), .A1(\SMART_ABS/RS485_COM_M/n7390 ), 
    .C0(\SMART_ABS/RS485_COM_M/rx_data_reg_79 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7391 ), .A0(\SMART_ABS/RS485_COM_M/n319 ), 
    .DI0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_63 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_205 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/rx_data_63_N_382_63 ), .Q0(rx_data_63), 
    .F1(\SMART_ABS/RS485_COM_M/clk_in_c_enable_205 ));
  DSP_COM_SLICE_203 \DSP_COM/SLICE_203 ( .D1(\DSP_COM/n13_adj_1066 ), 
    .C1(\DSP_COM/n2902 ), .B1(smg0_data_1), .A1(BUS_D_out_1), 
    .D0(\DSP_COM/n13_adj_1066 ), .C0(\DSP_COM/n2902 ), .B0(smg0_data_0), 
    .A0(BUS_D_out_0), .DI1(\DSP_COM/smg0_data_7_N_141_1 ), 
    .DI0(\DSP_COM/smg0_data_7_N_141_0 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg0_data_7_N_141_0 ), .Q0(smg0_data_0), 
    .F1(\DSP_COM/smg0_data_7_N_141_1 ), .Q1(smg0_data_1));
  DSP_COM_SLICE_204 \DSP_COM/SLICE_204 ( .D1(\DSP_COM/n13_adj_1066 ), 
    .C1(\DSP_COM/n2902 ), .B1(smg0_data_3), .A1(BUS_D_out_3), 
    .D0(\DSP_COM/n13_adj_1066 ), .C0(\DSP_COM/n2902 ), .B0(smg0_data_2), 
    .A0(BUS_D_out_2), .DI1(\DSP_COM/smg0_data_7_N_141_3 ), 
    .DI0(\DSP_COM/smg0_data_7_N_141_2 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg0_data_7_N_141_2 ), .Q0(smg0_data_2), 
    .F1(\DSP_COM/smg0_data_7_N_141_3 ), .Q1(smg0_data_3));
  DSP_COM_SLICE_205 \DSP_COM/SLICE_205 ( .D1(\DSP_COM/n13_adj_1066 ), 
    .C1(\DSP_COM/n2902 ), .B1(smg0_data_5), .A1(BUS_D_out_5), 
    .D0(\DSP_COM/n13_adj_1066 ), .C0(\DSP_COM/n2902 ), .B0(smg0_data_4), 
    .A0(BUS_D_out_4), .DI1(\DSP_COM/smg0_data_7_N_141_5 ), 
    .DI0(\DSP_COM/smg0_data_7_N_141_4 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg0_data_7_N_141_4 ), .Q0(smg0_data_4), 
    .F1(\DSP_COM/smg0_data_7_N_141_5 ), .Q1(smg0_data_5));
  DSP_COM_SLICE_206 \DSP_COM/SLICE_206 ( .D1(\DSP_COM/n13_adj_1066 ), 
    .C1(\DSP_COM/n2902 ), .B1(smg0_data_7), .A1(BUS_D_out_7), 
    .D0(\DSP_COM/n13_adj_1066 ), .C0(\DSP_COM/n2902 ), .B0(smg0_data_6), 
    .A0(BUS_D_out_6), .DI1(\DSP_COM/smg0_data_7_N_141_7 ), 
    .DI0(\DSP_COM/smg0_data_7_N_141_6 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg0_data_7_N_141_6 ), .Q0(smg0_data_6), 
    .F1(\DSP_COM/smg0_data_7_N_141_7 ), .Q1(smg0_data_7));
  DSP_COM_SLICE_207 \DSP_COM/SLICE_207 ( .D1(\DSP_COM/n13_adj_1053 ), 
    .C1(\DSP_COM/n10 ), .B1(smg1_data_1), .A1(\DSP_COM/n9_adj_1067 ), 
    .D0(\DSP_COM/n13_adj_1053 ), .C0(\DSP_COM/n10 ), .B0(smg1_data_0), 
    .A0(n9_adj_1086), .DI1(\DSP_COM/smg1_data_7_N_149_1 ), 
    .DI0(\DSP_COM/smg1_data_7_N_149_0 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg1_data_7_N_149_0 ), .Q0(smg1_data_0), 
    .F1(\DSP_COM/smg1_data_7_N_149_1 ), .Q1(smg1_data_1));
  DSP_COM_SLICE_208 \DSP_COM/SLICE_208 ( .D1(\DSP_COM/n13_adj_1053 ), 
    .C1(\DSP_COM/n10 ), .B1(smg1_data_3), .A1(n9), .D0(\DSP_COM/n13_adj_1053 ), 
    .C0(\DSP_COM/n10 ), .B0(smg1_data_2), .A0(\DSP_COM/n9_adj_1073 ), 
    .DI1(\DSP_COM/smg1_data_7_N_149_3 ), .DI0(\DSP_COM/smg1_data_7_N_149_2 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/smg1_data_7_N_149_2 ), .Q0(smg1_data_2), 
    .F1(\DSP_COM/smg1_data_7_N_149_3 ), .Q1(smg1_data_3));
  DSP_COM_SLICE_209 \DSP_COM/SLICE_209 ( .B1(BUS_D_out_4), .A1(BUS_A_c_0), 
    .D0(\DSP_COM/n13_adj_1053 ), .C0(\DSP_COM/n10 ), .B0(smg1_data_4), 
    .A0(\DSP_COM/n9 ), .DI0(\DSP_COM/smg1_data_7_N_149_4 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/smg1_data_7_N_149_4 ), .Q0(smg1_data_4), .F1(\DSP_COM/n9 ));
  DSP_COM_SLICE_210 \DSP_COM/SLICE_210 ( .D1(\DSP_COM/n13_adj_1053 ), 
    .C1(\DSP_COM/n10 ), .B1(smg1_data_6), .A1(\DSP_COM/n9_adj_1079 ), 
    .D0(\DSP_COM/n13_adj_1053 ), .C0(\DSP_COM/n10 ), .B0(smg1_data_5), 
    .A0(n9_adj_1085), .DI1(\DSP_COM/smg1_data_7_N_149_6 ), 
    .DI0(\DSP_COM/smg1_data_7_N_149_5 ), .CE(\DSP_COM/out_IO_signal_7__N_132 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg1_data_7_N_149_5 ), .Q0(smg1_data_5), 
    .F1(\DSP_COM/smg1_data_7_N_149_6 ), .Q1(smg1_data_6));
  DSP_COM_SLICE_211 \DSP_COM/SLICE_211 ( .D1(n6483), .C1(BUS_A_c_0), 
    .B1(BUS_A_c_3), .A1(BUS_A_c_4), .D0(\DSP_COM/n13_adj_1053 ), 
    .C0(\DSP_COM/n10 ), .B0(smg1_data_7), .A0(\DSP_COM/n9_adj_1078 ), 
    .DI0(\DSP_COM/smg1_data_7_N_149_7 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg1_data_7_N_149_7 ), .Q0(smg1_data_7), 
    .F1(\DSP_COM/n13_adj_1053 ));
  DSP_COM_SLICE_212 \DSP_COM/SLICE_212 ( .D1(\DSP_COM/n13_adj_1069 ), 
    .C1(\DSP_COM/n10_adj_1070 ), .B1(smg2_data_1), .A1(\DSP_COM/n9_adj_1067 ), 
    .D0(\DSP_COM/n13_adj_1069 ), .C0(\DSP_COM/n10_adj_1070 ), .B0(smg2_data_0), 
    .A0(n9_adj_1086), .DI1(\DSP_COM/smg2_data_7_N_157_1 ), 
    .DI0(\DSP_COM/smg2_data_7_N_157_0 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg2_data_7_N_157_0 ), .Q0(smg2_data_0), 
    .F1(\DSP_COM/smg2_data_7_N_157_1 ), .Q1(smg2_data_1));
  DSP_COM_SLICE_213 \DSP_COM/SLICE_213 ( .D1(\DSP_COM/n13_adj_1069 ), 
    .C1(\DSP_COM/n10_adj_1070 ), .B1(smg2_data_3), .A1(n9), 
    .D0(\DSP_COM/n13_adj_1069 ), .C0(\DSP_COM/n10_adj_1070 ), .B0(smg2_data_2), 
    .A0(\DSP_COM/n9_adj_1073 ), .DI1(\DSP_COM/smg2_data_7_N_157_3 ), 
    .DI0(\DSP_COM/smg2_data_7_N_157_2 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg2_data_7_N_157_2 ), .Q0(smg2_data_2), 
    .F1(\DSP_COM/smg2_data_7_N_157_3 ), .Q1(smg2_data_3));
  DSP_COM_SLICE_214 \DSP_COM/SLICE_214 ( .D1(\DSP_COM/n13_adj_1069 ), 
    .C1(\DSP_COM/n10_adj_1070 ), .B1(smg2_data_5), .A1(n9_adj_1085), 
    .D0(\DSP_COM/n13_adj_1069 ), .C0(\DSP_COM/n10_adj_1070 ), .B0(smg2_data_4), 
    .A0(\DSP_COM/n9 ), .DI1(\DSP_COM/smg2_data_7_N_157_5 ), 
    .DI0(\DSP_COM/smg2_data_7_N_157_4 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg2_data_7_N_157_4 ), .Q0(smg2_data_4), 
    .F1(\DSP_COM/smg2_data_7_N_157_5 ), .Q1(smg2_data_5));
  DSP_COM_SLICE_215 \DSP_COM/SLICE_215 ( .D1(\DSP_COM/n13_adj_1069 ), 
    .C1(\DSP_COM/n10_adj_1070 ), .B1(smg2_data_7), .A1(\DSP_COM/n9_adj_1078 ), 
    .D0(\DSP_COM/n13_adj_1069 ), .C0(\DSP_COM/n10_adj_1070 ), .B0(smg2_data_6), 
    .A0(\DSP_COM/n9_adj_1079 ), .DI1(\DSP_COM/smg2_data_7_N_157_7 ), 
    .DI0(\DSP_COM/smg2_data_7_N_157_6 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg2_data_7_N_157_6 ), .Q0(smg2_data_6), 
    .F1(\DSP_COM/smg2_data_7_N_157_7 ), .Q1(smg2_data_7));
  DSP_COM_SLICE_216 \DSP_COM/SLICE_216 ( .D1(n13_adj_1083), .C1(n10), 
    .B1(smg3_data_1), .A1(\DSP_COM/n9_adj_1067 ), .D0(n13_adj_1083), .C0(n10), 
    .B0(smg3_data_0), .A0(n9_adj_1086), .DI1(\DSP_COM/smg3_data_7_N_165_1 ), 
    .DI0(\DSP_COM/smg3_data_7_N_165_0 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg3_data_7_N_165_0 ), .Q0(smg3_data_0), 
    .F1(\DSP_COM/smg3_data_7_N_165_1 ), .Q1(smg3_data_1));
  SLICE_217 SLICE_217( .D1(n13_adj_1083), .C1(n10), .B1(smg3_data_3), .A1(n9), 
    .D0(n13_adj_1083), .C0(n10), .B0(smg3_data_2), .A0(\DSP_COM/n9_adj_1073 ), 
    .DI1(smg3_data_7_N_165_3), .DI0(\DSP_COM/smg3_data_7_N_165_2 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/smg3_data_7_N_165_2 ), .Q0(smg3_data_2), 
    .F1(smg3_data_7_N_165_3), .Q1(smg3_data_3));
  DSP_COM_SLICE_218 \DSP_COM/SLICE_218 ( .D1(n13_adj_1083), .C1(n10), 
    .B1(smg3_data_5), .A1(n9_adj_1085), .D0(n13_adj_1083), .C0(\DSP_COM/n9 ), 
    .B0(smg3_data_4), .A0(n10), .DI1(\DSP_COM/smg3_data_7_N_165_5 ), 
    .DI0(\DSP_COM/smg3_data_7_N_165_4 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg3_data_7_N_165_4 ), .Q0(smg3_data_4), 
    .F1(\DSP_COM/smg3_data_7_N_165_5 ), .Q1(smg3_data_5));
  DSP_COM_SLICE_219 \DSP_COM/SLICE_219 ( .D1(n13_adj_1083), .C1(n10), 
    .B1(smg3_data_7), .A1(\DSP_COM/n9_adj_1078 ), .D0(n13_adj_1083), .C0(n10), 
    .B0(smg3_data_6), .A0(\DSP_COM/n9_adj_1079 ), 
    .DI1(\DSP_COM/smg3_data_7_N_165_7 ), .DI0(\DSP_COM/smg3_data_7_N_165_6 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/smg3_data_7_N_165_6 ), .Q0(smg3_data_6), 
    .F1(\DSP_COM/smg3_data_7_N_165_7 ), .Q1(smg3_data_7));
  SLICE_220 SLICE_220( .D1(n13), .C1(\DSP_COM/n9_adj_1067 ), .B1(smg4_data_1), 
    .A1(n3735), .D0(n13), .C0(n3735), .B0(smg4_data_0), .A0(n9_adj_1086), 
    .DI1(\DSP_COM/smg4_data_7_N_173_1 ), .DI0(smg4_data_7_N_173_0), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(smg4_data_7_N_173_0), .Q0(smg4_data_0), 
    .F1(\DSP_COM/smg4_data_7_N_173_1 ), .Q1(smg4_data_1));
  DSP_COM_SLICE_221 \DSP_COM/SLICE_221 ( .D1(n13), .C1(n9), .B1(smg4_data_3), 
    .A1(n3735), .D0(n13), .C0(\DSP_COM/n9_adj_1073 ), .B0(smg4_data_2), 
    .A0(n3735), .DI1(\DSP_COM/smg4_data_7_N_173_3 ), 
    .DI0(\DSP_COM/smg4_data_7_N_173_2 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg4_data_7_N_173_2 ), .Q0(smg4_data_2), 
    .F1(\DSP_COM/smg4_data_7_N_173_3 ), .Q1(smg4_data_3));
  SLICE_222 SLICE_222( .D1(n13), .C1(n3735), .B1(smg4_data_5), 
    .A1(n9_adj_1085), .D0(n13), .C0(\DSP_COM/n9 ), .B0(smg4_data_4), 
    .A0(n3735), .DI1(smg4_data_7_N_173_5), .DI0(\DSP_COM/smg4_data_7_N_173_4 ), 
    .CE(\DSP_COM/clk_in_c_enable_125 ), .CLK(clk_in_c), 
    .F0(\DSP_COM/smg4_data_7_N_173_4 ), .Q0(smg4_data_4), 
    .F1(smg4_data_7_N_173_5), .Q1(smg4_data_5));
  DSP_COM_SLICE_223 \DSP_COM/SLICE_223 ( .D1(n13), .C1(\DSP_COM/n9_adj_1078 ), 
    .B1(smg4_data_7), .A1(n3735), .D0(n13), .C0(\DSP_COM/n9_adj_1079 ), 
    .B0(smg4_data_6), .A0(n3735), .DI1(\DSP_COM/smg4_data_7_N_173_7 ), 
    .DI0(\DSP_COM/smg4_data_7_N_173_6 ), .CE(\DSP_COM/clk_in_c_enable_125 ), 
    .CLK(clk_in_c), .F0(\DSP_COM/smg4_data_7_N_173_6 ), .Q0(smg4_data_6), 
    .F1(\DSP_COM/smg4_data_7_N_173_7 ), .Q1(smg4_data_7));
  SMART_ABS_RS485_COM_M_SLICE_224 \SMART_ABS/RS485_COM_M/SLICE_224 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6_adj_1026 ), 
    .C1(\SMART_ABS/RS485_COM_M/n7077 ), .B1(\SMART_ABS/RS485_COM_M/n6509 ), 
    .A1(\SMART_ABS/RS485_COM_M/n310 ), 
    .D0(\SMART_ABS/RS485_COM_M/n7_adj_1032 ), 
    .C0(\SMART_ABS/RS485_COM_M/n6_adj_1045 ), 
    .B0(\SMART_ABS/RS485_COM_M/n5892 ), .A0(\SMART_ABS/RS485_COM_M/n7074 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n5892 ), .DI0(\SMART_ABS/RS485_COM_M/n384 ), 
    .CE(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1174 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n384 ), .Q0(time_interval_0), 
    .F1(\SMART_ABS/RS485_COM_M/n5892 ), .Q1(time_interval_1));
  SMART_ABS_RS485_COM_M_SLICE_225 \SMART_ABS/RS485_COM_M/SLICE_225 ( 
    .C1(\SMART_ABS/RS485_COM_M/n6500 ), .B1(\SMART_ABS/RS485_COM_M/n5868 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7083 ), .D0(\SMART_ABS/RS485_COM_M/n6509 ), 
    .C0(\SMART_ABS/RS485_COM_M/n6500 ), .B0(\SMART_ABS/RS485_COM_M/n5837 ), 
    .A0(\SMART_ABS/RS485_COM_M/n7378 ), .DI1(\SMART_ABS/RS485_COM_M/n7076 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n7074 ), 
    .CE(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1174 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n7074 ), .Q0(time_interval_2), 
    .F1(\SMART_ABS/RS485_COM_M/n7076 ), .Q1(time_interval_3));
  SMART_ABS_RS485_COM_M_SLICE_226 \SMART_ABS/RS485_COM_M/SLICE_226 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6787 ), .C1(\SMART_ABS/RS485_COM_M/n6512 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5856 ), .A1(\SMART_ABS/RS485_COM_M/n7090 ), 
    .D0(\SMART_ABS/RS485_COM_M/n7 ), .C0(\SMART_ABS/RS485_COM_M/n8_adj_1022 ), 
    .B0(\SMART_ABS/RS485_COM_M/n2824 ), .A0(\SMART_ABS/RS485_COM_M/n7083 ), 
    .DI1(\SMART_ABS/RS485_COM_M/n7083 ), .DI0(\SMART_ABS/RS485_COM_M/n5868 ), 
    .CE(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1174 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n5868 ), .Q0(time_interval_4), 
    .F1(\SMART_ABS/RS485_COM_M/n7083 ), .Q1(time_interval_5));
  SMART_ABS_RS485_COM_M_SLICE_227 \SMART_ABS/RS485_COM_M/SLICE_227 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6506 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7382 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .C0(\SMART_ABS/RS485_COM_M/n6506 ), .B0(\SMART_ABS/RS485_COM_M/n253 ), 
    .A0(\SMART_ABS/RS485_COM_M/n6512 ), .DI1(\SMART_ABS/RS485_COM_M/n7085 ), 
    .DI0(\SMART_ABS/RS485_COM_M/n2824 ), 
    .CE(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), 
    .LSR(\SMART_ABS/RS485_COM_M/n1174 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n2824 ), .Q0(time_interval_6), 
    .F1(\SMART_ABS/RS485_COM_M/n7085 ), .Q1(time_interval_7));
  DSP_COM_i6255_SLICE_228 \DSP_COM/i6255/SLICE_228 ( .A1(BUS_A_c_0), 
    .D0(input_u_r), .C0(BUS_A_c_0), .B0(input_u_r1), .A0(encoder_error_data_0), 
    .M1(BUS_A_c_2), .M0(BUS_A_c_1), .FXB(\DSP_COM/n6863 ), 
    .FXA(\DSP_COM/n6866 ), .OFX0(\DSP_COM/n6863 ), .OFX1(\DSP_COM/n6867 ));
  DSP_COM_i27_SLICE_229 \DSP_COM/i27/SLICE_229 ( .D1(out_pulse_data_3), 
    .C1(DI4_c), .B1(BUS_A_c_2), .A1(BUS_A_c_1), .C0(key_data_3), 
    .B0(BUS_A_c_2), .A0(BUS_A_c_1), .M0(BUS_A_c_0), .OFX0(\DSP_COM/n6357 ));
  DSP_COM_mux_130_Mux_7_i29_SLICE_230 \DSP_COM/mux_130_Mux_7_i29/SLICE_230 ( 
    .D1(rx_data_39), .C1(rx_data_63), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_55), .A0(rx_data_47), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29_adj_1047 ));
  DSP_COM_mux_130_Mux_6_i29_SLICE_231 \DSP_COM/mux_130_Mux_6_i29/SLICE_231 ( 
    .D1(rx_data_38), .C1(rx_data_62), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_54), .A0(rx_data_46), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29 ));
  DSP_COM_mux_130_Mux_5_i29_SLICE_232 \DSP_COM/mux_130_Mux_5_i29/SLICE_232 ( 
    .D1(rx_data_37), .C1(rx_data_61), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_53), .A0(rx_data_45), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29_adj_1052 ));
  DSP_COM_mux_130_Mux_0_i29_SLICE_233 \DSP_COM/mux_130_Mux_0_i29/SLICE_233 ( 
    .D1(rx_data_32), .C1(rx_data_56), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_48), .A0(rx_data_40), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29_adj_1056 ));
  DSP_COM_mux_130_Mux_4_i29_SLICE_234 \DSP_COM/mux_130_Mux_4_i29/SLICE_234 ( 
    .D1(rx_data_60), .C1(rx_data_36), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_52), .A0(rx_data_44), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29_adj_1059 ));
  DSP_COM_mux_130_Mux_3_i29_SLICE_235 \DSP_COM/mux_130_Mux_3_i29/SLICE_235 ( 
    .D1(rx_data_35), .C1(rx_data_59), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_51), .A0(rx_data_43), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29_adj_1062 ));
  DSP_COM_mux_130_Mux_2_i29_SLICE_236 \DSP_COM/mux_130_Mux_2_i29/SLICE_236 ( 
    .D1(rx_data_34), .C1(rx_data_58), .B1(BUS_A_c_2), .A1(BUS_A_c_0), 
    .C0(BUS_A_c_0), .B0(rx_data_50), .A0(rx_data_42), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n29_adj_1065 ));
  DSP_COM_i6381_SLICE_237 \DSP_COM/i6381/SLICE_237 ( .D1(BUS_A_c_1), 
    .C1(BUS_A_c_0), .B1(\DSP_COM/n6660 ), .A1(BUS_A_c_2), .C0(BUS_A_c_2), 
    .B0(\DSP_COM/n6871 ), .A0(\DSP_COM/n6868 ), .M0(BUS_A_c_3), 
    .OFX0(\DSP_COM/n7065 ));
  DSP_COM_i6385_SLICE_238 \DSP_COM/i6385/SLICE_238 ( .D1(rx_data_56), 
    .C1(rx_data_8), .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(BUS_A_c_1), 
    .C0(BUS_A_c_2), .B0(rx_data_0), .A0(rx_data_16), .M0(BUS_A_c_0), 
    .OFX0(\DSP_COM/n7155 ));
  DSP_COM_i6383_SLICE_239 \DSP_COM/i6383/SLICE_239 ( .D1(rx_data_22), 
    .C1(rx_data_62), .B1(BUS_A_c_0), .A1(BUS_A_c_2), .D0(BUS_A_c_0), 
    .C0(rx_data_14), .B0(BUS_A_c_2), .A0(rx_data_6), .M0(BUS_A_c_1), 
    .OFX0(\DSP_COM/n7152 ));
  DSP_COM_i6074_SLICE_240 \DSP_COM/i6074/SLICE_240 ( .C1(rx_data_57), 
    .B1(rx_data_17), .A1(BUS_A_c_0), .C0(BUS_A_c_0), .B0(rx_data_9), 
    .A0(rx_data_1), .M0(BUS_A_c_1), .OFX0(\DSP_COM/n6660 ));
  DSP_COM_i6080_SLICE_241 \DSP_COM/i6080/SLICE_241 ( .C1(rx_data_59), 
    .B1(rx_data_19), .A1(BUS_A_c_0), .C0(BUS_A_c_0), .B0(rx_data_11), 
    .A0(rx_data_3), .M0(BUS_A_c_1), .OFX0(\DSP_COM/n6666 ));
  DSP_COM_i6379_SLICE_242 \DSP_COM/i6379/SLICE_242 ( .D1(rx_data_33), 
    .C1(rx_data_57), .B1(BUS_A_c_2), .A1(BUS_A_c_0), .C0(rx_data_49), 
    .B0(BUS_A_c_0), .A0(rx_data_41), .M0(\DSP_COM/n7129 ), 
    .OFX0(\DSP_COM/n7061 ));
  DSP_COM_i6389_SLICE_243 \DSP_COM/i6389/SLICE_243 ( .D1(rx_data_21), 
    .C1(rx_data_61), .B1(BUS_A_c_0), .A1(BUS_A_c_2), .D0(BUS_A_c_0), 
    .C0(rx_data_13), .B0(BUS_A_c_2), .A0(rx_data_5), .M0(BUS_A_c_1), 
    .OFX0(\DSP_COM/n7161 ));
  DSP_COM_i6387_SLICE_244 \DSP_COM/i6387/SLICE_244 ( .D1(rx_data_20), 
    .C1(rx_data_60), .B1(BUS_A_c_0), .A1(BUS_A_c_2), .D0(BUS_A_c_0), 
    .C0(rx_data_12), .B0(BUS_A_c_2), .A0(rx_data_4), .M0(BUS_A_c_1), 
    .OFX0(\DSP_COM/n7158 ));
  DSP_COM_mux_130_Mux_2_i3_SLICE_245 \DSP_COM/mux_130_Mux_2_i3/SLICE_245 ( 
    .C1(DI3_c), .B1(key_data_2), .A1(BUS_A_c_0), .B0(BUS_A_c_0), 
    .A0(out_pulse_data_2), .M0(BUS_A_c_1), .OFX0(\DSP_COM/n3 ));
  DSP_COM_i6262_SLICE_246 \DSP_COM/i6262/SLICE_246 ( .C1(DI2_c), 
    .B1(key_data_1), .A1(BUS_A_c_0), .B0(BUS_A_c_0), .A0(out_pulse_data_1), 
    .M0(BUS_A_c_1), .OFX0(\DSP_COM/n6871 ));
  DSP_COM_i6395_SLICE_247 \DSP_COM/i6395/SLICE_247 ( .D1(rx_data_23), 
    .C1(rx_data_63), .B1(BUS_A_c_0), .A1(BUS_A_c_2), .D0(BUS_A_c_0), 
    .C0(rx_data_15), .B0(BUS_A_c_2), .A0(rx_data_7), .M0(BUS_A_c_1), 
    .OFX0(\DSP_COM/n7171 ));
  DSP_COM_i6393_SLICE_248 \DSP_COM/i6393/SLICE_248 ( .D1(rx_data_18), 
    .C1(rx_data_58), .B1(BUS_A_c_0), .A1(BUS_A_c_2), .D0(BUS_A_c_0), 
    .C0(rx_data_10), .B0(BUS_A_c_2), .A0(rx_data_2), .M0(BUS_A_c_1), 
    .OFX0(\DSP_COM/n7168 ));
  DSP_COM_i6257_SLICE_249 \DSP_COM/i6257/SLICE_249 ( .C1(key_data_0), 
    .B1(DI1_c), .A1(BUS_A_c_0), .B0(BUS_A_c_0), .A0(out_pulse_data_0), 
    .M0(BUS_A_c_1), .OFX0(\DSP_COM/n6866 ));
  SMART_ABS_RS485_COM_M_i3036_SLICE_250 
    \SMART_ABS/RS485_COM_M/i3036/SLICE_250 ( .D1(tr_dir_N_829), 
    .C1(\SMART_ABS/RS485_COM_M/n7114 ), .B1(\SMART_ABS/RS485_COM_M/i_0 ), 
    .A1(\SMART_ABS/RS485_COM_M/i_2 ), .D0(\SMART_ABS/RS485_COM_M/n144 ), 
    .C0(\SMART_ABS/RS485_COM_M/i_1 ), .B0(begin_reg_1), .A0(begin_reg_0), 
    .M0(\SMART_ABS/RS485_COM_M/i_3 ), 
    .OFX0(\SMART_ABS/RS485_COM_M/clk_in_c_enable_263 ));
  SMART_ABS_RS485_COM_M_i6313_SLICE_251 
    \SMART_ABS/RS485_COM_M/i6313/SLICE_251 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6007 ), .C1(\SMART_ABS/RS485_COM_M/n7077 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7377 ), .A1(\SMART_ABS/RS485_COM_M/n5868 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5828 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .B0(\SMART_ABS/RS485_COM_M/n5868 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .M0(\SMART_ABS/RS485_COM_M/n7076 ), .OFX0(\SMART_ABS/RS485_COM_M/n6953 ));
  SMART_ABS_RS485_COM_M_i6397_SLICE_252 
    \SMART_ABS/RS485_COM_M/i6397/SLICE_252 ( 
    .D1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .C1(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .B1(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .D0(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .C0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .M0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .OFX0(\SMART_ABS/RS485_COM_M/n7174 ));
  SMG_SCAN_i6098_SLICE_253 \SMG_SCAN/i6098/SLICE_253 ( .C1(smg3_data_7), 
    .B1(smg2_data_7), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_7), .A0(smg0_data_7), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6684 ));
  SMG_SCAN_i6107_SLICE_254 \SMG_SCAN/i6107/SLICE_254 ( .C1(smg3_data_4), 
    .B1(smg2_data_4), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_4), .A0(smg0_data_4), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6693 ));
  SMG_SCAN_i6101_SLICE_255 \SMG_SCAN/i6101/SLICE_255 ( .C1(smg3_data_6), 
    .B1(smg2_data_6), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_6), .A0(smg0_data_6), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6687 ));
  SMG_SCAN_i6104_SLICE_256 \SMG_SCAN/i6104/SLICE_256 ( .C1(smg3_data_5), 
    .B1(smg2_data_5), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_5), .A0(smg0_data_5), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6690 ));
  SMG_SCAN_i6086_SLICE_257 \SMG_SCAN/i6086/SLICE_257 ( .C1(smg3_data_0), 
    .B1(smg2_data_0), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_0), .A0(smg0_data_0), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6672 ));
  SMG_SCAN_i6110_SLICE_258 \SMG_SCAN/i6110/SLICE_258 ( .C1(smg3_data_3), 
    .B1(smg2_data_3), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_3), .A0(smg0_data_3), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6696 ));
  SMG_SCAN_i6113_SLICE_259 \SMG_SCAN/i6113/SLICE_259 ( .C1(smg3_data_2), 
    .B1(smg2_data_2), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_2), .A0(smg0_data_2), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6699 ));
  SMG_SCAN_i6116_SLICE_260 \SMG_SCAN/i6116/SLICE_260 ( .C1(smg3_data_1), 
    .B1(smg2_data_1), .A1(\SMG_SCAN/cnt_main_0 ), .C0(\SMG_SCAN/cnt_main_0 ), 
    .B0(smg1_data_1), .A0(smg0_data_1), .M0(\SMG_SCAN/cnt_main_1 ), 
    .OFX0(\SMG_SCAN/n6702 ));
  SLICE_261 SLICE_261( .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B1(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), 
    .D0(\SMART_ABS/RS485_COM_M/n253 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .M1(\OUT_PULSE_CHECK/input_b_r ), .M0(TMR_CLK_c), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n5864 ), .Q0(\OUT_PULSE_CHECK/input_a_r ), 
    .F1(\SMART_ABS/RS485_COM_M/n253 ), .Q1(\OUT_PULSE_CHECK/input_b_r1 ));
  SMART_ABS_RS485_COM_M_SLICE_262 \SMART_ABS/RS485_COM_M/SLICE_262 ( 
    .D1(\SMART_ABS/RS485_COM_M/n253 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7382 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .D0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7382 ), .F1(\SMART_ABS/RS485_COM_M/n7091 ));
  SMART_ABS_RS485_COM_M_SLICE_263 \SMART_ABS/RS485_COM_M/SLICE_263 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5856 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7091 ), .D0(\SMART_ABS/RS485_COM_M/n6 ), 
    .C0(\SMART_ABS/RS485_COM_M/n7088 ), .B0(\SMART_ABS/RS485_COM_M/n7085 ), 
    .A0(\SMART_ABS/RS485_COM_M/n7091 ), .F0(\SMART_ABS/RS485_COM_M/n8 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7088 ));
  SMART_ABS_RS485_COM_M_SLICE_264 \SMART_ABS/RS485_COM_M/SLICE_264 ( 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7083 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5828 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .B0(\SMART_ABS/RS485_COM_M/n5868 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7078 ), .F1(\SMART_ABS/RS485_COM_M/n5828 ));
  SMART_ABS_RS485_COM_M_SLICE_265 \SMART_ABS/RS485_COM_M/SLICE_265 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5837 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7083 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .B0(\SMART_ABS/RS485_COM_M/n2824 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .F0(\SMART_ABS/RS485_COM_M/n5837 ), .F1(\SMART_ABS/RS485_COM_M/n7082 ));
  SMART_ABS_RS485_COM_M_SLICE_266 \SMART_ABS/RS485_COM_M/SLICE_266 ( 
    .D1(\SMART_ABS/RS485_COM_M/n31 ), .C1(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7097 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .D0(\SMART_ABS/RS485_COM_M/n7095 ), .C0(\SMART_ABS/RS485_COM_M/n195 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7174 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_57 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_56 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n31 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_55 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6_adj_1027 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_56 ));
  SMART_ABS_RS485_COM_M_SLICE_267 \SMART_ABS/RS485_COM_M/SLICE_267 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6015 ), .C1(\SMART_ABS/RS485_COM_M/n5859 ), 
    .B1(\SMART_ABS/RS485_COM_M/n4_adj_1025 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7074 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_2 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7074 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_29 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_28 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4_adj_1025 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_27 ), 
    .F1(\SMART_ABS/RS485_COM_M/n8_adj_1042 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_28 ));
  SMART_ABS_RS485_COM_M_SLICE_268 \SMART_ABS/RS485_COM_M/SLICE_268 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5856 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7091 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B0(\SMART_ABS/RS485_COM_M/n253 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .F0(\SMART_ABS/RS485_COM_M/n5856 ), .F1(\SMART_ABS/RS485_COM_M/n1378 ));
  SMART_ABS_RS485_COM_M_SLICE_269 \SMART_ABS/RS485_COM_M/SLICE_269 ( 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5868 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .D0(\SMART_ABS/RS485_COM_M/n6007 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7076 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_42 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_41 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n7_adj_1030 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_40 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6007 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_41 ));
  SMART_ABS_RS485_COM_M_SLICE_270 \SMART_ABS/RS485_COM_M/SLICE_270 ( 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7083 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5873 ), .C0(\SMART_ABS/RS485_COM_M/n5837 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7378 ), .A0(\SMART_ABS/RS485_COM_M/n7083 ), 
    .F0(\SMART_ABS/RS485_COM_M/n8_adj_1022 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7378 ));
  SMART_ABS_RS485_COM_M_SLICE_271 \SMART_ABS/RS485_COM_M/SLICE_271 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7084 ), .C1(\SMART_ABS/RS485_COM_M/n2824 ), 
    .B1(\SMART_ABS/RS485_COM_M/n2733 ), .A1(\SMART_ABS/RS485_COM_M/n5844 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .B0(\SMART_ABS/RS485_COM_M/n2824 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7084 ), .F1(\SMART_ABS/RS485_COM_M/n7 ));
  SMART_ABS_RS485_COM_M_SLICE_272 \SMART_ABS/RS485_COM_M/SLICE_272 ( 
    .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6506 ), .A1(\SMART_ABS/RS485_COM_M/n6497 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5844 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .B0(\SMART_ABS/RS485_COM_M/n2824 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_53 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_52 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6097 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_51 ), 
    .F1(\SMART_ABS/RS485_COM_M/n5844 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_52 ));
  SMART_ABS_RS485_COM_M_SLICE_273 \SMART_ABS/RS485_COM_M/SLICE_273 ( 
    .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6497 ), .A1(\SMART_ABS/RS485_COM_M/n253 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5805 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7085 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .F0(\SMART_ABS/RS485_COM_M/n2733 ), .F1(\SMART_ABS/RS485_COM_M/n5805 ));
  SMART_ABS_RS485_COM_M_SLICE_274 \SMART_ABS/RS485_COM_M/SLICE_274 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6462 ), .C1(\SMART_ABS/RS485_COM_M/n4692 ), 
    .B1(r_begin), .A1(\SMART_ABS/RS485_COM_M/n4876 ), 
    .D0(\SMART_ABS/RS485_COM_M/n7380 ), .C0(r_begin), 
    .B0(\SMART_ABS/RS485_COM_M/n5906 ), .A0(rx_485_begin), 
    .F0(\SMART_ABS/RS485_COM_M/clk_in_c_enable_275 ), 
    .F1(\SMART_ABS/RS485_COM_M/n5906 ));
  SMART_ABS_RS485_COM_M_SLICE_275 \SMART_ABS/RS485_COM_M/SLICE_275 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6007 ), 
    .C1(\SMART_ABS/RS485_COM_M/n8_adj_1042 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7377 ), .A1(\SMART_ABS/RS485_COM_M/n7076 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7076 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_26 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_25 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n7377 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_24 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6_adj_1026 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_25 ));
  SMART_ABS_RS485_COM_M_SLICE_276 \SMART_ABS/RS485_COM_M/SLICE_276 ( 
    .D1(\SMART_ABS/RS485_COM_M/n4_adj_1040 ), .C1(\SMART_ABS/RS485_COM_M/n4 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5892 ), 
    .A1(\SMART_ABS/RS485_COM_M/n4_adj_1025 ), 
    .D0(\SMART_ABS/RS485_COM_M/n4_adj_1023 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_1 ), 
    .B0(\SMART_ABS/RS485_COM_M/n5892 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_2 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_10 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_27 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4_adj_1040 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_26 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6_adj_1045 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_9 ));
  SMART_ABS_RS485_COM_M_SLICE_277 \SMART_ABS/RS485_COM_M/SLICE_277 ( 
    .D1(\SMART_ABS/RS485_COM_M/i_1 ), .C1(\SMART_ABS/RS485_COM_M/i_0 ), 
    .B1(\SMART_ABS/RS485_COM_M/i_2 ), .A1(\SMART_ABS/RS485_COM_M/i_3 ), 
    .D0(\SMART_ABS/RS485_COM_M/i_3 ), .C0(\SMART_ABS/RS485_COM_M/n3595 ), 
    .B0(\SMART_ABS/RS485_COM_M/n3572 ), .A0(\SMART_ABS/RS485_COM_M/n3588 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_62 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_61 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/clk_in_c_enable_70 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_60 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3572 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_61 ));
  SMART_ABS_RS485_COM_M_SLICE_278 \SMART_ABS/RS485_COM_M/SLICE_278 ( 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5868 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .D0(\SMART_ABS/RS485_COM_M/n310 ), .C0(\SMART_ABS/RS485_COM_M/n7079 ), 
    .B0(\SMART_ABS/RS485_COM_M/n5868 ), .A0(\SMART_ABS/RS485_COM_M/n5828 ), 
    .F0(\SMART_ABS/RS485_COM_M/n8_adj_1041 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7079 ));
  SLICE_279 SLICE_279( .D1(\SMART_ABS/RS485_COM_M/error_test_5 ), 
    .C1(\SMART_ABS/RS485_COM_M/n4588 ), 
    .B1(\SMART_ABS/RS485_COM_M/error_test_7 ), 
    .A1(\SMART_ABS/RS485_COM_M/error_test_6 ), .D0(r_begin), .C0(n4680), 
    .B0(rx_485_begin), .A0(error_test_8), .F0(clk_in_c_enable_54), .F1(n4680));
  SLICE_280 SLICE_280( .B1(BUS_A_c_2), .A1(BUS_A_c_1), .D0(n6483), 
    .C0(BUS_A_c_0), .B0(BUS_A_c_4), .A0(BUS_A_c_3), .F0(n13_adj_1084), 
    .F1(n6483));
  SLICE_281 SLICE_281( .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(BUS_A_c_0), 
    .C0(n7135), .B0(BUS_A_c_4), .A0(BUS_A_c_3), .F0(n13_adj_1083), .F1(n7135));
  SLICE_282 SLICE_282( .D1(BUS_A_c_4), .C1(n6980), .B1(\DSP_COM/n7128 ), 
    .A1(\DSP_COM/n7121 ), .D0(BUS_A_c_0), .C0(BUS_A_c_2), .B0(BUS_A_c_3), 
    .A0(BUS_A_c_1), .F0(n6980), .F1(\DSP_COM/clk_in_c_enable_87 ));
  OUT_PULSE_CHECK_SLICE_283 \OUT_PULSE_CHECK/SLICE_283 ( .D1(out_pulse_type_1), 
    .C1(out_pulse_type_4), .B1(\OUT_PULSE_CHECK/n10 ), .A1(out_pulse_type_0), 
    .D0(out_pulse_type_7), .C0(out_pulse_type_2), .B0(\OUT_PULSE_CHECK/n12 ), 
    .A0(out_pulse_type_6), .F0(\OUT_PULSE_CHECK/clk_in_c_enable_17 ), 
    .F1(\OUT_PULSE_CHECK/n12 ));
  DSP_COM_SLICE_284 \DSP_COM/SLICE_284 ( .D1(BUS_A_c_3), .C1(BUS_A_c_4), 
    .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(BUS_A_c_0), .C0(n3735), 
    .B0(\DSP_COM/n7128 ), .A0(\DSP_COM/n7121 ), .F0(n7110), .F1(n3735));
  DSP_COM_SLICE_285 \DSP_COM/SLICE_285 ( .B1(BUS_A_c_3), .A1(BUS_A_c_4), 
    .D0(\DSP_COM/n7123 ), .C0(BUS_A_c_2), .B0(BUS_A_c_1), .A0(BUS_A_c_0), 
    .M0(BUS_WE_c), .CLK(clk_in_c), .F0(\DSP_COM/n13_adj_1069 ), 
    .Q0(\DSP_COM/bus_we_r ), .F1(\DSP_COM/n7123 ));
  DSP_COM_SLICE_286 \DSP_COM/SLICE_286 ( .B1(BUS_A_c_3), .A1(BUS_A_c_4), 
    .D0(BUS_A_c_0), .C0(\DSP_COM/n7134 ), .B0(BUS_A_c_1), .A0(BUS_A_c_2), 
    .F0(\DSP_COM/n2875 ), .F1(\DSP_COM/n7134 ));
  DSP_COM_SLICE_287 \DSP_COM/SLICE_287 ( .C1(\DSP_COM/n6583 ), 
    .B1(\DSP_COM/n6723 ), .A1(\DSP_COM/n6585 ), .D0(\DSP_COM/n18 ), 
    .C0(\DSP_COM/cnt_23 ), .B0(\DSP_COM/n6536 ), .A0(\DSP_COM/n6581 ), 
    .F0(\DSP_COM/n6723 ), .F1(\DSP_COM/n7105 ));
  DSP_COM_SLICE_288 \DSP_COM/SLICE_288 ( .D1(\DSP_COM/cnt_25 ), 
    .C1(\DSP_COM/cnt_10 ), .B1(\DSP_COM/cnt_7 ), .A1(\DSP_COM/cnt_18 ), 
    .D0(\DSP_COM/n20 ), .C0(\DSP_COM/n19 ), .B0(\DSP_COM/cnt_0 ), 
    .A0(\DSP_COM/n21 ), .F0(\DSP_COM/n18 ), .F1(\DSP_COM/n20 ));
  SMART_ABS_RS485_COM_M_SLICE_289 \SMART_ABS/RS485_COM_M/SLICE_289 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7133 ), 
    .C1(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ), 
    .B1(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), 
    .A1(\SMART_ABS/RS485_COM_M/rbaud_reg_4 ), .D0(r_begin), 
    .C0(\SMART_ABS/RS485_COM_M/n4876 ), .B0(\SMART_ABS/RS485_COM_M/n7380 ), 
    .A0(rx_485_begin), .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_64 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_63 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/clk_in_c_enable_272 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_62 ), 
    .F1(\SMART_ABS/RS485_COM_M/n4876 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_63 ));
  SMART_ABS_RS485_COM_M_SLICE_290 \SMART_ABS/RS485_COM_M/SLICE_290 ( 
    .C1(\SMART_ABS/RS485_COM_M/n5873 ), .B1(\SMART_ABS/RS485_COM_M/n7082 ), 
    .A1(\SMART_ABS/RS485_COM_M/n8_adj_1041 ), 
    .D0(\SMART_ABS/RS485_COM_M/n7080 ), .C0(\SMART_ABS/RS485_COM_M/n6500 ), 
    .B0(\SMART_ABS/RS485_COM_M/n5859 ), .A0(\SMART_ABS/RS485_COM_M/n6509 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_37 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_36 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_35 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6500 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_36 ));
  SMART_ABS_RS485_COM_M_SLICE_291 \SMART_ABS/RS485_COM_M/SLICE_291 ( 
    .D1(r_begin), .C1(\SMART_ABS/RS485_COM_M/n20 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7380 ), .A1(rx_485_begin), 
    .B0(\SMART_ABS/RS485_COM_M/uart_rx_reg_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/uart_rx_reg_0 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_18 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_9 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n7380 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_8 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3076 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_17 ));
  SMART_ABS_RS485_COM_M_SLICE_292 \SMART_ABS/RS485_COM_M/SLICE_292 ( 
    .D1(\SMART_ABS/RS485_COM_M/n4_adj_1035 ), .C1(\SMART_ABS/RS485_COM_M/i_2 ), 
    .B1(\SMART_ABS/RS485_COM_M/n3594 ), .A1(n7124), 
    .D0(\SMART_ABS/RS485_COM_M/i_0 ), .C0(\SMART_ABS/RS485_COM_M/i_1 ), 
    .B0(begin_reg_1), .A0(begin_reg_0), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_68 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_67 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n3594 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_66 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3619 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_67 ));
  SMART_ABS_RS485_COM_M_SLICE_293 \SMART_ABS/RS485_COM_M/SLICE_293 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5852 ), .C1(\SMART_ABS/RS485_COM_M/n1378 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7093 ), .A1(\SMART_ABS/RS485_COM_M/n2419 ), 
    .D0(\SMART_ABS/RS485_COM_M/n253 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7093 ), .F1(\SMART_ABS/RS485_COM_M/n6506 ));
  SMART_ABS_RS485_COM_M_SLICE_294 \SMART_ABS/RS485_COM_M/SLICE_294 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5856 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7091 ), .C0(\SMART_ABS/RS485_COM_M/n8 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7087 ), .A0(\SMART_ABS/RS485_COM_M/n5864 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_70 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_69 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6512 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_68 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7087 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_69 ));
  SMART_ABS_RS485_COM_M_SLICE_295 \SMART_ABS/RS485_COM_M/SLICE_295 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7078 ), .C1(\SMART_ABS/RS485_COM_M/n6953 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7_adj_1030 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7076 ), .D0(\SMART_ABS/RS485_COM_M/n7080 ), 
    .C0(\SMART_ABS/RS485_COM_M/n6500 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .A0(\SMART_ABS/RS485_COM_M/n6509 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_44 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_43 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4_adj_1023 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_42 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6509 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_43 ));
  SMART_ABS_RS485_COM_M_SLICE_296 \SMART_ABS/RS485_COM_M/SLICE_296 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6556 ), 
    .C1(\SMART_ABS/RS485_COM_M/tbaud_reg_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/tbaud_reg_2 ), 
    .A1(\SMART_ABS/RS485_COM_M/tbaud_reg_0 ), 
    .D0(\SMART_ABS/RS485_COM_M/n3594 ), .C0(\SMART_ABS/RS485_COM_M/i_2 ), 
    .B0(\SMART_ABS/RS485_COM_M/n1 ), .A0(n7124), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_15 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_14 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n3595 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_13 ), 
    .F1(\SMART_ABS/RS485_COM_M/n1 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_14 ));
  SMART_ABS_RS485_COM_M_SLICE_297 \SMART_ABS/RS485_COM_M/SLICE_297 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7099 ), .C1(\SMART_ABS/RS485_COM_M/n7101 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7098 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .D0(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .C0(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7101 ), .F1(\SMART_ABS/RS485_COM_M/n7095 ));
  SMART_ABS_RS485_COM_M_SLICE_298 \SMART_ABS/RS485_COM_M/SLICE_298 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7099 ), .C1(\SMART_ABS/RS485_COM_M/n7101 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7098 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .D0(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .C0(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7099 ), .F1(\SMART_ABS/RS485_COM_M/n195 ));
  SMART_ABS_RS485_COM_M_SLICE_299 \SMART_ABS/RS485_COM_M/SLICE_299 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7099 ), .C1(\SMART_ABS/RS485_COM_M/n7101 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7098 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .D0(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .C0(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .F0(\SMART_ABS/RS485_COM_M/n7098 ), .F1(\SMART_ABS/RS485_COM_M/n7097 ));
  SMART_ABS_RS485_COM_M_SLICE_300 \SMART_ABS/RS485_COM_M/SLICE_300 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6015 ), .C1(\SMART_ABS/RS485_COM_M/n5859 ), 
    .B1(\SMART_ABS/RS485_COM_M/n4_adj_1025 ), 
    .A1(\SMART_ABS/RS485_COM_M/n7074 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7076 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .F0(\SMART_ABS/RS485_COM_M/n5859 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7_adj_1032 ));
  SMART_ABS_RS485_COM_M_SLICE_301 \SMART_ABS/RS485_COM_M/SLICE_301 ( 
    .D1(\SMART_ABS/RS485_COM_M/n7095 ), .C1(\SMART_ABS/RS485_COM_M/n195 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7174 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), .D0(\SMART_ABS/RS485_COM_M/n9 ), 
    .C0(\SMART_ABS/RS485_COM_M/r_bit_cnt_0 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7391 ), 
    .A0(\SMART_ABS/RS485_COM_M/n6_adj_1027 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_58 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_13 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4_adj_1028 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_12 ), 
    .F1(\SMART_ABS/RS485_COM_M/n9 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_57 ));
  SMART_ABS_RS485_COM_M_SLICE_302 \SMART_ABS/RS485_COM_M/SLICE_302 ( 
    .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5774 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .D0(\SMART_ABS/RS485_COM_M/n6_adj_1029 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_11 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .F0(\SMART_ABS/RS485_COM_M/n5774 ), 
    .F1(\SMART_ABS/RS485_COM_M/clk_in_c_enable_67 ));
  SMART_ABS_RS485_COM_M_SLICE_303 \SMART_ABS/RS485_COM_M/SLICE_303 ( 
    .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .B1(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_2 ), 
    .D0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .C0(\SMART_ABS/RS485_COM_M/n5769 ), 
    .B0(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_60 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_59 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6_adj_1029 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_58 ), 
    .F1(\SMART_ABS/RS485_COM_M/n5769 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_59 ));
  SMART_ABS_RS485_COM_M_SLICE_304 \SMART_ABS/RS485_COM_M/SLICE_304 ( 
    .B1(\SMART_ABS/RS485_COM_M/n6421 ), .A1(\SMART_ABS/RS485_COM_M/n4692 ), 
    .D0(\SMART_ABS/RS485_COM_M/r_bit_cnt_0 ), 
    .C0(\SMART_ABS/RS485_COM_M/n6453 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), 
    .F0(\SMART_ABS/RS485_COM_M/n4692 ), 
    .F1(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ));
  SMART_ABS_RS485_COM_M_SLICE_305 \SMART_ABS/RS485_COM_M/SLICE_305 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6_adj_1034 ), 
    .C1(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6453 ), .A1(\SMART_ABS/RS485_COM_M/n6421 ), 
    .D0(\SMART_ABS/RS485_COM_M/n6462 ), 
    .C0(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), 
    .B0(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ), 
    .A0(\SMART_ABS/RS485_COM_M/n7145 ), .F0(\SMART_ABS/RS485_COM_M/n6421 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7390 ));
  SMART_ABS_RS485_COM_M_SLICE_306 \SMART_ABS/RS485_COM_M/SLICE_306 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6_adj_1034 ), 
    .C1(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6453 ), .A1(\SMART_ABS/RS485_COM_M/n6421 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_46 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_45 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6453 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_44 ), 
    .F1(\SMART_ABS/RS485_COM_M/clk_in_c_enable_255 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_45 ));
  SMART_ABS_RS485_COM_M_SLICE_307 \SMART_ABS/RS485_COM_M/SLICE_307 ( 
    .B1(\SMART_ABS/RS485_COM_M/i_2 ), .A1(\SMART_ABS/RS485_COM_M/i_3 ), 
    .D0(\SMART_ABS/RS485_COM_M/n7125 ), .C0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .B0(\SMART_ABS/RS485_COM_M/i_1 ), .A0(n7124), 
    .M0(\SMART_ABS/RS485_COM_M/com_error_7_N_812_7 ), .CE(rx_485_begin), 
    .CLK(clk_in_c), .F0(\SMART_ABS/RS485_COM_M/n1179 ), 
    .Q0(\SMART_ABS/RS485_COM_M/n7391 ), .F1(\SMART_ABS/RS485_COM_M/n7125 ));
  SMART_ABS_RS485_COM_M_SLICE_308 \SMART_ABS/RS485_COM_M/SLICE_308 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6093 ), .C1(\SMART_ABS/RS485_COM_M/n6097 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6 ), .A1(\SMART_ABS/RS485_COM_M/n2733 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5844 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .B0(\SMART_ABS/RS485_COM_M/n2824 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_55 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_54 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6093 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_53 ), 
    .F1(\SMART_ABS/RS485_COM_M/n6787 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_54 ));
  SMART_ABS_RS485_COM_M_SLICE_309 \SMART_ABS/RS485_COM_M/SLICE_309 ( 
    .D1(\SMART_ABS/RS485_COM_M/n6987 ), .C1(\SMART_ABS/RS485_COM_M/n1 ), 
    .B1(begin_reg_1), .A1(begin_reg_0), .D0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .C0(\SMART_ABS/RS485_COM_M/i_1 ), .B0(\SMART_ABS/RS485_COM_M/i_2 ), 
    .A0(\SMART_ABS/RS485_COM_M/i_3 ), .F0(\SMART_ABS/RS485_COM_M/n6987 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3568 ));
  SMART_ABS_RS485_COM_M_SLICE_310 \SMART_ABS/RS485_COM_M/SLICE_310 ( 
    .D1(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), .C1(\SMART_ABS/RS485_COM_M/n10 ), 
    .B1(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .A1(\SMART_ABS/RS485_COM_M/r_bit_cnt_4 ), 
    .D0(\SMART_ABS/RS485_COM_M/r_bit_cnt_3 ), 
    .C0(\SMART_ABS/RS485_COM_M/r_bit_cnt_0 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_2 ), .F0(\SMART_ABS/RS485_COM_M/n10 ), 
    .F1(\SMART_ABS/RS485_COM_M/clk_in_c_enable_262 ));
  SMART_ABS_RS485_COM_M_SLICE_311 \SMART_ABS/RS485_COM_M/SLICE_311 ( 
    .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_9 ), 
    .B1(\SMART_ABS/RS485_COM_M/n6497 ), .A1(\SMART_ABS/RS485_COM_M/n253 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5864 ), .C0(\SMART_ABS/RS485_COM_M/n5856 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7090 ), .A0(\SMART_ABS/RS485_COM_M/n7091 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_31 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_30 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n2419 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_29 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7090 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_30 ));
  SMART_ABS_RS485_COM_M_SLICE_312 \SMART_ABS/RS485_COM_M/SLICE_312 ( 
    .B1(\SMART_ABS/RS485_COM_M/i_1 ), .A1(\SMART_ABS/RS485_COM_M/i_0 ), 
    .D0(\SMART_ABS/RS485_COM_M/n1 ), .C0(\SMART_ABS/RS485_COM_M/n7127 ), 
    .B0(begin_reg_1), .A0(begin_reg_0), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_33 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_32 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n189 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_31 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7127 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_32 ));
  SMART_ABS_RS485_COM_M_SLICE_313 \SMART_ABS/RS485_COM_M/SLICE_313 ( 
    .D1(\SMART_ABS/RS485_COM_M/n3554 ), .C1(\SMART_ABS/RS485_COM_M/n144 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7109 ), .A1(tr_dir_N_829), 
    .C0(\SMART_ABS/RS485_COM_M/n1 ), .B0(begin_reg_1), .A0(begin_reg_0), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_12 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_47 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n7109 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_46 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3588 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_11 ));
  SMART_ABS_RS485_COM_M_SLICE_314 \SMART_ABS/RS485_COM_M/SLICE_314 ( 
    .D1(r_begin), .C1(\SMART_ABS/RS485_COM_M/rbaud_reg_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ), 
    .A1(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .D0(\SMART_ABS/RS485_COM_M/n4_adj_1028 ), 
    .C0(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), .A0(\SMART_ABS/RS485_COM_M/n5 ), 
    .F0(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), 
    .F1(\SMART_ABS/RS485_COM_M/n5 ));
  SMG_SCAN_SLICE_315 \SMG_SCAN/SLICE_315 ( .D1(\SMG_SCAN/cnt_3 ), 
    .C1(\SMG_SCAN/n10 ), .B1(\SMG_SCAN/cnt_6 ), .A1(\SMG_SCAN/cnt_5 ), 
    .D0(\SMG_SCAN/cnt_4 ), .C0(\SMG_SCAN/cnt_0 ), .B0(\SMG_SCAN/cnt_1 ), 
    .A0(\SMG_SCAN/cnt_2 ), .F0(\SMG_SCAN/n10 ), .F1(\SMG_SCAN/n14 ));
  SMG_SCAN_SLICE_316 \SMG_SCAN/SLICE_316 ( .D1(\SMG_SCAN/cnt_13 ), 
    .C1(\SMG_SCAN/cnt_14 ), .B1(\SMG_SCAN/n6415 ), .A1(\SMG_SCAN/n5758 ), 
    .D0(\SMG_SCAN/n6 ), .C0(\SMG_SCAN/cnt_15 ), .B0(\SMG_SCAN/cnt_17 ), 
    .A0(\SMG_SCAN/cnt_18 ), .F0(\SMG_SCAN/n6415 ), 
    .F1(\SMG_SCAN/cnt_19__N_299 ));
  SMG_SCAN_SLICE_317 \SMG_SCAN/SLICE_317 ( .D1(\SMG_SCAN/cnt_10 ), 
    .C1(\SMG_SCAN/cnt_11 ), .B1(\SMG_SCAN/cnt_12 ), 
    .A1(\SMG_SCAN/n20_adj_1006 ), .D0(\SMG_SCAN/n14 ), .C0(\SMG_SCAN/cnt_7 ), 
    .B0(\SMG_SCAN/cnt_9 ), .A0(\SMG_SCAN/cnt_8 ), .F0(\SMG_SCAN/n20_adj_1006 ), 
    .F1(\SMG_SCAN/n5758 ));
  KEY_CHECK_SLICE_318 \KEY_CHECK/SLICE_318 ( .D1(\KEY_CHECK/n6577 ), 
    .C1(\KEY_CHECK/n6579 ), .B1(\KEY_CHECK/n6575 ), .A1(\KEY_CHECK/cnt_18 ), 
    .D0(\KEY_CHECK/cnt_9 ), .C0(\KEY_CHECK/n12 ), .B0(\KEY_CHECK/cnt_19 ), 
    .A0(\KEY_CHECK/n13 ), .F0(\KEY_CHECK/cnt_19__N_367 ), .F1(\KEY_CHECK/n12 ));
  SLICE_319 SLICE_319( .B1(\KEY_CHECK/cnt_2 ), .A1(\KEY_CHECK/cnt_13 ), 
    .D0(\KEY_CHECK/n6517 ), .C0(\KEY_CHECK/cnt_5 ), .B0(\KEY_CHECK/cnt_16 ), 
    .A0(\KEY_CHECK/cnt_11 ), .M1(ABZ_c), .M0(\ENCODER_CHECK/input_abz_r ), 
    .CLK(clk_in_c), .F0(\KEY_CHECK/n6575 ), .Q0(\ENCODER_CHECK/input_abz_r1 ), 
    .F1(\KEY_CHECK/n6517 ), .Q1(\ENCODER_CHECK/input_abz_r ));
  KEY_CHECK_SLICE_320 \KEY_CHECK/SLICE_320 ( .D1(\KEY_CHECK/n7131 ), 
    .C1(\KEY_CHECK/n7138 ), .B1(\KEY_CHECK/n7136 ), .A1(\KEY_CHECK/n7130 ), 
    .B0(\KEY_CHECK/k_up_r ), .A0(\KEY_CHECK/k_up_rr ), 
    .M1(\KEY_CHECK/k_down_r ), .M0(K_DOWN_c), .CE(\KEY_CHECK/cnt_19__N_367 ), 
    .CLK(clk_in_c), .F0(\KEY_CHECK/n7130 ), .Q0(\KEY_CHECK/k_down_r ), 
    .F1(\KEY_CHECK/clk_in_c_enable_121 ), .Q1(\KEY_CHECK/k_down_rr ));
  DSP_COM_SLICE_321 \DSP_COM/SLICE_321 ( .D1(BUS_A_c_0), .C1(n7135), 
    .B1(BUS_A_c_3), .A1(BUS_A_c_4), .D0(BUS_A_c_3), .C0(BUS_A_c_4), .B0(n7135), 
    .A0(BUS_A_c_0), .F0(n13), .F1(\DSP_COM/n13_adj_1066 ));
  DSP_COM_SLICE_322 \DSP_COM/SLICE_322 ( .D1(\DSP_COM/bus_we_r ), 
    .C1(\DSP_COM/bus_we_r1 ), .B1(\DSP_COM/bus_cs_r ), 
    .A1(\DSP_COM/bus_cs_r1 ), .D0(\DSP_COM/bus_we_r ), 
    .C0(\DSP_COM/bus_we_r1 ), .B0(\DSP_COM/bus_cs_r ), 
    .A0(\DSP_COM/bus_cs_r1 ), .F0(\DSP_COM/out_IO_signal_7__N_132 ), 
    .F1(\DSP_COM/clk_in_c_enable_125 ));
  DSP_COM_SLICE_323 \DSP_COM/SLICE_323 ( .D1(BUS_A_c_4), .C1(BUS_A_c_3), 
    .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(BUS_A_c_1), .C0(BUS_A_c_2), 
    .B0(BUS_A_c_3), .A0(BUS_A_c_4), .M1(\DSP_COM/bus_we_r ), .M0(BUS_CS_c), 
    .CLK(clk_in_c), .F0(\DSP_COM/n10_adj_1070 ), .Q0(\DSP_COM/bus_cs_r ), 
    .F1(n10), .Q1(\DSP_COM/bus_we_r1 ));
  SMART_ABS_RS485_COM_M_SLICE_324 \SMART_ABS/RS485_COM_M/SLICE_324 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5837 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7083 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5837 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7083 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_51 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_50 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n7080 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_49 ), 
    .F1(\SMART_ABS/RS485_COM_M/n310 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_50 ));
  SLICE_325 SLICE_325( .D1(\OUT_PULSE_CHECK/input_z_dir ), 
    .C1(\OUT_PULSE_CHECK/state_1 ), .B1(\OUT_PULSE_CHECK/state_0 ), 
    .A1(\OUT_PULSE_CHECK/state_2__N_943 ), .C0(\OUT_PULSE_CHECK/input_z_dir ), 
    .B0(\OUT_PULSE_CHECK/state_0 ), .A0(\OUT_PULSE_CHECK/state_2__N_943 ), 
    .M1(\KEY_CHECK/k_up_r ), .M0(K_UP_c), .CE(\KEY_CHECK/cnt_19__N_367 ), 
    .CLK(clk_in_c), .F0(\OUT_PULSE_CHECK/n7113 ), .Q0(\KEY_CHECK/k_up_r ), 
    .F1(\OUT_PULSE_CHECK/n5 ), .Q1(\KEY_CHECK/k_up_rr ));
  DSP_COM_SLICE_326 \DSP_COM/SLICE_326 ( .D1(BUS_A_c_0), .C1(out_pulse_data_7), 
    .B1(BUS_A_c_1), .A1(BUS_A_c_2), .C0(BUS_A_c_2), .B0(BUS_A_c_1), 
    .A0(BUS_A_c_0), .F0(n7122), .F1(\DSP_COM/n6452 ));
  DSP_COM_SLICE_327 \DSP_COM/SLICE_327 ( .D1(BUS_A_c_0), .C1(out_pulse_data_6), 
    .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(BUS_A_c_0), .C0(out_pulse_data_5), 
    .B0(BUS_A_c_1), .A0(BUS_A_c_2), .F0(\DSP_COM/n6449 ), .F1(\DSP_COM/n6450 ));
  SMART_ABS_RS485_COM_M_SLICE_328 \SMART_ABS/RS485_COM_M/SLICE_328 ( 
    .C1(r_begin), .B1(\SMART_ABS/RS485_COM_M/uart_rx_reg_1 ), 
    .A1(\SMART_ABS/RS485_COM_M/uart_rx_reg_0 ), .D0(rx_485_begin), 
    .C0(r_begin), .B0(\SMART_ABS/RS485_COM_M/uart_rx_reg_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/uart_rx_reg_0 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_66 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_65 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n3067 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_64 ), 
    .F1(\SMART_ABS/RS485_COM_M/r_begin_N_833 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_65 ));
  DSP_COM_SLICE_329 \DSP_COM/SLICE_329 ( .D1(BUS_A_c_0), .C1(out_pulse_data_4), 
    .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(input_v_r), .C0(BUS_A_c_1), 
    .B0(input_v_r1), .A0(BUS_A_c_0), .F0(\DSP_COM/n6868 ), 
    .F1(\DSP_COM/n6451 ));
  DSP_COM_SLICE_330 \DSP_COM/SLICE_330 ( .D1(\DSP_COM/bus_cs_r1 ), 
    .C1(\DSP_COM/bus_cs_r ), .B1(\DSP_COM/bus_we_r1 ), .A1(\DSP_COM/bus_we_r ), 
    .B0(\DSP_COM/bus_cs_r ), .A0(\DSP_COM/bus_cs_r1 ), .M0(\DSP_COM/bus_cs_r ), 
    .CLK(clk_in_c), .F0(\DSP_COM/n7121 ), .Q0(\DSP_COM/bus_cs_r1 ), 
    .F1(\DSP_COM/n7115 ));
  DSP_COM_SLICE_331 \DSP_COM/SLICE_331 ( .D1(BUS_A_c_4), .C1(BUS_A_c_3), 
    .B1(BUS_A_c_1), .A1(BUS_A_c_2), .D0(n7135), .C0(BUS_A_c_0), .B0(BUS_A_c_3), 
    .A0(BUS_A_c_4), .F0(\DSP_COM/n2902 ), .F1(\DSP_COM/n10 ));
  SMART_ABS_RS485_COM_M_SLICE_332 \SMART_ABS/RS485_COM_M/SLICE_332 ( 
    .D1(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .C1(\SMART_ABS/RS485_COM_M/n4692 ), 
    .B1(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .A1(\SMART_ABS/RS485_COM_M/n4876 ), 
    .B0(\SMART_ABS/RS485_COM_M/r_bit_cnt_5 ), 
    .A0(\SMART_ABS/RS485_COM_M/r_bit_cnt_6 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_35 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_34 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6462 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_33 ), 
    .F1(\SMART_ABS/RS485_COM_M/n20 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_34 ));
  SMART_ABS_RS485_COM_M_SLICE_333 \SMART_ABS/RS485_COM_M/SLICE_333 ( 
    .C1(\SMART_ABS/RS485_COM_M/i_1 ), .B1(begin_reg_1), .A1(begin_reg_0), 
    .B0(begin_reg_1), .A0(begin_reg_0), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_49 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_48 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(n7124), .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_47 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7114 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_48 ));
  SMART_ABS_RS485_COM_M_SLICE_334 \SMART_ABS/RS485_COM_M/SLICE_334 ( 
    .B1(\SMART_ABS/RS485_COM_M/n1 ), .A1(\SMART_ABS/RS485_COM_M/i_1 ), 
    .C0(\SMART_ABS/RS485_COM_M/n1 ), .B0(\SMART_ABS/RS485_COM_M/i_1 ), 
    .A0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_38 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_11 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4_adj_1035 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_10 ), 
    .F1(\SMART_ABS/RS485_COM_M/n3554 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_37 ));
  DSP_COM_SLICE_335 \DSP_COM/SLICE_335 ( .B1(BUS_D_out_5), .A1(BUS_A_c_0), 
    .B0(BUS_D_out_3), .A0(BUS_A_c_0), .F0(n9), .F1(n9_adj_1085));
  DSP_COM_SLICE_336 \DSP_COM/SLICE_336 ( .B1(BUS_D_out_6), .A1(BUS_A_c_0), 
    .B0(BUS_D_out_1), .A0(BUS_A_c_0), .F0(\DSP_COM/n9_adj_1067 ), 
    .F1(\DSP_COM/n9_adj_1079 ));
  SLICE_337 SLICE_337( .D1(\SMART_ABS/RS485_COM_M/n5805 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), 
    .B1(\SMART_ABS/RS485_COM_M/n7085 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_8 ), 
    .D0(\SMART_ABS/RS485_COM_M/n5844 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_6 ), 
    .B0(\SMART_ABS/RS485_COM_M/n2824 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_7 ), .M0(TMR_DIR_c), 
    .CLK(clk_in_c), .F0(\SMART_ABS/RS485_COM_M/n5873 ), 
    .Q0(\OUT_PULSE_CHECK/input_b_r ), .F1(\SMART_ABS/RS485_COM_M/n6 ));
  SMART_ABS_RS485_COM_M_SLICE_338 \SMART_ABS/RS485_COM_M/SLICE_338 ( 
    .C1(\SMART_ABS/RS485_COM_M/i_3 ), .B1(\SMART_ABS/RS485_COM_M/n3619 ), 
    .A1(\SMART_ABS/RS485_COM_M/n3588 ), .C0(\SMART_ABS/RS485_COM_M/i_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/i_1 ), .A0(\SMART_ABS/RS485_COM_M/i_0 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_40 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_39 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n4_adj_1033 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_38 ), 
    .F1(\SMART_ABS/RS485_COM_M/clk_in_c_enable_201 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_39 ));
  SMART_ABS_RS485_COM_M_SLICE_339 \SMART_ABS/RS485_COM_M/SLICE_339 ( 
    .D1(\SMART_ABS/RS485_COM_M/n5828 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5868 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_5 ), 
    .D0(\SMART_ABS/RS485_COM_M/n6007 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7076 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_4 ), 
    .M1(\SMART_ABS/RS485_COM_M/rx_data_reg_17 ), 
    .M0(\SMART_ABS/RS485_COM_M/rx_data_reg_16 ), 
    .CE(\SMART_ABS/RS485_COM_M/clk_in_c_enable_264 ), .CLK(clk_in_c), 
    .F0(\SMART_ABS/RS485_COM_M/n6015 ), 
    .Q0(\SMART_ABS/RS485_COM_M/rx_data_reg_15 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7077 ), 
    .Q1(\SMART_ABS/RS485_COM_M/rx_data_reg_16 ));
  SMART_ABS_RS485_COM_M_SLICE_340 \SMART_ABS/RS485_COM_M/SLICE_340 ( 
    .D1(\SMART_ABS/RS485_COM_M/time_interval_reg_13__N_788 ), 
    .C1(\SMART_ABS/RS485_COM_M/time_interval_reg_12 ), 
    .B1(\SMART_ABS/RS485_COM_M/n5774 ), 
    .A1(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .C0(\SMART_ABS/RS485_COM_M/time_interval_reg_10 ), 
    .B0(\SMART_ABS/RS485_COM_M/n7382 ), 
    .A0(\SMART_ABS/RS485_COM_M/time_interval_reg_13 ), 
    .F0(\SMART_ABS/RS485_COM_M/n6497 ), .F1(\SMART_ABS/RS485_COM_M/n1174 ));
  KEY_CHECK_SLICE_341 \KEY_CHECK/SLICE_341 ( .B1(\KEY_CHECK/k_set_r ), 
    .A1(\KEY_CHECK/k_set_rr ), .B0(\KEY_CHECK/k_mode_r ), 
    .A0(\KEY_CHECK/k_mode_rr ), .M1(\KEY_CHECK/k_mode_r ), .M0(K_MODE_c), 
    .CE(\KEY_CHECK/cnt_19__N_367 ), .CLK(clk_in_c), .F0(\KEY_CHECK/n7138 ), 
    .Q0(\KEY_CHECK/k_mode_r ), .F1(\KEY_CHECK/n7136 ), 
    .Q1(\KEY_CHECK/k_mode_rr ));
  SLICE_342 SLICE_342( .D1(\KEY_CHECK/cnt_15 ), .C1(\KEY_CHECK/cnt_8 ), 
    .B1(\KEY_CHECK/cnt_6 ), .A1(\KEY_CHECK/cnt_4 ), .D0(\KEY_CHECK/cnt_3 ), 
    .C0(\KEY_CHECK/cnt_0 ), .B0(\KEY_CHECK/cnt_17 ), .A0(\KEY_CHECK/cnt_1 ), 
    .M1(UVW_c), .M0(\ENCODER_CHECK/input_uvw_r ), .CLK(clk_in_c), 
    .F0(\KEY_CHECK/n6577 ), .Q0(\ENCODER_CHECK/input_uvw_r1 ), 
    .F1(\KEY_CHECK/n6579 ), .Q1(\ENCODER_CHECK/input_uvw_r ));
  DSP_COM_SLICE_343 \DSP_COM/SLICE_343 ( .D1(\DSP_COM/cnt_20 ), 
    .C1(\DSP_COM/cnt_12 ), .B1(\DSP_COM/cnt_21 ), .A1(\DSP_COM/cnt_26 ), 
    .D0(\DSP_COM/cnt_11 ), .C0(\DSP_COM/cnt_17 ), .B0(\DSP_COM/cnt_27 ), 
    .A0(\DSP_COM/cnt_13 ), .F0(\DSP_COM/n19 ), .F1(\DSP_COM/n21 ));
  DSP_COM_SLICE_344 \DSP_COM/SLICE_344 ( .D1(\DSP_COM/cnt_9 ), 
    .C1(\DSP_COM/cnt_1 ), .B1(\DSP_COM/cnt_6 ), .A1(\DSP_COM/cnt_8 ), 
    .B0(\DSP_COM/cnt_4 ), .A0(\DSP_COM/cnt_19 ), .F0(\DSP_COM/n6536 ), 
    .F1(\DSP_COM/n6581 ));
  OUT_PULSE_CHECK_SLICE_345 \OUT_PULSE_CHECK/SLICE_345 ( .D1(out_pulse_type_0), 
    .C1(\OUT_PULSE_CHECK/input_b_r1 ), .B1(\OUT_PULSE_CHECK/input_a_r1 ), 
    .A1(\OUT_PULSE_CHECK/input_a_r ), .B0(out_pulse_type_5), 
    .A0(out_pulse_type_3), .F0(\OUT_PULSE_CHECK/n10 ), 
    .F1(\OUT_PULSE_CHECK/n6932 ));
  SMART_ABS_RS485_COM_M_SLICE_346 \SMART_ABS/RS485_COM_M/SLICE_346 ( 
    .C1(\SMART_ABS/RS485_COM_M/rbaud_reg_4 ), 
    .B1(\SMART_ABS/RS485_COM_M/rbaud_reg_1 ), 
    .A1(\SMART_ABS/RS485_COM_M/rbaud_reg_0 ), 
    .D0(\SMART_ABS/RS485_COM_M/n4_adj_1028 ), 
    .C0(\SMART_ABS/RS485_COM_M/rbaud_reg_3 ), 
    .B0(\SMART_ABS/RS485_COM_M/rbaud_reg_2 ), .A0(\SMART_ABS/RS485_COM_M/n5 ), 
    .F0(\SMART_ABS/RS485_COM_M/clk_in_c_enable_193 ), 
    .F1(\SMART_ABS/RS485_COM_M/n7145 ));
  SMG_SCAN_SLICE_347 \SMG_SCAN/SLICE_347 ( .D1(\SMG_SCAN/cnt_12 ), 
    .C1(\SMG_SCAN/cnt_10 ), .B1(\SMG_SCAN/cnt_11 ), .A1(\SMG_SCAN/cnt_5 ), 
    .D0(\SMG_SCAN/cnt_1 ), .C0(\SMG_SCAN/cnt_4 ), .B0(\SMG_SCAN/cnt_14 ), 
    .A0(\SMG_SCAN/cnt_0 ), .F0(\SMG_SCAN/n6591 ), .F1(\SMG_SCAN/n6589 ));
  DSP_COM_SLICE_348 \DSP_COM/SLICE_348 ( .B1(BUS_D_out_7), .A1(BUS_A_c_0), 
    .B0(BUS_A_c_1), .A0(BUS_A_c_2), .F0(\DSP_COM/n7129 ), 
    .F1(\DSP_COM/n9_adj_1078 ));
  OUT_PULSE_CHECK_SLICE_349 \OUT_PULSE_CHECK/SLICE_349 ( 
    .B1(\OUT_PULSE_CHECK/input_z_dir ), .A1(\OUT_PULSE_CHECK/input_f_dir ), 
    .B0(\OUT_PULSE_CHECK/state_0 ), .A0(\OUT_PULSE_CHECK/state_2__N_943 ), 
    .F0(\OUT_PULSE_CHECK/n7139 ), .F1(\OUT_PULSE_CHECK/clk_in_c_enable_43 ));
  BUS_D_5_ \BUS_D[5]_I ( .PADDI(BUS_D_out_5), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_5), .BUSD5(BUS_D[5]));
  BUS_D_6_ \BUS_D[6]_I ( .PADDI(BUS_D_out_6), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_6), .BUSD6(BUS_D[6]));
  BUS_D_7_ \BUS_D[7]_I ( .PADDI(BUS_D_out_7), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_7), .BUSD7(BUS_D[7]));
  BUS_D_4_ \BUS_D[4]_I ( .PADDI(BUS_D_out_4), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_4), .BUSD4(BUS_D[4]));
  BUS_D_3_ \BUS_D[3]_I ( .PADDI(BUS_D_out_3), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_3), .BUSD3(BUS_D[3]));
  BUS_D_2_ \BUS_D[2]_I ( .PADDI(BUS_D_out_2), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_2), .BUSD2(BUS_D[2]));
  BUS_D_1_ \BUS_D[1]_I ( .PADDI(BUS_D_out_1), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_1), .BUSD1(BUS_D[1]));
  BUS_D_0_ \BUS_D[0]_I ( .PADDI(BUS_D_out_0), .PADDT(\DSP_COM/output_en ), 
    .PADDO(output_bus_data_0), .BUSD0(BUS_D[0]));
  DEBUG_LED DEBUG_LED_I( .PADDO(DEBUG_LED_c), .DEBUG_LED(DEBUG_LED));
  SMG_LED_12_ \SMG_LED[12]_I ( .PADDO(SMG_LED_c_12), .SMGLED12(SMG_LED[12]));
  SMG_LED_11_ \SMG_LED[11]_I ( .PADDO(SMG_LED_c_11), .SMGLED11(SMG_LED[11]));
  SMG_LED_10_ \SMG_LED[10]_I ( .PADDO(SMG_LED_c_10), .SMGLED10(SMG_LED[10]));
  SMG_LED_9_ \SMG_LED[9]_I ( .PADDO(SMG_LED_c_9), .SMGLED9(SMG_LED[9]));
  SMG_LED_8_ \SMG_LED[8]_I ( .PADDO(SMG_LED_c_8), .SMGLED8(SMG_LED[8]));
  SMG_LED_7_ \SMG_LED[7]_I ( .PADDO(SMG_LED_c_7), .SMGLED7(SMG_LED[7]));
  SMG_LED_6_ \SMG_LED[6]_I ( .PADDO(SMG_LED_c_6), .SMGLED6(SMG_LED[6]));
  SMG_LED_5_ \SMG_LED[5]_I ( .PADDO(SMG_LED_c_5), .SMGLED5(SMG_LED[5]));
  SMG_LED_4_ \SMG_LED[4]_I ( .PADDO(SMG_LED_c_4), .SMGLED4(SMG_LED[4]));
  SMG_LED_3_ \SMG_LED[3]_I ( .PADDO(SMG_LED_c_3), .SMGLED3(SMG_LED[3]));
  SMG_LED_2_ \SMG_LED[2]_I ( .PADDO(SMG_LED_c_2), .SMGLED2(SMG_LED[2]));
  SMG_LED_1_ \SMG_LED[1]_I ( .PADDO(SMG_LED_c_1), .SMGLED1(SMG_LED[1]));
  SMG_LED_0_ \SMG_LED[0]_I ( .PADDO(SMG_LED_c_0), .SMGLED0(SMG_LED[0]));
  DO1 DO1_I( .PADDO(DO1_c_0), .DO1(DO1));
  DO2 DO2_I( .PADDO(DO2_c_1), .DO2(DO2));
  DO3 DO3_I( .PADDO(DO3_c_2), .DO3(DO3));
  DO4 DO4_I( .PADDO(DO4_c_3), .DO4(DO4));
  UART_TX UART_TX_I( .PADDO(UART_TX_c), .UART_TX(UART_TX));
  TR_DIR TR_DIR_I( .PADDO(TR_DIR_c), .TR_DIR(TR_DIR));
  A_PHASE A_PHASE_I( .PADDO(GND_net), .A_PHASE(A_PHASE));
  B_PHASE B_PHASE_I( .PADDO(GND_net), .B_PHASE(B_PHASE));
  Z_PHASE Z_PHASE_I( .PADDO(GND_net), .Z_PHASE(Z_PHASE));
  clk_in clk_in_I( .PADDI(clk_in_c), .clk_in(clk_in));
  rst_n_in rst_n_in_I( .PADDI(rst_n_in_c), .rst_n_in(rst_n_in));
  BUS_WE BUS_WE_I( .PADDI(BUS_WE_c), .BUS_WE(BUS_WE));
  BUS_CS BUS_CS_I( .PADDI(BUS_CS_c), .BUS_CS(BUS_CS));
  BUS_A_4_ \BUS_A[4]_I ( .PADDI(BUS_A_c_4), .BUSA4(BUS_A[4]));
  BUS_A_3_ \BUS_A[3]_I ( .PADDI(BUS_A_c_3), .BUSA3(BUS_A[3]));
  BUS_A_2_ \BUS_A[2]_I ( .PADDI(BUS_A_c_2), .BUSA2(BUS_A[2]));
  BUS_A_1_ \BUS_A[1]_I ( .PADDI(BUS_A_c_1), .BUSA1(BUS_A[1]));
  BUS_A_0_ \BUS_A[0]_I ( .PADDI(BUS_A_c_0), .BUSA0(BUS_A[0]));
  ENC_U ENC_U_I( .PADDI(ENC_U_c), .ENC_U(ENC_U));
  ENC_V ENC_V_I( .PADDI(ENC_V_c), .ENC_V(ENC_V));
  UVW UVW_I( .PADDI(UVW_c), .UVW(UVW));
  ABZ ABZ_I( .PADDI(ABZ_c), .ABZ(ABZ));
  DI1 DI1_I( .PADDI(DI1_c), .DI1(DI1));
  DI2 DI2_I( .PADDI(DI2_c), .DI2(DI2));
  DI3 DI3_I( .PADDI(DI3_c), .DI3(DI3));
  DI4 DI4_I( .PADDI(DI4_c), .DI4(DI4));
  K_MODE K_MODE_I( .PADDI(K_MODE_c), .K_MODE(K_MODE));
  K_UP K_UP_I( .PADDI(K_UP_c), .K_UP(K_UP));
  K_DOWN K_DOWN_I( .PADDI(K_DOWN_c), .K_DOWN(K_DOWN));
  K_SET K_SET_I( .PADDI(K_SET_c), .K_SET(K_SET));
  TMR_CLK TMR_CLK_I( .PADDI(TMR_CLK_c), .TMR_CLK(TMR_CLK));
  TMR_DIR TMR_DIR_I( .PADDI(TMR_DIR_c), .TMR_DIR(TMR_DIR));
  UART_RX UART_RX_I( .PADDI(UART_RX_c), .UART_RX(UART_RX));
  GSR_INST GSR_INST( .GSRNET(rst_n_in_c));
  VHI VHI_INST( .Z(VCCI));
  PUR PUR_INST( .PUR(VCCI));
endmodule

module OUT_PULSE_CHECK_SLICE_0 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i8 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \OUT_PULSE_CHECK/add_332_9 ( .A0(A0), .B0(B0), .C0(C0), .D0(D0), 
    .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), .CO1());

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module vcc ( output PWR1 );

  VHI INST1( .Z(PWR1));
endmodule

module gnd ( output PWR0 );

  VLO INST1( .Z(PWR0));
endmodule

module ccu2 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h56aa;
  defparam inst1.INIT1 = 16'h56aa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module OUT_PULSE_CHECK_SLICE_1 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i6 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \OUT_PULSE_CHECK/add_332_7 ( .A0(A0), .B0(B0), .C0(C0), .D0(D0), 
    .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module OUT_PULSE_CHECK_SLICE_2 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i4 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu2 \OUT_PULSE_CHECK/add_332_5 ( .A0(A0), .B0(B0), .C0(C0), .D0(D0), 
    .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (D0 => F1) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module OUT_PULSE_CHECK_SLICE_3 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, 
    CE, CLK, FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i2 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \OUT_PULSE_CHECK/input_cnt__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20001 \OUT_PULSE_CHECK/add_332_3 ( .A0(A0), .B0(B0), .C0(C0), .D0(GNDI), 
    .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(F0), .S1(F1), .CO1(FCO));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20001 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h8787;
  defparam inst1.INIT1 = 16'h56aa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SLICE_4 ( input D1, C1, B1, A1, M1, M0, CE, CLK, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre0002 \KEY_CHECK/k_set_rr_52 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0002 \KEY_CHECK/k_set_r_48 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20003 \OUT_PULSE_CHECK/add_332_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0002 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3BX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .PD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module ccu20003 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0bff;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module DSP_COM_SLICE_5 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i27 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20005 \DSP_COM/cnt_487_add_4_29 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module vmuxregsre0004 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3IY INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "ENABLED";
endmodule

module ccu20005 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module DSP_COM_SLICE_6 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i26 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i25 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_27 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20006 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hfaaa;
  defparam inst1.INIT1 = 16'hfaaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module DSP_COM_SLICE_7 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i24 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i23 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_25 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_8 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i22 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i21 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_23 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_9 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i20 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_10 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_11 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_12 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_13 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_14 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_15 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_16 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_17 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_18 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, Q0, 
    F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \DSP_COM/cnt_487__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \DSP_COM/cnt_487_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), .D0(GNDI), 
    .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), .S1(F1), 
    .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_19 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \DSP_COM/cnt_487__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20007 \DSP_COM/cnt_487_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20007 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h0555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_20 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_112_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module inverter ( input I, output Z );

  INV INST1( .A(I), .Z(Z));
endmodule

module ccu20008 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h5aaa;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_21 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_112_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_22 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i10 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i9 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_94_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_23 ( input D0, C0, B0, A0, M1, M0, CE, CLK, 
    FCI, output Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i16 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i15 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20009 \SMART_ABS/RS485_COM_M/equal_74_8 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(), 
    .S1(F1), .CO1());

  specify
    (D0 => F1) = (0:0:0,0:0:0);
    (C0 => F1) = (0:0:0,0:0:0);
    (B0 => F1) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20009 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9009;
  defparam inst1.INIT1 = 16'hFFFF;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_24 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_94_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_25 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_94_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_26 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i6 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i5 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMART_ABS/RS485_COM_M/r_bit_cnt_493_add_4_7 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_27 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMART_ABS/RS485_COM_M/r_bit_cnt_493_add_4_5 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_28 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMART_ABS/RS485_COM_M/r_bit_cnt_493_add_4_3 ( .A0(A0), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), 
    .S0(F0), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_29 ( input C1, B1, A1, DI1, CE, LSR, CLK, 
    output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_bit_cnt_493__i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20010 \SMART_ABS/RS485_COM_M/r_bit_cnt_493_add_4_1 ( .A0(GNDI), .B0(GNDI), 
    .C0(GNDI), .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(GNDI), .CI(GNDI), 
    .S0(), .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20010 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h8787;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_30 ( input D1, C1, B1, A1, M1, M0, CE, CLK, 
    output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i12 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i11 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20011 \SMART_ABS/RS485_COM_M/equal_74_0 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(GNDI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20011 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h9009;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_31 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_94_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_32 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1 );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i8 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i7 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_112_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_33 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i12 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i11 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_94_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_34 ( input A0, DI0, CE, LSR, CLK, FCI, 
    output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i13 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20012 \SMART_ABS/RS485_COM_M/add_94_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20012 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h5aaa;
  defparam inst1.INIT1 = 16'h0000;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_35 ( input A1, DI1, CE, LSR, CLK, output F1, 
    Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  ccu20013 \SMART_ABS/RS485_COM_M/add_112_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20013 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'hF000;
  defparam inst1.INIT1 = 16'h5555;
  defparam inst1.INJECT1_0 = "NO";
  defparam inst1.INJECT1_1 = "NO";
endmodule

module SMART_ABS_RS485_COM_M_SLICE_36 ( input A1, DI1, CE, LSR, CLK, output F1, 
    Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i0 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20013 \SMART_ABS/RS485_COM_M/add_94_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_37 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, LSR_NOTIN, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i4 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/error_test__i3 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), 
    .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_112_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_38 ( input A1, A0, DI1, DI0, CE, LSR, CLK, 
    FCI, output F0, Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i2 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval_reg__i1 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20008 \SMART_ABS/RS485_COM_M/add_94_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_39 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, FCI, output Q0, Q1, FCO );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i14 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i13 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  ccu20014 \SMART_ABS/RS485_COM_M/equal_74_7 ( .A0(A0), .B0(B0), .C0(C0), 
    .D0(D0), .A1(A1), .B1(B1), .C1(C1), .D1(D1), .CI(FCI), .S0(), .S1(), 
    .CO1(FCO));

  specify
    (D1 => FCO) = (0:0:0,0:0:0);
    (C1 => FCO) = (0:0:0,0:0:0);
    (B1 => FCO) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (D0 => FCO) = (0:0:0,0:0:0);
    (C0 => FCO) = (0:0:0,0:0:0);
    (B0 => FCO) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module ccu20014 ( input A0, B0, C0, D0, A1, B1, C1, D1, CI, output S0, S1, CO1 );

  CCU2D inst1( .CIN(CI), .A0(A0), .B0(B0), .C0(C0), .D0(D0), .A1(A1), .B1(B1), 
    .C1(C1), .D1(D1), .S0(S0), .S1(S1), .COUT(CO1));
  defparam inst1.INIT0 = 16'h9009;
  defparam inst1.INIT1 = 16'h9009;
  defparam inst1.INJECT1_0 = "YES";
  defparam inst1.INJECT1_1 = "YES";
endmodule

module SMG_SCAN_SLICE_40 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_41 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_42 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_43 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_44 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_45 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_46 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20007 \SMG_SCAN/cnt_488_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_47 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20005 \SMG_SCAN/cnt_488_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_48 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_49 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_50 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \SMG_SCAN/cnt_488__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_488__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \SMG_SCAN/cnt_488_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_51 ( input A0, DI0, LSR, CLK, FCI, output F0, Q0 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i19 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20005 \KEY_CHECK/cnt_490_add_4_21 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(GNDI), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(), .CO1());
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_52 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i18 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i17 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_19 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_53 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i16 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i15 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_17 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_54 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i14 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_15 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_55 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_13 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_56 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_11 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_57 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_9 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_58 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_7 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_59 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_5 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_60 ( input A1, A0, DI1, DI0, LSR, CLK, FCI, output F0, 
    Q0, F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \KEY_CHECK/cnt_490__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  ccu20006 \KEY_CHECK/cnt_490_add_4_3 ( .A0(A0), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(FCI), .S0(F0), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (A0 => F1) = (0:0:0,0:0:0);
    (A0 => FCO) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    (FCI => F0) = (0:0:0,0:0:0);
    (FCI => F1) = (0:0:0,0:0:0);
    (FCI => FCO) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_61 ( input A1, DI1, LSR, CLK, output F1, Q1, FCO );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, LSR_dly;

  vmuxregsre0004 \KEY_CHECK/cnt_490__i0 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  ccu20007 \KEY_CHECK/cnt_490_add_4_1 ( .A0(GNDI), .B0(GNDI), .C0(GNDI), 
    .D0(GNDI), .A1(A1), .B1(GNDI), .C1(GNDI), .D1(GNDI), .CI(GNDI), .S0(), 
    .S1(F1), .CO1(FCO));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (A1 => F1) = (0:0:0,0:0:0);
    (A1 => FCO) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_62 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut4 \DSP_COM/i5999_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40015 \DSP_COM/i1_2_lut_4_lut_adj_154 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \DSP_COM/sec_signal_182 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut4 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40015 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F80) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_63 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40016 \DSP_COM/i3_2_lut_adj_139 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40017 \DSP_COM/i1_4_lut_adj_104 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0002 \DSP_COM/out_IO_signal__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40016 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40017 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_64 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40018 \DSP_COM/i1_2_lut_3_lut_4_lut_adj_107 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_125 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0002 \DSP_COM/out_IO_signal__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40018 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0200) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_65 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40016 \DSP_COM/i3_2_lut_adj_103 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40017 \DSP_COM/i1_4_lut_adj_124 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0002 \DSP_COM/out_IO_signal__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_66 ( input C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40019 i1_2_lut_3_lut( .A(A1), .B(B1), .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40017 \DSP_COM/i1_4_lut_adj_123 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0002 \DSP_COM/out_IO_signal__i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40019 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_69 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40020 \DSP_COM/i1_2_lut_rep_127 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40021 \DSP_COM/i1_3_lut_4_lut_adj_91 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \DSP_COM/output_en_180 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40020 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40021 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7770) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module OUT_PULSE_CHECK_SLICE_82 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40022 \OUT_PULSE_CHECK/input_a_r_bdd_4_lut_6298 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40023 \OUT_PULSE_CHECK/n6932_bdd_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \OUT_PULSE_CHECK/input_f_dir_92 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40022 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4A72) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40023 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module OUT_PULSE_CHECK_SLICE_83 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, 
    M0, CE, CLK, output OFX0, Q0 );
  wire   \OUT_PULSE_CHECK/SLICE_83/OUT_PULSE_CHECK/SLICE_83_K1_H1 , 
         \OUT_PULSE_CHECK/SLICE_83/OUT_PULSE_CHECK/i6391/GATE_H0 , VCCI, GNDI, 
         DI0_dly, CLK_dly, CE_dly;

  lut40024 \OUT_PULSE_CHECK/SLICE_83_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\OUT_PULSE_CHECK/SLICE_83/OUT_PULSE_CHECK/SLICE_83_K1_H1 ));
  lut40025 \OUT_PULSE_CHECK/i6391/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\OUT_PULSE_CHECK/SLICE_83/OUT_PULSE_CHECK/i6391/GATE_H0 ));
  vmuxregsre \OUT_PULSE_CHECK/input_z_dir_91 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \OUT_PULSE_CHECK/SLICE_83_K0K1MUX ( 
    .D0(\OUT_PULSE_CHECK/SLICE_83/OUT_PULSE_CHECK/i6391/GATE_H0 ), 
    .D1(\OUT_PULSE_CHECK/SLICE_83/OUT_PULSE_CHECK/SLICE_83_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40024 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2920) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40025 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0DA8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module selmux2 ( input D0, D1, SD, output Z );

  MUX21 INST1( .D0(D0), .D1(D1), .SD(SD), .Z(Z));
endmodule

module OUT_PULSE_CHECK_SLICE_84 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly;

  lut40026 \OUT_PULSE_CHECK/i1738_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40027 \OUT_PULSE_CHECK/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \OUT_PULSE_CHECK/state_FSM_i0 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \OUT_PULSE_CHECK/state_FSM_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40026 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0EA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40027 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCE8A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module OUT_PULSE_CHECK_SLICE_85 ( input C1, B1, A1, C0, B0, A0, DI0, M1, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, M1_dly;

  lut40028 \OUT_PULSE_CHECK/i2_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40029 \OUT_PULSE_CHECK/i1746_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \OUT_PULSE_CHECK/input_a_r1_88 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0002 \OUT_PULSE_CHECK/state_FSM_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40028 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBABA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40029 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1010) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_86 ( input D1, C1, B1, A1, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40030 \SMART_ABS/RS485_COM_M/i4001_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40031 \SMART_ABS/RS485_COM_M/i4094_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/com_error__i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40030 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40031 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEEEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_u_crc_SLICE_87 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_37 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40032 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6996) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module vmuxregsre0033 ( input D0, D1, SD, SP, CK, LSR, output Q );

  FL1P3DX INST01( .D0(D0), .D1(D1), .SP(SP), .CK(CK), .SD(SD), .CD(LSR), .Q(Q));
  defparam INST01.GSR = "DISABLED";
endmodule

module SMART_ABS_RS485_COM_M_u_crc_SLICE_88 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_22 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_19 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_u_crc_SLICE_89 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_28 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_25 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_u_crc_SLICE_90 ( input D1, C1, B1, A1, D0, C0, B0, 
    A0, DI1, DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_34 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i9_4_lut_adj_31 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0033 \SMART_ABS/RS485_COM_M/u_crc/crc_out_i0_i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_91 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40034 \SMART_ABS/RS485_COM_M/i1_3_lut_4_lut_adj_40 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40035 \SMART_ABS/RS485_COM_M/i6209_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/i__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/i__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40034 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0770) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40035 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h020F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_92 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40036 \SMART_ABS/RS485_COM_M/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40037 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_67 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/i__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40036 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40037 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCFEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_93 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, M0, CE, LSR, CLK, output OFX0, Q0 );
  wire   \SMART_ABS/RS485_COM_M/SLICE_93/SMART_ABS/RS485_COM_M/SLICE_93_K1_H1 , 
         \SMART_ABS/RS485_COM_M/SLICE_93/SMART_ABS/RS485_COM_M/i6362/GATE_H0 , 
         VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40038 \SMART_ABS/RS485_COM_M/SLICE_93_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\SMART_ABS/RS485_COM_M/SLICE_93/SMART_ABS/RS485_COM_M/SLICE_93_K1_H1 ));
  lut40039 \SMART_ABS/RS485_COM_M/i6362/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\SMART_ABS/RS485_COM_M/SLICE_93/SMART_ABS/RS485_COM_M/i6362/GATE_H0 ));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/i__i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \SMART_ABS/RS485_COM_M/SLICE_93_K0K1MUX ( 
    .D0(\SMART_ABS/RS485_COM_M/SLICE_93/SMART_ABS/RS485_COM_M/i6362/GATE_H0 ), 
    .D1(\SMART_ABS/RS485_COM_M/SLICE_93/SMART_ABS/RS485_COM_M/SLICE_93_K1_H1 ), 
    .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40038 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h206A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40039 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h20F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_95 ( input B1, A1, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40040 \SMART_ABS/RS485_COM_M/i5098_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 \SMART_ABS/RS485_COM_M/i5096_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rbaud_reg_492__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rbaud_reg_492__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40040 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6666) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40041 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_96 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40042 \SMART_ABS/RS485_COM_M/i5112_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40043 \SMART_ABS/RS485_COM_M/i5105_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rbaud_reg_492__i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rbaud_reg_492__i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40042 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h78F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40043 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7878) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_97 ( input B1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_132 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \SMART_ABS/RS485_COM_M/i5119_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rbaud_reg_492__i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_129 ( input M1, M0, CE, CLK, output F0, Q0, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40044 i1( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i64 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i63 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40044 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_130 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40016 \KEY_CHECK/k_mode_rr_I_0_60_i2_2_lut_rep_130 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40045 \KEY_CHECK/i5_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i66 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i65 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40045 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_131 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40031 \SMG_SCAN/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40046 \SMG_SCAN/i3_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i68 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i67 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40046 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_132 ( input B1, A1, D0, C0, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40016 \SMG_SCAN/i2471_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_39 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i70 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i69 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_133 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_36 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_35 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i72 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i71 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_134 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_33 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_32 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i74 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i73 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_135 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_30 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_29 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i76 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i75 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_136 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_27 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_24 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i78 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i77 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_137 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut_adj_21 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_20 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i80 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i79 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_138 ( input B1, A1, A0, DI1, DI0, CE, LSR, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40040 \SMART_ABS/RS485_COM_M/i1081_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 \SMART_ABS/RS485_COM_M/i1317_1_lut ( .A(A0), .B(GNDI), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/tbaud_reg_i0_i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/tbaud_reg_i0_i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_139 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40042 \SMART_ABS/RS485_COM_M/i1095_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40043 \SMART_ABS/RS485_COM_M/i1088_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/tbaud_reg_i0_i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/tbaud_reg_i0_i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_140 ( input B1, A1, D0, C0, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i1083_2_lut_rep_118 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40015 \SMART_ABS/RS485_COM_M/i1102_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/tbaud_reg_i0_i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_141 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i6_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0002 \SMART_ABS/RS485_COM_M/uart_rx_reg_i1 ( .D0(M1_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0002 \SMART_ABS/RS485_COM_M/uart_rx_reg_i0 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_142 ( input D1, C1, B1, A1, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40047 \SMG_SCAN/mux_18_Mux_1_i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40048 \SMG_SCAN/mux_18_Mux_0_i7_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40047 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0ACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40048 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_143 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40047 \SMG_SCAN/mux_18_Mux_3_i7_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40047 \SMG_SCAN/mux_18_Mux_2_i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \SMG_SCAN/smg_data_i0_i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_144 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 \SMG_SCAN/mux_18_Mux_5_i7_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \SMG_SCAN/mux_18_Mux_4_i7_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \SMG_SCAN/smg_data_i0_i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_145 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40048 \SMG_SCAN/mux_18_Mux_7_i7_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \SMG_SCAN/mux_18_Mux_6_i7_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  vmuxregsre \SMG_SCAN/smg_data_i0_i8 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_146 ( input C1, B1, A1, A0, DI1, DI0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40049 \SMG_SCAN/i6227_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 \SMG_SCAN/i2447_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre \SMG_SCAN/smg_data_i0_i10 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i9 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40049 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7F7) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_147 ( input C1, B1, A1, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40050 \SMG_SCAN/i1_2_lut_3_lut_adj_16 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \SMG_SCAN/i2_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \SMG_SCAN/smg_data_i0_i12 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMG_SCAN/smg_data_i0_i11 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40050 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEFEF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_148 ( input B1, A1, C0, B0, A0, DI0, CE, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40031 \SMG_SCAN/i1954_2_lut_rep_125 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40051 \SMG_SCAN/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \SMG_SCAN/smg_data_i0_i13 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40051 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_149 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly;

  lut4 \SMG_SCAN/i6025_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40052 \SMG_SCAN/i6199_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMG_SCAN/clk_div_25 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40052 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0002) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_150 ( input B1, A1, A0, DI1, DI0, CE, LSR, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40040 \SMG_SCAN/i5076_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40041 \SMG_SCAN/i5074_1_lut ( .A(A0), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(F0));
  vmuxregsre0004 \SMG_SCAN/cnt_main_489__i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMG_SCAN/cnt_main_489__i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_151 ( input D1, C1, B1, A1, C0, B0, A0, DI0, CE, LSR, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40053 \SMG_SCAN/i1_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40043 \SMG_SCAN/i5083_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMG_SCAN/cnt_main_489__i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40053 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h10F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_152 ( input B1, A1, D0, C0, B0, A0, DI0, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly;

  lut40054 \DSP_COM/i1_2_lut_adj_126 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40055 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_56 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/tr_dir_123 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40054 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2222) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40055 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCDC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_153 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI0, CE, CLK, output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40056 \SMART_ABS/RS485_COM_M/i1_2_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40057 \SMART_ABS/RS485_COM_M/i3074_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre0002 \SMART_ABS/RS485_COM_M/uart_tx_127 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40056 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40057 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD2E9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_154 ( input C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly;

  lut40058 \SMART_ABS/RS485_COM_M/i200_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40059 \DSP_COM/i198_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre0002 \DSP_COM/begin_reg__i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0002 \DSP_COM/begin_reg__i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40058 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5454) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40059 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_155 ( input B1, A1, C0, B0, A0, M1, M0, CLK, output F0, Q0, F1, 
    Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40031 \SMART_ABS/RS485_COM_M/i1_2_lut_adj_76 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40060 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_4_lut_adj_74 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \ENCODER_CHECK/input_u_r1_23 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \ENCODER_CHECK/input_u_r_22 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40060 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6A6A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_156 ( input B1, A1, B0, A0, M1, M0, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i5970_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40020 \SMART_ABS/RS485_COM_M/i1_2_lut_adj_58 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \ENCODER_CHECK/input_v_r1_25 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \ENCODER_CHECK/input_v_r_24 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_157 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40061 \KEY_CHECK/n4643_bdd_3_lut_6321_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40062 \KEY_CHECK/i3822_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \KEY_CHECK/key_data__i2 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \KEY_CHECK/key_data__i1 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40061 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7F77) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40062 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h60FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module KEY_CHECK_SLICE_158 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40063 \KEY_CHECK/i3842_3_lut_4_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40061 \KEY_CHECK/n4643_bdd_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \KEY_CHECK/key_data__i4 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \KEY_CHECK/key_data__i3 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40063 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h60F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_159 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_122 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_106 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_160 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_120 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_121 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_161 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_118 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_119 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_162 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_115 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_117 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/out_pulse_type_i0_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_163 ( input C1, B1, A1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_163/DSP_COM/SLICE_163_K1_H1 , 
         \DSP_COM/SLICE_163/DSP_COM/i6047/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_163_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_163/DSP_COM/SLICE_163_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6047/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/SLICE_163/DSP_COM/i6047/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_163_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_163/DSP_COM/i6047/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_163/DSP_COM/SLICE_163_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40064 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE4E4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40065 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCACA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_164 ( input C1, B1, A1, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40048 \DSP_COM/time_interval_1__bdd_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40048 \DSP_COM/n7065_bdd_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \DSP_COM/output_bus_data_i0_i1 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_165 ( input C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_165/DSP_COM/SLICE_165_K1_H1 , 
         \DSP_COM/SLICE_165/DSP_COM/i6053/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_165_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_165/DSP_COM/SLICE_165_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40066 \DSP_COM/i6053/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/SLICE_165/DSP_COM/i6053/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_165_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_165/DSP_COM/i6053/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_165/DSP_COM/SLICE_165_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40066 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD1C0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_166 ( input C1, B1, A1, D0, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_166/DSP_COM/SLICE_166_K1_H1 , 
         \DSP_COM/SLICE_166/DSP_COM/i6056/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_166_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_166/DSP_COM/SLICE_166_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40067 \DSP_COM/i6056/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/SLICE_166/DSP_COM/i6056/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i3 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_166_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_166/DSP_COM/i6056/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_166/DSP_COM/SLICE_166_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40067 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCA0A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_167 ( input C1, B1, A1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_167/DSP_COM/SLICE_167_K1_H1 , 
         \DSP_COM/SLICE_167/DSP_COM/i6059/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_167_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_167/DSP_COM/SLICE_167_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6059/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/SLICE_167/DSP_COM/i6059/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_167_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_167/DSP_COM/i6059/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_167/DSP_COM/SLICE_167_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_168 ( input C1, B1, A1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_168/DSP_COM/SLICE_168_K1_H1 , 
         \DSP_COM/SLICE_168/DSP_COM/i6065/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_168_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_168/DSP_COM/SLICE_168_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6065/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/SLICE_168/DSP_COM/i6065/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i5 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_168_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_168/DSP_COM/i6065/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_168/DSP_COM/SLICE_168_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_169 ( input C1, B1, A1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_169/DSP_COM/SLICE_169_K1_H1 , 
         \DSP_COM/SLICE_169/DSP_COM/i6068/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_169_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_169/DSP_COM/SLICE_169_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6068/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/SLICE_169/DSP_COM/i6068/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_169_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_169/DSP_COM/i6068/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_169/DSP_COM/SLICE_169_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_170 ( input C1, B1, A1, C0, B0, A0, DI0, M0, CE, CLK, 
    output OFX0, Q0 );
  wire   GNDI, \DSP_COM/SLICE_170/DSP_COM/SLICE_170_K1_H1 , 
         \DSP_COM/SLICE_170/DSP_COM/i6071/GATE_H0 , VCCI, DI0_dly, CLK_dly, 
         CE_dly;

  lut40064 \DSP_COM/SLICE_170_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/SLICE_170/DSP_COM/SLICE_170_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6071/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/SLICE_170/DSP_COM/i6071/GATE_H0 ));
  vmuxregsre \DSP_COM/output_bus_data_i0_i7 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  selmux2 \DSP_COM/SLICE_170_K0K1MUX ( 
    .D0(\DSP_COM/SLICE_170/DSP_COM/i6071/GATE_H0 ), 
    .D1(\DSP_COM/SLICE_170/DSP_COM/SLICE_170_K1_H1 ), .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_171 ( input D1, C1, B1, A1, DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, LSR_NOTIN, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut4 \DSP_COM/i5997_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40068 \SMART_ABS/RS485_COM_M/n7385\000/BUF1/BUF1 ( .A(GNDI), .B(GNDI), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/r_begin_132 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_NOTIN), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  inverter LSR_INVERTERIN( .I(LSR_dly), .Z(LSR_NOTIN));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40068 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_172 ( input D1, C1, B1, A1, DI0, CE, LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut4 \ENCODER_CHECK/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40068 m1_lut( .A(GNDI), .B(GNDI), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_485_begin_124 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_173 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3932_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3841_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i1 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i0 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_174 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3934_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3933_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i3 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i2 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_175 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3936_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3935_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i5 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i4 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_176 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3938_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3937_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i7 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i6 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_177 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3940_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3939_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i9 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i8 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_178 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3942_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3941_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i11 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i10 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_179 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3944_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3943_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i13 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i12 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_180 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3946_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3945_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i15 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i14 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_181 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3948_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3947_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i17 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i16 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_182 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3950_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3949_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i19 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i18 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_183 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3952_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3951_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i21 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i20 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_184 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3954_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3953_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i23 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i22 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_185 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3958_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3957_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i33 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i32 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_186 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3960_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3959_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i35 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i34 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_187 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3962_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3961_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i37 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i36 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_188 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3964_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3963_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i39 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i38 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_189 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3966_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3965_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i41 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i40 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_190 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3968_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3967_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i43 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i42 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_191 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3970_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3969_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i45 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i44 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_192 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3972_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3971_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i47 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i46 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_193 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3974_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3973_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i49 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i48 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_194 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3976_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3975_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i51 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i50 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_195 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3978_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3977_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i53 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i52 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_196 ( input B1, A1, B0, A0, DI1, DI0, CE, 
    LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i3980_2_lut ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \SMART_ABS/RS485_COM_M/i3979_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i55 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i54 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_197 ( input D1, C1, B1, A1, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_38 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40016 \SMART_ABS/RS485_COM_M/i3981_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i56 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_198 ( input C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \SMART_ABS/RS485_COM_M/i3988_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \SMART_ABS/RS485_COM_M/i3990_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/rx_data_i58 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/rx_data_i57 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40069 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_199 ( input D1, C1, B1, A1, C0, B0, A0, DI0, 
    CE, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_23 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40069 \SMART_ABS/RS485_COM_M/i3986_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/rx_data_i59 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_200 ( input D1, C1, B1, A1, B0, A0, DI0, CE, 
    LSR, CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly, LSR_dly;

  lut40032 \SMART_ABS/RS485_COM_M/u_crc/i7_4_lut_adj_26 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40016 \SMART_ABS/RS485_COM_M/i3982_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/rx_data_i60 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_201 ( input C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40069 \SMART_ABS/RS485_COM_M/i3927_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \SMART_ABS/RS485_COM_M/i3984_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/rx_data_i62 ( .D0(VCCI), .D1(DI1_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/rx_data_i61 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_202 ( input B1, A1, C0, B0, A0, DI0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40031 \SMART_ABS/RS485_COM_M/i1_2_lut_adj_77 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40069 \SMART_ABS/RS485_COM_M/i3895_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/rx_data_i63 ( .D0(VCCI), .D1(DI0_dly), 
    .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_203 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_99 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_85 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg0_data_i0_i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg0_data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_204 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_97 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_98 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg0_data_i0_i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg0_data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_205 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_90 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_96 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg0_data_i0_i5 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg0_data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_206 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_87 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_89 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg0_data_i0_i7 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg0_data_i0_i6 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_207 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_86 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_92 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg1_data_i0_i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg1_data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_208 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_100 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_102 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg1_data_i0_i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg1_data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_209 ( input B1, A1, D0, C0, B0, A0, DI0, CE, CLK, output 
    F0, Q0, F1 );
  wire   GNDI, VCCI, DI0_dly, CLK_dly, CE_dly;

  lut40016 \DSP_COM/i3_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40017 \DSP_COM/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg1_data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_210 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_114 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_127 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg1_data_i0_i6 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg1_data_i0_i5 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_211 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI0, CE, CLK, 
    output F0, Q0, F1 );
  wire   VCCI, GNDI, DI0_dly, CLK_dly, CE_dly;

  lut40070 \DSP_COM/i2_3_lut_4_lut_adj_93 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_113 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg1_data_i0_i7 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40070 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF7F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_212 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_152 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_116 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg2_data_i0_i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg2_data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_213 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_150 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_151 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg2_data_i0_i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg2_data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_214 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_148 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_149 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg2_data_i0_i5 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg2_data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_215 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_146 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_147 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg2_data_i0_i7 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg2_data_i0_i6 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_216 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_145 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_153 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg3_data_i0_i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg3_data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_217 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_79 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_144 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg3_data_i0_i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg3_data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_218 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_142 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_143 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg3_data_i0_i5 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg3_data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_219 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_138 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_141 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg3_data_i0_i7 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg3_data_i0_i6 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_220 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_137 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 i1_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg4_data_i0_i1 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg4_data_i0_i0 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_221 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_135 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_136 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg4_data_i0_i3 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg4_data_i0_i2 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_222 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 i1_4_lut_adj_155( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_134 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg4_data_i0_i5 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg4_data_i0_i4 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_223 ( input D1, C1, B1, A1, D0, C0, B0, A0, DI1, DI0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, DI1_dly, CLK_dly, DI0_dly, CE_dly;

  lut40017 \DSP_COM/i1_4_lut_adj_129 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40017 \DSP_COM/i1_4_lut_adj_131 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/smg4_data_i0_i7 ( .D0(VCCI), .D1(DI1_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/smg4_data_i0_i6 ( .D0(VCCI), .D1(DI0_dly), .SD(VCCI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_224 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40032 \SMART_ABS/RS485_COM_M/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40071 \SMART_ABS/RS485_COM_M/i4_4_lut_4_lut_adj_80 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i1 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i0 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40071 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9669) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_225 ( input C1, B1, A1, D0, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut_rep_75_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40071 \SMART_ABS/RS485_COM_M/i2_3_lut_rep_73_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i3 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i2 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40072 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h9696) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_226 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    DI1, DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40032 \SMART_ABS/RS485_COM_M/i3_3_lut_rep_82_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40071 \SMART_ABS/RS485_COM_M/i4_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i5 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i4 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_227 ( input D1, C1, B1, A1, C0, B0, A0, DI1, 
    DI0, CE, LSR, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, DI1_dly, CLK_dly, DI0_dly, CE_dly, LSR_dly;

  lut40073 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_84 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_84 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i7 ( .D0(VCCI), 
    .D1(DI1_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0004 \SMART_ABS/RS485_COM_M/time_interval__i6 ( .D0(VCCI), 
    .D1(DI0_dly), .SD(VCCI), .SP(CE_dly), .CK(CLK_dly), .LSR(LSR_dly), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, DI1, 0:0:0, 0:0:0,,,, CLK_dly, DI1_dly);
    $setuphold (posedge CLK, DI0, 0:0:0, 0:0:0,,,, CLK_dly, DI0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $setuphold (posedge CLK, LSR, 0:0:0, 0:0:0,,,, CLK_dly, LSR_dly);
    $width (posedge LSR, 0:0:0);
    $width (negedge LSR, 0:0:0);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40073 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h35CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i6255_SLICE_228 ( input A1, D0, C0, B0, A0, M1, M0, FXB, FXA, 
    output OFX0, OFX1 );
  wire   GNDI, \DSP_COM/i6255/SLICE_228/DSP_COM/i6255/SLICE_228_K1_H1 , 
         \DSP_COM/i6255/SLICE_228/DSP_COM/i6255/GATE_H0 ;

  lut40074 \DSP_COM/i6255/SLICE_228_K1 ( .A(A1), .B(GNDI), .C(GNDI), .D(GNDI), 
    .Z(\DSP_COM/i6255/SLICE_228/DSP_COM/i6255/SLICE_228_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40075 \DSP_COM/i6255/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6255/SLICE_228/DSP_COM/i6255/GATE_H0 ));
  selmux2 \DSP_COM/i6255/SLICE_228_K0K1MUX ( 
    .D0(\DSP_COM/i6255/SLICE_228/DSP_COM/i6255/GATE_H0 ), 
    .D1(\DSP_COM/i6255/SLICE_228/DSP_COM/i6255/SLICE_228_K1_H1 ), .SD(M0), 
    .Z(OFX0));
  selmux2 \DSP_COM/i6255/SLICE_228_FXMUX ( .D0(FXA), .D1(FXB), .SD(M1), 
    .Z(OFX1));

  specify
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M1 => OFX1) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
    (FXB => OFX1) = (0:0:0,0:0:0);
    (FXA => OFX1) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40074 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5555) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40075 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACA0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i27_SLICE_229 ( input D1, C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   \DSP_COM/i27/SLICE_229/DSP_COM/i27/SLICE_229_K1_H1 , GNDI, 
         \DSP_COM/i27/SLICE_229/DSP_COM/i27/GATE_H0 ;

  lut40076 \DSP_COM/i27/SLICE_229_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i27/SLICE_229/DSP_COM/i27/SLICE_229_K1_H1 ));
  lut40077 \DSP_COM/i27/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/i27/SLICE_229/DSP_COM/i27/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/i27/SLICE_229_K0K1MUX ( 
    .D0(\DSP_COM/i27/SLICE_229/DSP_COM/i27/GATE_H0 ), 
    .D1(\DSP_COM/i27/SLICE_229/DSP_COM/i27/SLICE_229_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40076 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h1302) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40077 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA8A8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_mux_130_Mux_7_i29_SLICE_230 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_7_i29/SLICE_230/DSP_COM/mux_130_Mux_7_i29/SLICE_230_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_7_i29/SLICE_230/DSP_COM/mux_130_Mux_7_i29/GATE_H0 ;

  lut40078 \DSP_COM/mux_130_Mux_7_i29/SLICE_230_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_7_i29/SLICE_230/DSP_COM/mux_130_Mux_7_i29/SLICE_230_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_7_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_7_i29/SLICE_230/DSP_COM/mux_130_Mux_7_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_7_i29/SLICE_230_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_7_i29/SLICE_230/DSP_COM/mux_130_Mux_7_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_7_i29/SLICE_230/DSP_COM/mux_130_Mux_7_i29/SLICE_230_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40078 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7340) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_mux_130_Mux_6_i29_SLICE_231 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_6_i29/SLICE_231/DSP_COM/mux_130_Mux_6_i29/SLICE_231_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_6_i29/SLICE_231/DSP_COM/mux_130_Mux_6_i29/GATE_H0 ;

  lut40078 \DSP_COM/mux_130_Mux_6_i29/SLICE_231_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_6_i29/SLICE_231/DSP_COM/mux_130_Mux_6_i29/SLICE_231_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_6_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_6_i29/SLICE_231/DSP_COM/mux_130_Mux_6_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_6_i29/SLICE_231_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_6_i29/SLICE_231/DSP_COM/mux_130_Mux_6_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_6_i29/SLICE_231/DSP_COM/mux_130_Mux_6_i29/SLICE_231_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_mux_130_Mux_5_i29_SLICE_232 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_5_i29/SLICE_232/DSP_COM/mux_130_Mux_5_i29/SLICE_232_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_5_i29/SLICE_232/DSP_COM/mux_130_Mux_5_i29/GATE_H0 ;

  lut40078 \DSP_COM/mux_130_Mux_5_i29/SLICE_232_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_5_i29/SLICE_232/DSP_COM/mux_130_Mux_5_i29/SLICE_232_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_5_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_5_i29/SLICE_232/DSP_COM/mux_130_Mux_5_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_5_i29/SLICE_232_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_5_i29/SLICE_232/DSP_COM/mux_130_Mux_5_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_5_i29/SLICE_232/DSP_COM/mux_130_Mux_5_i29/SLICE_232_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_mux_130_Mux_0_i29_SLICE_233 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_0_i29/SLICE_233/DSP_COM/mux_130_Mux_0_i29/SLICE_233_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_0_i29/SLICE_233/DSP_COM/mux_130_Mux_0_i29/GATE_H0 ;

  lut40078 \DSP_COM/mux_130_Mux_0_i29/SLICE_233_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_0_i29/SLICE_233/DSP_COM/mux_130_Mux_0_i29/SLICE_233_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_0_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_0_i29/SLICE_233/DSP_COM/mux_130_Mux_0_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_0_i29/SLICE_233_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_0_i29/SLICE_233/DSP_COM/mux_130_Mux_0_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_0_i29/SLICE_233/DSP_COM/mux_130_Mux_0_i29/SLICE_233_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_mux_130_Mux_4_i29_SLICE_234 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_4_i29/SLICE_234/DSP_COM/mux_130_Mux_4_i29/SLICE_234_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_4_i29/SLICE_234/DSP_COM/mux_130_Mux_4_i29/GATE_H0 ;

  lut40079 \DSP_COM/mux_130_Mux_4_i29/SLICE_234_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_4_i29/SLICE_234/DSP_COM/mux_130_Mux_4_i29/SLICE_234_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_4_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_4_i29/SLICE_234/DSP_COM/mux_130_Mux_4_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_4_i29/SLICE_234_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_4_i29/SLICE_234/DSP_COM/mux_130_Mux_4_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_4_i29/SLICE_234/DSP_COM/mux_130_Mux_4_i29/SLICE_234_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40079 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCB8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_mux_130_Mux_3_i29_SLICE_235 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_3_i29/SLICE_235/DSP_COM/mux_130_Mux_3_i29/SLICE_235_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_3_i29/SLICE_235/DSP_COM/mux_130_Mux_3_i29/GATE_H0 ;

  lut40078 \DSP_COM/mux_130_Mux_3_i29/SLICE_235_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_3_i29/SLICE_235/DSP_COM/mux_130_Mux_3_i29/SLICE_235_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_3_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_3_i29/SLICE_235/DSP_COM/mux_130_Mux_3_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_3_i29/SLICE_235_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_3_i29/SLICE_235/DSP_COM/mux_130_Mux_3_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_3_i29/SLICE_235/DSP_COM/mux_130_Mux_3_i29/SLICE_235_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_mux_130_Mux_2_i29_SLICE_236 ( input D1, C1, B1, A1, C0, B0, A0, 
    M0, output OFX0 );
  wire   
         \DSP_COM/mux_130_Mux_2_i29/SLICE_236/DSP_COM/mux_130_Mux_2_i29/SLICE_236_K1_H1 
         , GNDI, 
         \DSP_COM/mux_130_Mux_2_i29/SLICE_236/DSP_COM/mux_130_Mux_2_i29/GATE_H0 ;

  lut40078 \DSP_COM/mux_130_Mux_2_i29/SLICE_236_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\DSP_COM/mux_130_Mux_2_i29/SLICE_236/DSP_COM/mux_130_Mux_2_i29/SLICE_236_K1_H1 )
    );
  lut40065 \DSP_COM/mux_130_Mux_2_i29/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_2_i29/SLICE_236/DSP_COM/mux_130_Mux_2_i29/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/mux_130_Mux_2_i29/SLICE_236_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_2_i29/SLICE_236/DSP_COM/mux_130_Mux_2_i29/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_2_i29/SLICE_236/DSP_COM/mux_130_Mux_2_i29/SLICE_236_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6381_SLICE_237 ( input D1, C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   \DSP_COM/i6381/SLICE_237/DSP_COM/i6381/SLICE_237_K1_H1 , GNDI, 
         \DSP_COM/i6381/SLICE_237/DSP_COM/i6381/GATE_H0 ;

  lut40080 \DSP_COM/i6381/SLICE_237_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6381/SLICE_237/DSP_COM/i6381/SLICE_237_K1_H1 ));
  lut40081 \DSP_COM/i6381/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/i6381/SLICE_237/DSP_COM/i6381/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/i6381/SLICE_237_K0K1MUX ( 
    .D0(\DSP_COM/i6381/SLICE_237/DSP_COM/i6381/GATE_H0 ), 
    .D1(\DSP_COM/i6381/SLICE_237/DSP_COM/i6381/SLICE_237_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40080 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40081 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hACAC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i6385_SLICE_238 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \DSP_COM/i6385/SLICE_238/DSP_COM/i6385/SLICE_238_K1_H1 , 
         \DSP_COM/i6385/SLICE_238/DSP_COM/i6385/GATE_H0 ;

  lut40082 \DSP_COM/i6385/SLICE_238_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6385/SLICE_238/DSP_COM/i6385/SLICE_238_K1_H1 ));
  lut40083 \DSP_COM/i6385/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6385/SLICE_238/DSP_COM/i6385/GATE_H0 ));
  selmux2 \DSP_COM/i6385/SLICE_238_K0K1MUX ( 
    .D0(\DSP_COM/i6385/SLICE_238/DSP_COM/i6385/GATE_H0 ), 
    .D1(\DSP_COM/i6385/SLICE_238/DSP_COM/i6385/SLICE_238_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40082 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEC64) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40083 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA0CF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i6383_SLICE_239 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \DSP_COM/i6383/SLICE_239/DSP_COM/i6383/SLICE_239_K1_H1 , 
         \DSP_COM/i6383/SLICE_239/DSP_COM/i6383/GATE_H0 ;

  lut40084 \DSP_COM/i6383/SLICE_239_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6383/SLICE_239/DSP_COM/i6383/SLICE_239_K1_H1 ));
  lut40085 \DSP_COM/i6383/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6383/SLICE_239/DSP_COM/i6383/GATE_H0 ));
  selmux2 \DSP_COM/i6383/SLICE_239_K0K1MUX ( 
    .D0(\DSP_COM/i6383/SLICE_239/DSP_COM/i6383/GATE_H0 ), 
    .D1(\DSP_COM/i6383/SLICE_239/DSP_COM/i6383/SLICE_239_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40084 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA280) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40085 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC088) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i6074_SLICE_240 ( input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, \DSP_COM/i6074/SLICE_240/DSP_COM/i6074/SLICE_240_K1_H1 , 
         \DSP_COM/i6074/SLICE_240/DSP_COM/i6074/GATE_H0 ;

  lut40064 \DSP_COM/i6074/SLICE_240_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/i6074/SLICE_240/DSP_COM/i6074/SLICE_240_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6074/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/i6074/SLICE_240/DSP_COM/i6074/GATE_H0 ));
  selmux2 \DSP_COM/i6074/SLICE_240_K0K1MUX ( 
    .D0(\DSP_COM/i6074/SLICE_240/DSP_COM/i6074/GATE_H0 ), 
    .D1(\DSP_COM/i6074/SLICE_240/DSP_COM/i6074/SLICE_240_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6080_SLICE_241 ( input C1, B1, A1, C0, B0, A0, M0, output OFX0 );
  wire   GNDI, \DSP_COM/i6080/SLICE_241/DSP_COM/i6080/SLICE_241_K1_H1 , 
         \DSP_COM/i6080/SLICE_241/DSP_COM/i6080/GATE_H0 ;

  lut40064 \DSP_COM/i6080/SLICE_241_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/i6080/SLICE_241/DSP_COM/i6080/SLICE_241_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \DSP_COM/i6080/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/i6080/SLICE_241/DSP_COM/i6080/GATE_H0 ));
  selmux2 \DSP_COM/i6080/SLICE_241_K0K1MUX ( 
    .D0(\DSP_COM/i6080/SLICE_241/DSP_COM/i6080/GATE_H0 ), 
    .D1(\DSP_COM/i6080/SLICE_241/DSP_COM/i6080/SLICE_241_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6379_SLICE_242 ( input D1, C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   \DSP_COM/i6379/SLICE_242/DSP_COM/i6379/SLICE_242_K1_H1 , GNDI, 
         \DSP_COM/i6379/SLICE_242/DSP_COM/i6379/GATE_H0 ;

  lut40078 \DSP_COM/i6379/SLICE_242_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6379/SLICE_242/DSP_COM/i6379/SLICE_242_K1_H1 ));
  lut40086 \DSP_COM/i6379/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\DSP_COM/i6379/SLICE_242/DSP_COM/i6379/GATE_H0 ));
  gnd DRIVEGND( .PWR0(GNDI));
  selmux2 \DSP_COM/i6379/SLICE_242_K0K1MUX ( 
    .D0(\DSP_COM/i6379/SLICE_242/DSP_COM/i6379/GATE_H0 ), 
    .D1(\DSP_COM/i6379/SLICE_242/DSP_COM/i6379/SLICE_242_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40086 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE2E2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i6389_SLICE_243 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \DSP_COM/i6389/SLICE_243/DSP_COM/i6389/SLICE_243_K1_H1 , 
         \DSP_COM/i6389/SLICE_243/DSP_COM/i6389/GATE_H0 ;

  lut40084 \DSP_COM/i6389/SLICE_243_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6389/SLICE_243/DSP_COM/i6389/SLICE_243_K1_H1 ));
  lut40085 \DSP_COM/i6389/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6389/SLICE_243/DSP_COM/i6389/GATE_H0 ));
  selmux2 \DSP_COM/i6389/SLICE_243_K0K1MUX ( 
    .D0(\DSP_COM/i6389/SLICE_243/DSP_COM/i6389/GATE_H0 ), 
    .D1(\DSP_COM/i6389/SLICE_243/DSP_COM/i6389/SLICE_243_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6387_SLICE_244 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \DSP_COM/i6387/SLICE_244/DSP_COM/i6387/SLICE_244_K1_H1 , 
         \DSP_COM/i6387/SLICE_244/DSP_COM/i6387/GATE_H0 ;

  lut40084 \DSP_COM/i6387/SLICE_244_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6387/SLICE_244/DSP_COM/i6387/SLICE_244_K1_H1 ));
  lut40085 \DSP_COM/i6387/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6387/SLICE_244/DSP_COM/i6387/GATE_H0 ));
  selmux2 \DSP_COM/i6387/SLICE_244_K0K1MUX ( 
    .D0(\DSP_COM/i6387/SLICE_244/DSP_COM/i6387/GATE_H0 ), 
    .D1(\DSP_COM/i6387/SLICE_244/DSP_COM/i6387/SLICE_244_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_mux_130_Mux_2_i3_SLICE_245 ( input C1, B1, A1, B0, A0, M0, 
    output OFX0 );
  wire   GNDI, 
         \DSP_COM/mux_130_Mux_2_i3/SLICE_245/DSP_COM/mux_130_Mux_2_i3/SLICE_245_K1_H1 
         , 
         \DSP_COM/mux_130_Mux_2_i3/SLICE_245/DSP_COM/mux_130_Mux_2_i3/GATE_H0 ;

  lut40087 \DSP_COM/mux_130_Mux_2_i3/SLICE_245_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_2_i3/SLICE_245/DSP_COM/mux_130_Mux_2_i3/SLICE_245_K1_H1 )
    );
  gnd DRIVEGND( .PWR0(GNDI));
  lut40088 \DSP_COM/mux_130_Mux_2_i3/GATE ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(\DSP_COM/mux_130_Mux_2_i3/SLICE_245/DSP_COM/mux_130_Mux_2_i3/GATE_H0 ));
  selmux2 \DSP_COM/mux_130_Mux_2_i3/SLICE_245_K0K1MUX ( 
    .D0(\DSP_COM/mux_130_Mux_2_i3/SLICE_245/DSP_COM/mux_130_Mux_2_i3/GATE_H0 ), 
    .D1(\DSP_COM/mux_130_Mux_2_i3/SLICE_245/DSP_COM/mux_130_Mux_2_i3/SLICE_245_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40087 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4E4E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40088 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8888) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_i6262_SLICE_246 ( input C1, B1, A1, B0, A0, M0, output OFX0 );
  wire   GNDI, \DSP_COM/i6262/SLICE_246/DSP_COM/i6262/SLICE_246_K1_H1 , 
         \DSP_COM/i6262/SLICE_246/DSP_COM/i6262/GATE_H0 ;

  lut40087 \DSP_COM/i6262/SLICE_246_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/i6262/SLICE_246/DSP_COM/i6262/SLICE_246_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40088 \DSP_COM/i6262/GATE ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(\DSP_COM/i6262/SLICE_246/DSP_COM/i6262/GATE_H0 ));
  selmux2 \DSP_COM/i6262/SLICE_246_K0K1MUX ( 
    .D0(\DSP_COM/i6262/SLICE_246/DSP_COM/i6262/GATE_H0 ), 
    .D1(\DSP_COM/i6262/SLICE_246/DSP_COM/i6262/SLICE_246_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6395_SLICE_247 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \DSP_COM/i6395/SLICE_247/DSP_COM/i6395/SLICE_247_K1_H1 , 
         \DSP_COM/i6395/SLICE_247/DSP_COM/i6395/GATE_H0 ;

  lut40084 \DSP_COM/i6395/SLICE_247_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6395/SLICE_247/DSP_COM/i6395/SLICE_247_K1_H1 ));
  lut40085 \DSP_COM/i6395/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6395/SLICE_247/DSP_COM/i6395/GATE_H0 ));
  selmux2 \DSP_COM/i6395/SLICE_247_K0K1MUX ( 
    .D0(\DSP_COM/i6395/SLICE_247/DSP_COM/i6395/GATE_H0 ), 
    .D1(\DSP_COM/i6395/SLICE_247/DSP_COM/i6395/SLICE_247_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6393_SLICE_248 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, 
    output OFX0 );
  wire   \DSP_COM/i6393/SLICE_248/DSP_COM/i6393/SLICE_248_K1_H1 , 
         \DSP_COM/i6393/SLICE_248/DSP_COM/i6393/GATE_H0 ;

  lut40084 \DSP_COM/i6393/SLICE_248_K1 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(\DSP_COM/i6393/SLICE_248/DSP_COM/i6393/SLICE_248_K1_H1 ));
  lut40085 \DSP_COM/i6393/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\DSP_COM/i6393/SLICE_248/DSP_COM/i6393/GATE_H0 ));
  selmux2 \DSP_COM/i6393/SLICE_248_K0K1MUX ( 
    .D0(\DSP_COM/i6393/SLICE_248/DSP_COM/i6393/GATE_H0 ), 
    .D1(\DSP_COM/i6393/SLICE_248/DSP_COM/i6393/SLICE_248_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_i6257_SLICE_249 ( input C1, B1, A1, B0, A0, M0, output OFX0 );
  wire   GNDI, \DSP_COM/i6257/SLICE_249/DSP_COM/i6257/SLICE_249_K1_H1 , 
         \DSP_COM/i6257/SLICE_249/DSP_COM/i6257/GATE_H0 ;

  lut40089 \DSP_COM/i6257/SLICE_249_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\DSP_COM/i6257/SLICE_249/DSP_COM/i6257/SLICE_249_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40088 \DSP_COM/i6257/GATE ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(\DSP_COM/i6257/SLICE_249/DSP_COM/i6257/GATE_H0 ));
  selmux2 \DSP_COM/i6257/SLICE_249_K0K1MUX ( 
    .D0(\DSP_COM/i6257/SLICE_249/DSP_COM/i6257/GATE_H0 ), 
    .D1(\DSP_COM/i6257/SLICE_249/DSP_COM/i6257/SLICE_249_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40089 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7272) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_i3036_SLICE_250 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \SMART_ABS/RS485_COM_M/i3036/SLICE_250/SMART_ABS/RS485_COM_M/i3036/SLICE_250_K1_H1 
         , 
         \SMART_ABS/RS485_COM_M/i3036/SLICE_250/SMART_ABS/RS485_COM_M/i3036/GATE_H0 
         ;

  lut40090 \SMART_ABS/RS485_COM_M/i3036/SLICE_250_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\SMART_ABS/RS485_COM_M/i3036/SLICE_250/SMART_ABS/RS485_COM_M/i3036/SLICE_250_K1_H1 )
    );
  lut40091 \SMART_ABS/RS485_COM_M/i3036/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\SMART_ABS/RS485_COM_M/i3036/SLICE_250/SMART_ABS/RS485_COM_M/i3036/GATE_H0 )
    );
  selmux2 \SMART_ABS/RS485_COM_M/i3036/SLICE_250_K0K1MUX ( 
    .D0(\SMART_ABS/RS485_COM_M/i3036/SLICE_250/SMART_ABS/RS485_COM_M/i3036/GATE_H0 )
    , 
    .D1(\SMART_ABS/RS485_COM_M/i3036/SLICE_250/SMART_ABS/RS485_COM_M/i3036/SLICE_250_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40090 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4051) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40091 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDD0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_i6313_SLICE_251 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \SMART_ABS/RS485_COM_M/i6313/SLICE_251/SMART_ABS/RS485_COM_M/i6313/SLICE_251_K1_H1 
         , 
         \SMART_ABS/RS485_COM_M/i6313/SLICE_251/SMART_ABS/RS485_COM_M/i6313/GATE_H0 
         ;

  lut40092 \SMART_ABS/RS485_COM_M/i6313/SLICE_251_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\SMART_ABS/RS485_COM_M/i6313/SLICE_251/SMART_ABS/RS485_COM_M/i6313/SLICE_251_K1_H1 )
    );
  lut40093 \SMART_ABS/RS485_COM_M/i6313/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\SMART_ABS/RS485_COM_M/i6313/SLICE_251/SMART_ABS/RS485_COM_M/i6313/GATE_H0 )
    );
  selmux2 \SMART_ABS/RS485_COM_M/i6313/SLICE_251_K0K1MUX ( 
    .D0(\SMART_ABS/RS485_COM_M/i6313/SLICE_251/SMART_ABS/RS485_COM_M/i6313/GATE_H0 )
    , 
    .D1(\SMART_ABS/RS485_COM_M/i6313/SLICE_251/SMART_ABS/RS485_COM_M/i6313/SLICE_251_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40092 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40093 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h42BD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_i6397_SLICE_252 ( input D1, C1, B1, A1, D0, C0, 
    B0, A0, M0, output OFX0 );
  wire   
         \SMART_ABS/RS485_COM_M/i6397/SLICE_252/SMART_ABS/RS485_COM_M/i6397/SLICE_252_K1_H1 
         , 
         \SMART_ABS/RS485_COM_M/i6397/SLICE_252/SMART_ABS/RS485_COM_M/i6397/GATE_H0 
         ;

  lut40094 \SMART_ABS/RS485_COM_M/i6397/SLICE_252_K1 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), 
    .Z(\SMART_ABS/RS485_COM_M/i6397/SLICE_252/SMART_ABS/RS485_COM_M/i6397/SLICE_252_K1_H1 )
    );
  lut40095 \SMART_ABS/RS485_COM_M/i6397/GATE ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(\SMART_ABS/RS485_COM_M/i6397/SLICE_252/SMART_ABS/RS485_COM_M/i6397/GATE_H0 )
    );
  selmux2 \SMART_ABS/RS485_COM_M/i6397/SLICE_252_K0K1MUX ( 
    .D0(\SMART_ABS/RS485_COM_M/i6397/SLICE_252/SMART_ABS/RS485_COM_M/i6397/GATE_H0 )
    , 
    .D1(\SMART_ABS/RS485_COM_M/i6397/SLICE_252/SMART_ABS/RS485_COM_M/i6397/SLICE_252_K1_H1 )
    , .SD(M0), .Z(OFX0));

  specify
    (D1 => OFX0) = (0:0:0,0:0:0);
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (D0 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40094 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFBDF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40095 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6FBD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_i6098_SLICE_253 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6098/SLICE_253/SMG_SCAN/i6098/SLICE_253_K1_H1 , 
         \SMG_SCAN/i6098/SLICE_253/SMG_SCAN/i6098/GATE_H0 ;

  lut40064 \SMG_SCAN/i6098/SLICE_253_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6098/SLICE_253/SMG_SCAN/i6098/SLICE_253_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6098/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6098/SLICE_253/SMG_SCAN/i6098/GATE_H0 ));
  selmux2 \SMG_SCAN/i6098/SLICE_253_K0K1MUX ( 
    .D0(\SMG_SCAN/i6098/SLICE_253/SMG_SCAN/i6098/GATE_H0 ), 
    .D1(\SMG_SCAN/i6098/SLICE_253/SMG_SCAN/i6098/SLICE_253_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6107_SLICE_254 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6107/SLICE_254/SMG_SCAN/i6107/SLICE_254_K1_H1 , 
         \SMG_SCAN/i6107/SLICE_254/SMG_SCAN/i6107/GATE_H0 ;

  lut40064 \SMG_SCAN/i6107/SLICE_254_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6107/SLICE_254/SMG_SCAN/i6107/SLICE_254_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6107/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6107/SLICE_254/SMG_SCAN/i6107/GATE_H0 ));
  selmux2 \SMG_SCAN/i6107/SLICE_254_K0K1MUX ( 
    .D0(\SMG_SCAN/i6107/SLICE_254/SMG_SCAN/i6107/GATE_H0 ), 
    .D1(\SMG_SCAN/i6107/SLICE_254/SMG_SCAN/i6107/SLICE_254_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6101_SLICE_255 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6101/SLICE_255/SMG_SCAN/i6101/SLICE_255_K1_H1 , 
         \SMG_SCAN/i6101/SLICE_255/SMG_SCAN/i6101/GATE_H0 ;

  lut40064 \SMG_SCAN/i6101/SLICE_255_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6101/SLICE_255/SMG_SCAN/i6101/SLICE_255_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6101/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6101/SLICE_255/SMG_SCAN/i6101/GATE_H0 ));
  selmux2 \SMG_SCAN/i6101/SLICE_255_K0K1MUX ( 
    .D0(\SMG_SCAN/i6101/SLICE_255/SMG_SCAN/i6101/GATE_H0 ), 
    .D1(\SMG_SCAN/i6101/SLICE_255/SMG_SCAN/i6101/SLICE_255_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6104_SLICE_256 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6104/SLICE_256/SMG_SCAN/i6104/SLICE_256_K1_H1 , 
         \SMG_SCAN/i6104/SLICE_256/SMG_SCAN/i6104/GATE_H0 ;

  lut40064 \SMG_SCAN/i6104/SLICE_256_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6104/SLICE_256/SMG_SCAN/i6104/SLICE_256_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6104/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6104/SLICE_256/SMG_SCAN/i6104/GATE_H0 ));
  selmux2 \SMG_SCAN/i6104/SLICE_256_K0K1MUX ( 
    .D0(\SMG_SCAN/i6104/SLICE_256/SMG_SCAN/i6104/GATE_H0 ), 
    .D1(\SMG_SCAN/i6104/SLICE_256/SMG_SCAN/i6104/SLICE_256_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6086_SLICE_257 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6086/SLICE_257/SMG_SCAN/i6086/SLICE_257_K1_H1 , 
         \SMG_SCAN/i6086/SLICE_257/SMG_SCAN/i6086/GATE_H0 ;

  lut40064 \SMG_SCAN/i6086/SLICE_257_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6086/SLICE_257/SMG_SCAN/i6086/SLICE_257_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6086/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6086/SLICE_257/SMG_SCAN/i6086/GATE_H0 ));
  selmux2 \SMG_SCAN/i6086/SLICE_257_K0K1MUX ( 
    .D0(\SMG_SCAN/i6086/SLICE_257/SMG_SCAN/i6086/GATE_H0 ), 
    .D1(\SMG_SCAN/i6086/SLICE_257/SMG_SCAN/i6086/SLICE_257_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6110_SLICE_258 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6110/SLICE_258/SMG_SCAN/i6110/SLICE_258_K1_H1 , 
         \SMG_SCAN/i6110/SLICE_258/SMG_SCAN/i6110/GATE_H0 ;

  lut40064 \SMG_SCAN/i6110/SLICE_258_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6110/SLICE_258/SMG_SCAN/i6110/SLICE_258_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6110/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6110/SLICE_258/SMG_SCAN/i6110/GATE_H0 ));
  selmux2 \SMG_SCAN/i6110/SLICE_258_K0K1MUX ( 
    .D0(\SMG_SCAN/i6110/SLICE_258/SMG_SCAN/i6110/GATE_H0 ), 
    .D1(\SMG_SCAN/i6110/SLICE_258/SMG_SCAN/i6110/SLICE_258_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6113_SLICE_259 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6113/SLICE_259/SMG_SCAN/i6113/SLICE_259_K1_H1 , 
         \SMG_SCAN/i6113/SLICE_259/SMG_SCAN/i6113/GATE_H0 ;

  lut40064 \SMG_SCAN/i6113/SLICE_259_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6113/SLICE_259/SMG_SCAN/i6113/SLICE_259_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6113/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6113/SLICE_259/SMG_SCAN/i6113/GATE_H0 ));
  selmux2 \SMG_SCAN/i6113/SLICE_259_K0K1MUX ( 
    .D0(\SMG_SCAN/i6113/SLICE_259/SMG_SCAN/i6113/GATE_H0 ), 
    .D1(\SMG_SCAN/i6113/SLICE_259/SMG_SCAN/i6113/SLICE_259_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_i6116_SLICE_260 ( input C1, B1, A1, C0, B0, A0, M0, output 
    OFX0 );
  wire   GNDI, \SMG_SCAN/i6116/SLICE_260/SMG_SCAN/i6116/SLICE_260_K1_H1 , 
         \SMG_SCAN/i6116/SLICE_260/SMG_SCAN/i6116/GATE_H0 ;

  lut40064 \SMG_SCAN/i6116/SLICE_260_K1 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(\SMG_SCAN/i6116/SLICE_260/SMG_SCAN/i6116/SLICE_260_K1_H1 ));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40065 \SMG_SCAN/i6116/GATE ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(\SMG_SCAN/i6116/SLICE_260/SMG_SCAN/i6116/GATE_H0 ));
  selmux2 \SMG_SCAN/i6116/SLICE_260_K0K1MUX ( 
    .D0(\SMG_SCAN/i6116/SLICE_260/SMG_SCAN/i6116/GATE_H0 ), 
    .D1(\SMG_SCAN/i6116/SLICE_260/SMG_SCAN/i6116/SLICE_260_K1_H1 ), .SD(M0), 
    .Z(OFX0));

  specify
    (C1 => OFX0) = (0:0:0,0:0:0);
    (B1 => OFX0) = (0:0:0,0:0:0);
    (A1 => OFX0) = (0:0:0,0:0:0);
    (C0 => OFX0) = (0:0:0,0:0:0);
    (B0 => OFX0) = (0:0:0,0:0:0);
    (A0 => OFX0) = (0:0:0,0:0:0);
    (M0 => OFX0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_261 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40096 \SMART_ABS/RS485_COM_M/time_interval_reg_12__bdd_4_lut_4_lut ( 
    .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40097 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \OUT_PULSE_CHECK/input_b_r1_90 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \OUT_PULSE_CHECK/input_a_r_87 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40096 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7FFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40097 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h95A9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_262 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40098 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_90 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40099 \SMART_ABS/RS485_COM_M/i3_4_lut_then_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40098 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h35CA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40099 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hEAAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_263 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40100 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_87_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40101 \SMART_ABS/RS485_COM_M/i780_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40100 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h718E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40101 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB721) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_264 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40102 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_42 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40103 \SMART_ABS/RS485_COM_M/i809_3_lut_rep_77_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40102 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6969) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40103 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3173) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_265 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40104 \SMART_ABS/RS485_COM_M/i845_4_lut_3_lut_rep_81_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_41 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40104 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7331) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_266 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40105 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_adj_78 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40106 \SMART_ABS/RS485_COM_M/i1_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i49 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i48 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40105 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF66F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40106 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4C0C) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_267 ( input D1, C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40107 \SMART_ABS/RS485_COM_M/i1201_4_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40108 \SMART_ABS/RS485_COM_M/i1187_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i21 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i20 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40107 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5D45) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40108 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7171) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_268 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40109 \SMART_ABS/RS485_COM_M/i886_2_lut_4_lut_3_lut_4_lut ( .A(A1), 
    .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_44 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40109 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_269 ( input C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_50 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40110 \SMART_ABS/RS485_COM_M/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i34 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i33 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40110 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF71) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_270 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40108 \SMART_ABS/RS485_COM_M/i838_3_lut_rep_150 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40111 \SMART_ABS/RS485_COM_M/i852_4_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40111 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD554) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_271 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40112 \SMART_ABS/RS485_COM_M/i2_4_lut_adj_83 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40108 \SMART_ABS/RS485_COM_M/i730_3_lut_rep_83 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40112 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h93C9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_272 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40071 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_adj_55 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40113 \SMART_ABS/RS485_COM_M/i1_3_lut_4_lut_adj_51 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i45 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i44 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40113 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3133) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_273 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40032 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_adj_70 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40114 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_adj_54 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40114 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBD42) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_274 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut4 \SMART_ABS/RS485_COM_M/i3_4_lut_adj_61 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40115 \SMART_ABS/RS485_COM_M/i6206_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40115 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2022) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_275 ( input D1, C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40116 \SMART_ABS/RS485_COM_M/i1_4_lut_4_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40108 \SMART_ABS/RS485_COM_M/i1050_3_lut_rep_149 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i18 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i17 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40116 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2DB4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_276 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40101 \SMART_ABS/RS485_COM_M/i1157_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40117 \SMART_ABS/RS485_COM_M/i1150_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i2 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i19 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40117 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7133) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_277 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40118 \SMART_ABS/RS485_COM_M/i3_4_lut_adj_75 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40119 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_68 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i54 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i53 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40118 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40119 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCEE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_278 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40108 \SMART_ABS/RS485_COM_M/i802_3_lut_rep_78 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40104 \SMART_ABS/RS485_COM_M/i816_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_279 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40120 \SMART_ABS/RS485_COM_M/i4092_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40121 i6194_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40120 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hCCC8) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40121 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3337) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_280 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40122 \DSP_COM/i1_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40123 i2_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40122 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBBBB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40123 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_281 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40016 \DSP_COM/i3832_2_lut_rep_134 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40124 i1_2_lut_3_lut_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40124 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hBFFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_282 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40125 \DSP_COM/i1_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40126 BUS_A_c_1_bdd_4_lut( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40125 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4044) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40126 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC8C1) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module OUT_PULSE_CHECK_SLICE_283 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40127 \OUT_PULSE_CHECK/i5_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40128 \OUT_PULSE_CHECK/i6197_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40127 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFEFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40128 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0001) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_284 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40129 \DSP_COM/i2_3_lut_4_lut_adj_109 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40130 \DSP_COM/i2_3_lut_rep_109_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40129 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0800) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40130 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4000) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_285 ( input B1, A1, D0, C0, B0, A0, M0, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40016 \DSP_COM/i3820_2_lut_rep_122 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40131 \DSP_COM/i1_2_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \DSP_COM/bus_we_r_166 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40131 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF7FF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_286 ( input B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40054 \DSP_COM/i1_2_lut_rep_133 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40132 \DSP_COM/i2_3_lut_4_lut_adj_105 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40132 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0020) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_287 ( input C1, B1, A1, D0, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40133 \DSP_COM/i6188_3_lut_rep_104 ( .A(A1), .B(B1), .C(C1), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40134 \DSP_COM/i6187_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40133 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40134 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0080) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_288 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40045 \DSP_COM/i8_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40123 \DSP_COM/i1_4_lut_adj_140 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_289 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40135 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_64 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40136 \SMART_ABS/RS485_COM_M/i1_4_lut_rep_107 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i56 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i55 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40135 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFAEA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40136 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hA022) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_290 ( input C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_69 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40032 \SMART_ABS/RS485_COM_M/i1_2_lut_2_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i29 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i28 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_291 ( input D1, C1, B1, A1, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40136 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_62 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40122 \SMART_ABS/RS485_COM_M/equal_12_i3_2_lut_rep_152 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i10 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i1 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_292 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40137 \SMART_ABS/RS485_COM_M/i3018_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40138 \SMART_ABS/RS485_COM_M/i2993_3_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i60 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i59 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40137 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3A30) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40138 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h222F) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_293 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40139 \SMART_ABS/RS485_COM_M/i2_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40140 \SMART_ABS/RS485_COM_M/i917_4_lut_rep_92_4_lut_4_lut ( .A(A0), 
    .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40139 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC936) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40140 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF720) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_294 ( input D1, C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40141 \SMART_ABS/RS485_COM_M/i881_4_lut_rep_86_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40072 \SMART_ABS/RS485_COM_M/i2_3_lut ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i62 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i61 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40141 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8AAE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_295 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40142 \SMART_ABS/RS485_COM_M/i1_4_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40071 \SMART_ABS/RS485_COM_M/i1_2_lut_4_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i36 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i35 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40142 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0BF4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_296 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40143 \SMART_ABS/RS485_COM_M/i3_4_lut_adj_72 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40144 \SMART_ABS/RS485_COM_M/i2994_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i7 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i6 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40143 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDFF) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40144 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF707) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_297 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40145 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_94_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40146 \SMART_ABS/RS485_COM_M/r_bit_cnt_3__bdd_4_lut_6506 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40145 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hB9A9) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40146 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0DB0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_298 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40147 \SMART_ABS/RS485_COM_M/mod_65_i138_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40148 \SMART_ABS/RS485_COM_M/r_bit_cnt_3__bdd_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40147 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h44AB) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40148 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD69D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_299 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40149 \SMART_ABS/RS485_COM_M/i6225_4_lut_rep_96 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40150 \SMART_ABS/RS485_COM_M/r_bit_cnt_3__bdd_4_lut_6507 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40149 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECFC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40150 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4204) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_300 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40151 \SMART_ABS/RS485_COM_M/i2_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40102 \SMART_ABS/RS485_COM_M/i2_3_lut_adj_43 ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40151 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h4DB2) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_301 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40152 \SMART_ABS/RS485_COM_M/i4304_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40153 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_45 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i50 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i5 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40152 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5203) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40153 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0132) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_302 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40154 \SMART_ABS/RS485_COM_M/i682_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut4 \SMART_ABS/RS485_COM_M/i4_4_lut_adj_46 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40154 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFF01) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_303 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut4 \SMART_ABS/RS485_COM_M/i3_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40120 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_47 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i52 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i51 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_304 ( input B1, A1, D0, C0, B0, A0, output 
    F0, F1 );
  wire   GNDI;

  lut40016 \SMART_ABS/RS485_COM_M/i1_2_lut_adj_82 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40155 \SMART_ABS/RS485_COM_M/i5982_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40155 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFCEC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_305 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40129 \SMART_ABS/RS485_COM_M/i4_4_lut_rep_157 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40129 \SMART_ABS/RS485_COM_M/i3_4_lut_adj_48 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_306 ( input D1, C1, B1, A1, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40129 \SMART_ABS/RS485_COM_M/i4_4_lut_adj_57 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40016 \SMART_ABS/RS485_COM_M/i1_2_lut_adj_49 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i38 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i37 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_307 ( input B1, A1, D0, C0, B0, A0, M0, CE, 
    CLK, output F0, Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly, CE_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_124 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40018 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/com_error__i1_rep_158 ( .D0(M0_dly), 
    .D1(VCCI), .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_308 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40156 \SMART_ABS/RS485_COM_M/i6251_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40157 \SMART_ABS/RS485_COM_M/i1_3_lut_4_lut_adj_53 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i47 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i46 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40156 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC6C3) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40157 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3373) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_309 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40158 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_adj_60 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40159 \SMART_ABS/RS485_COM_M/i_3__bdd_4_lut_6358 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40158 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0D00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40159 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5776) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_310 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40160 \SMART_ABS/RS485_COM_M/i6212_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40161 \SMART_ABS/RS485_COM_M/i4_4_lut_adj_59 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40160 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40161 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFFFD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_311 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40162 \SMART_ABS/RS485_COM_M/i874_4_lut_rep_89_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40163 \SMART_ABS/RS485_COM_M/i1830_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i23 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i22 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40162 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h6F06) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40163 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h00AE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_312 ( input B1, A1, D0, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40016 \SMART_ABS/RS485_COM_M/i196_2_lut_rep_126 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40164 \SMART_ABS/RS485_COM_M/i197_2_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i25 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i24 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40164 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFDF0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_313 ( input D1, C1, B1, A1, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40165 \SMART_ABS/RS485_COM_M/i29_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40166 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_108_3_lut ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i4 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i39 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40165 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h3F3A) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40166 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hD0D0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_314 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );

  lut40160 \SMART_ABS/RS485_COM_M/i1_2_lut_4_lut_adj_71 ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40129 \SMART_ABS/RS485_COM_M/i3_4_lut_rep_154 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_315 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40167 \SMG_SCAN/i1248_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \SMG_SCAN/i4_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40167 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hECCC) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_316 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40155 \SMG_SCAN/i1_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40045 \SMG_SCAN/i4_4_lut_adj_17 ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_SCAN_SLICE_317 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut4 \SMG_SCAN/i3_4_lut_adj_18 ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40167 \SMG_SCAN/i1308_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_318 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut40124 \KEY_CHECK/i4_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40128 \KEY_CHECK/i6202_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_319 ( input B1, A1, D0, C0, B0, A0, M1, M0, CLK, output F0, Q0, 
    F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly;

  lut40016 \KEY_CHECK/i5931_2_lut ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut4 \KEY_CHECK/i5989_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \ENCODER_CHECK/input_abz_r_30 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \ENCODER_CHECK/input_abz_r1_31 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module KEY_CHECK_SLICE_320 ( input D1, C1, B1, A1, B0, A0, M1, M0, CE, CLK, 
    output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40168 \KEY_CHECK/k_state_2__bdd_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40016 \KEY_CHECK/k_mode_rr_I_0_60_i3_2_lut_rep_129 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0002 \KEY_CHECK/k_down_rr_51 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0002 \KEY_CHECK/k_down_r_47 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40168 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hE880) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_321 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40070 \DSP_COM/i2_3_lut_4_lut_adj_95 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40131 \DSP_COM/i2_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_322 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40169 \DSP_COM/i2_3_lut_4_lut_rep_156 ( .A(A1), .B(B1), .C(C1), .D(D1), 
    .Z(F1));
  lut40169 \DSP_COM/i2_3_lut_4_lut_adj_88 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40169 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0700) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_323 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, 
    output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut40129 \DSP_COM/i1_2_lut_3_lut_4_lut_adj_108 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40129 \DSP_COM/i1_2_lut_3_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));
  vmuxregsre \DSP_COM/bus_we_r1_167 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/bus_cs_r_168 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_324 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40114 \SMART_ABS/RS485_COM_M/i1_2_lut_3_lut_3_lut_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40170 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_79_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i43 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i42 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40170 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h8E71) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SLICE_325 ( input D1, C1, B1, A1, C0, B0, A0, M1, M0, CE, CLK, output 
    F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40171 \OUT_PULSE_CHECK/i1_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40172 \OUT_PULSE_CHECK/i1_2_lut_rep_112_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre0002 \KEY_CHECK/k_up_rr_50 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0002 \KEY_CHECK/k_up_r_46 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40171 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF0FE) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40172 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0E0E) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_326 ( input D1, C1, B1, A1, C0, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40173 \DSP_COM/i1_3_lut_4_lut_4_lut_adj_112 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40049 \DSP_COM/i2_3_lut_rep_121 ( .A(A0), .B(B0), .C(C0), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40173 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h5400) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_327 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40173 \DSP_COM/i1_3_lut_4_lut_4_lut_adj_111 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40173 \DSP_COM/i1_3_lut_4_lut_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_328 ( input C1, B1, A1, D0, C0, B0, A0, M1, 
    M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40174 \SMART_ABS/RS485_COM_M/i4058_2_lut_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40160 \SMART_ABS/RS485_COM_M/i2477_3_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i58 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i57 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40174 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F4) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_329 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40173 \DSP_COM/i1_3_lut_4_lut_4_lut_adj_110 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40175 \DSP_COM/n10_bdd_4_lut_6325_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40175 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hF4F0) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_330 ( input D1, C1, B1, A1, B0, A0, M0, CLK, output F0, 
    Q0, F1 );
  wire   GNDI, VCCI, M0_dly, CLK_dly;

  lut40176 \DSP_COM/i1_2_lut_rep_114_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40016 \DSP_COM/bus_cs_r1_I_0_2_lut_rep_120 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \DSP_COM/bus_cs_r1_169 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40176 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0444) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_331 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40118 \DSP_COM/i1_2_lut_2_lut_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40129 \DSP_COM/i2_3_lut_4_lut_adj_94 ( .A(A0), .B(B0), .C(C0), .D(D0), 
    .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_332 ( input D1, C1, B1, A1, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40177 \SMART_ABS/RS485_COM_M/i1_4_lut_adj_63 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40016 \SMART_ABS/RS485_COM_M/i1_2_lut ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i27 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i26 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40177 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h2AAA) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_333 ( input C1, B1, A1, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40178 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_113_3_lut ( .A(A1), .B(B1), 
    .C(C1), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40179 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_123 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i41 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i40 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40178 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0D0D) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module lut40179 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hDDDD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_334 ( input B1, A1, C0, B0, A0, M1, M0, CE, 
    CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40054 \SMART_ABS/RS485_COM_M/i1_2_lut_adj_73 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40180 \SMART_ABS/RS485_COM_M/i1_2_lut_3_lut ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i30 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i3 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40180 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h7070) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module DSP_COM_SLICE_335 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40016 \DSP_COM/i3_2_lut_adj_133 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \DSP_COM/i3_2_lut_adj_101 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_336 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40016 \DSP_COM/i3_2_lut_adj_132 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \DSP_COM/i3_2_lut_adj_128 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module SLICE_337 ( input D1, C1, B1, A1, D0, C0, B0, A0, M0, CLK, output F0, 
    Q0, F1 );
  wire   VCCI, GNDI, M0_dly, CLK_dly;

  lut40103 \SMART_ABS/RS485_COM_M/i773_3_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40181 \SMART_ABS/RS485_COM_M/i2_3_lut_4_lut_adj_52 ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \OUT_PULSE_CHECK/input_b_r_89 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40181 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h42BD) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_338 ( input C1, B1, A1, C0, B0, A0, M1, M0, 
    CE, CLK, output F0, Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40182 \SMART_ABS/RS485_COM_M/i3019_3_lut ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40050 \SMART_ABS/RS485_COM_M/i1_2_lut_3_lut_adj_66 ( .A(A0), .B(B0), 
    .C(C0), .D(GNDI), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i32 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i31 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module lut40182 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hC5C5) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_339 ( input D1, C1, B1, A1, D0, C0, B0, A0, 
    M1, M0, CE, CLK, output F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40170 \SMART_ABS/RS485_COM_M/i1_2_lut_rep_76_4_lut ( .A(A1), .B(B1), 
    .C(C1), .D(D1), .Z(F1));
  lut40114 \SMART_ABS/RS485_COM_M/i2_3_lut_3_lut_4_lut ( .A(A0), .B(B0), 
    .C(C0), .D(D0), .Z(F0));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i9 ( .D0(M1_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \SMART_ABS/RS485_COM_M/\SMART__7__i8 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SMART_ABS_RS485_COM_M_SLICE_340 ( input D1, C1, B1, A1, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40183 \SMART_ABS/RS485_COM_M/i695_2_lut_4_lut ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40048 \SMART_ABS/RS485_COM_M/i6516/GATE ( .A(A0), .B(B0), .C(C0), 
    .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40183 ( input A, B, C, D, output Z );

  ROM16X1A #(16'hFE00) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module KEY_CHECK_SLICE_341 ( input B1, A1, B0, A0, M1, M0, CE, CLK, output F0, 
    Q0, F1, Q1 );
  wire   GNDI, VCCI, M1_dly, CLK_dly, M0_dly, CE_dly;

  lut40016 \KEY_CHECK/k_mode_rr_I_0_60_i1_2_lut_rep_135 ( .A(A1), .B(B1), 
    .C(GNDI), .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40016 \KEY_CHECK/k_mode_rr_I_0_60_i4_2_lut_rep_137 ( .A(A0), .B(B0), 
    .C(GNDI), .D(GNDI), .Z(F0));
  vmuxregsre0002 \KEY_CHECK/k_mode_rr_49 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  vmuxregsre0002 \KEY_CHECK/k_mode_r_45 ( .D0(M0_dly), .D1(VCCI), .SD(GNDI), 
    .SP(CE_dly), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $setuphold (posedge CLK, CE, 0:0:0, 0:0:0,,,, CLK_dly, CE_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module SLICE_342 ( input D1, C1, B1, A1, D0, C0, B0, A0, M1, M0, CLK, output 
    F0, Q0, F1, Q1 );
  wire   VCCI, GNDI, M1_dly, CLK_dly, M0_dly;

  lut4 \KEY_CHECK/i5993_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \KEY_CHECK/i5991_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));
  vmuxregsre \ENCODER_CHECK/input_uvw_r_28 ( .D0(M1_dly), .D1(VCCI), .SD(GNDI), 
    .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q1));
  vcc DRIVEVCC( .PWR1(VCCI));
  gnd DRIVEGND( .PWR0(GNDI));
  vmuxregsre \ENCODER_CHECK/input_uvw_r1_29 ( .D0(M0_dly), .D1(VCCI), 
    .SD(GNDI), .SP(VCCI), .CK(CLK_dly), .LSR(GNDI), .Q(Q0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
    (CLK => Q0) = (0:0:0,0:0:0);
    (CLK => Q1) = (0:0:0,0:0:0);
    $setuphold (posedge CLK, M1, 0:0:0, 0:0:0,,,, CLK_dly, M1_dly);
    $setuphold (posedge CLK, M0, 0:0:0, 0:0:0,,,, CLK_dly, M0_dly);
    $width (posedge CLK, 0:0:0);
    $width (negedge CLK, 0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_343 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, F1 );

  lut40045 \DSP_COM/i9_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40045 \DSP_COM/i7_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_344 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut4 \DSP_COM/i5995_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut40016 \DSP_COM/i5950_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module OUT_PULSE_CHECK_SLICE_345 ( input D1, C1, B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40184 \OUT_PULSE_CHECK/input_a_r_bdd_4_lut_6475 ( .A(A1), .B(B1), .C(C1), 
    .D(D1), .Z(F1));
  lut40031 \OUT_PULSE_CHECK/i3_2_lut ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40184 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0720) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMART_ABS_RS485_COM_M_SLICE_346 ( input C1, B1, A1, D0, C0, B0, A0, 
    output F0, F1 );
  wire   GNDI;

  lut40185 \SMART_ABS/RS485_COM_M/i2_3_lut_rep_144 ( .A(A1), .B(B1), .C(C1), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40129 \SMART_ABS/RS485_COM_M/i3_4_lut_adj_81 ( .A(A0), .B(B0), .C(C0), 
    .D(D0), .Z(F0));

  specify
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module lut40185 ( input A, B, C, D, output Z );

  ROM16X1A #(16'h0404) INST10( .AD0(A), .AD1(B), .AD2(C), .AD3(D), .DO0(Z));
endmodule

module SMG_SCAN_SLICE_347 ( input D1, C1, B1, A1, D0, C0, B0, A0, output F0, 
    F1 );

  lut4 \SMG_SCAN/i6003_4_lut ( .A(A1), .B(B1), .C(C1), .D(D1), .Z(F1));
  lut4 \SMG_SCAN/i6005_4_lut ( .A(A0), .B(B0), .C(C0), .D(D0), .Z(F0));

  specify
    (D1 => F1) = (0:0:0,0:0:0);
    (C1 => F1) = (0:0:0,0:0:0);
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (D0 => F0) = (0:0:0,0:0:0);
    (C0 => F0) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module DSP_COM_SLICE_348 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40016 \DSP_COM/i3_2_lut_adj_130 ( .A(A1), .B(B1), .C(GNDI), .D(GNDI), 
    .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40179 \DSP_COM/i6231_2_lut_rep_128 ( .A(A0), .B(B0), .C(GNDI), .D(GNDI), 
    .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module OUT_PULSE_CHECK_SLICE_349 ( input B1, A1, B0, A0, output F0, F1 );
  wire   GNDI;

  lut40031 \OUT_PULSE_CHECK/i3851_2_lut_rep_139 ( .A(A1), .B(B1), .C(GNDI), 
    .D(GNDI), .Z(F1));
  gnd DRIVEGND( .PWR0(GNDI));
  lut40031 \OUT_PULSE_CHECK/i1_2_lut_rep_138 ( .A(A0), .B(B0), .C(GNDI), 
    .D(GNDI), .Z(F0));

  specify
    (B1 => F1) = (0:0:0,0:0:0);
    (A1 => F1) = (0:0:0,0:0:0);
    (B0 => F0) = (0:0:0,0:0:0);
    (A0 => F0) = (0:0:0,0:0:0);
  endspecify

endmodule

module BUS_D_5_ ( output PADDI, input PADDT, PADDO, inout BUSD5 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_5( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD5), 
    .PADI(BUSD5));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD5) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD5) = (0:0:0,0:0:0);
    (BUSD5 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD5, 0:0:0);
    $width (negedge BUSD5, 0:0:0);
  endspecify

endmodule

module xo2iobuf ( input I, T, output Z, PAD, input PADI );

  IBPU INST1( .I(PADI), .O(Z));
  OBZPU INST2( .I(I), .T(T), .O(PAD));
endmodule

module BUS_D_6_ ( output PADDI, input PADDT, PADDO, inout BUSD6 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_6( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD6), 
    .PADI(BUSD6));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD6) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD6) = (0:0:0,0:0:0);
    (BUSD6 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD6, 0:0:0);
    $width (negedge BUSD6, 0:0:0);
  endspecify

endmodule

module BUS_D_7_ ( output PADDI, input PADDT, PADDO, inout BUSD7 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_7( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD7), 
    .PADI(BUSD7));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD7) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD7) = (0:0:0,0:0:0);
    (BUSD7 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD7, 0:0:0);
    $width (negedge BUSD7, 0:0:0);
  endspecify

endmodule

module BUS_D_4_ ( output PADDI, input PADDT, PADDO, inout BUSD4 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_4( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD4), 
    .PADI(BUSD4));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD4) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD4) = (0:0:0,0:0:0);
    (BUSD4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD4, 0:0:0);
    $width (negedge BUSD4, 0:0:0);
  endspecify

endmodule

module BUS_D_3_ ( output PADDI, input PADDT, PADDO, inout BUSD3 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_3( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD3), 
    .PADI(BUSD3));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD3) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD3) = (0:0:0,0:0:0);
    (BUSD3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD3, 0:0:0);
    $width (negedge BUSD3, 0:0:0);
  endspecify

endmodule

module BUS_D_2_ ( output PADDI, input PADDT, PADDO, inout BUSD2 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_2( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD2), 
    .PADI(BUSD2));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD2) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD2) = (0:0:0,0:0:0);
    (BUSD2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD2, 0:0:0);
    $width (negedge BUSD2, 0:0:0);
  endspecify

endmodule

module BUS_D_1_ ( output PADDI, input PADDT, PADDO, inout BUSD1 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_1( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD1), 
    .PADI(BUSD1));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD1) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD1) = (0:0:0,0:0:0);
    (BUSD1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD1, 0:0:0);
    $width (negedge BUSD1, 0:0:0);
  endspecify

endmodule

module BUS_D_0_ ( output PADDI, input PADDT, PADDO, inout BUSD0 );
  wire   PADDT_NOTIN;

  xo2iobuf BUS_D_pad_0( .I(PADDO), .T(PADDT_NOTIN), .Z(PADDI), .PAD(BUSD0), 
    .PADI(BUSD0));
  inverter PADDT_INVERTERIN( .I(PADDT), .Z(PADDT_NOTIN));

  specify
    (PADDT => BUSD0) = (0:0:0,0:0:0,0:0:0,0:0:0,0:0:0,0:0:0);
    (PADDO => BUSD0) = (0:0:0,0:0:0);
    (BUSD0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSD0, 0:0:0);
    $width (negedge BUSD0, 0:0:0);
  endspecify

endmodule

module DEBUG_LED ( input PADDO, output DEBUG_LED );
  wire   GNDI;

  xo2iobuf0186 DEBUG_LED_pad( .I(PADDO), .T(GNDI), .PAD(DEBUG_LED));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DEBUG_LED) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0186 ( input I, T, output PAD );

  OBZPU INST5( .I(I), .T(T), .O(PAD));
endmodule

module SMG_LED_12_ ( input PADDO, output SMGLED12 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_12( .I(PADDO), .T(GNDI), .PAD(SMGLED12));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED12) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_11_ ( input PADDO, output SMGLED11 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_11( .I(PADDO), .T(GNDI), .PAD(SMGLED11));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED11) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_10_ ( input PADDO, output SMGLED10 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_10( .I(PADDO), .T(GNDI), .PAD(SMGLED10));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED10) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_9_ ( input PADDO, output SMGLED9 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_9( .I(PADDO), .T(GNDI), .PAD(SMGLED9));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED9) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_8_ ( input PADDO, output SMGLED8 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_8( .I(PADDO), .T(GNDI), .PAD(SMGLED8));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED8) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_7_ ( input PADDO, output SMGLED7 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_7( .I(PADDO), .T(GNDI), .PAD(SMGLED7));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED7) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_6_ ( input PADDO, output SMGLED6 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_6( .I(PADDO), .T(GNDI), .PAD(SMGLED6));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED6) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_5_ ( input PADDO, output SMGLED5 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_5( .I(PADDO), .T(GNDI), .PAD(SMGLED5));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED5) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_4_ ( input PADDO, output SMGLED4 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_4( .I(PADDO), .T(GNDI), .PAD(SMGLED4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED4) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_3_ ( input PADDO, output SMGLED3 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_3( .I(PADDO), .T(GNDI), .PAD(SMGLED3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED3) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_2_ ( input PADDO, output SMGLED2 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_2( .I(PADDO), .T(GNDI), .PAD(SMGLED2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED2) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_1_ ( input PADDO, output SMGLED1 );
  wire   GNDI;

  xo2iobuf0186 SMG_LED_pad_1( .I(PADDO), .T(GNDI), .PAD(SMGLED1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED1) = (0:0:0,0:0:0);
  endspecify

endmodule

module SMG_LED_0_ ( input PADDO, output SMGLED0 );
  wire   GNDI;

  xo2iobuf0187 SMG_LED_pad_0( .I(PADDO), .T(GNDI), .PAD(SMGLED0));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => SMGLED0) = (0:0:0,0:0:0);
  endspecify

endmodule

module xo2iobuf0187 ( input I, T, output PAD );

  OBZPD INST5( .I(I), .T(T), .O(PAD));
endmodule

module DO1 ( input PADDO, output DO1 );
  wire   GNDI;

  xo2iobuf0187 DO1_pad( .I(PADDO), .T(GNDI), .PAD(DO1));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DO1) = (0:0:0,0:0:0);
  endspecify

endmodule

module DO2 ( input PADDO, output DO2 );
  wire   GNDI;

  xo2iobuf0186 DO2_pad( .I(PADDO), .T(GNDI), .PAD(DO2));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DO2) = (0:0:0,0:0:0);
  endspecify

endmodule

module DO3 ( input PADDO, output DO3 );
  wire   GNDI;

  xo2iobuf0186 DO3_pad( .I(PADDO), .T(GNDI), .PAD(DO3));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DO3) = (0:0:0,0:0:0);
  endspecify

endmodule

module DO4 ( input PADDO, output DO4 );
  wire   GNDI;

  xo2iobuf0186 DO4_pad( .I(PADDO), .T(GNDI), .PAD(DO4));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => DO4) = (0:0:0,0:0:0);
  endspecify

endmodule

module UART_TX ( input PADDO, output UART_TX );
  wire   GNDI;

  xo2iobuf0186 UART_TX_pad( .I(PADDO), .T(GNDI), .PAD(UART_TX));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => UART_TX) = (0:0:0,0:0:0);
  endspecify

endmodule

module TR_DIR ( input PADDO, output TR_DIR );
  wire   GNDI;

  xo2iobuf0186 TR_DIR_pad( .I(PADDO), .T(GNDI), .PAD(TR_DIR));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => TR_DIR) = (0:0:0,0:0:0);
  endspecify

endmodule

module A_PHASE ( input PADDO, output A_PHASE );
  wire   GNDI;

  xo2iobuf0186 A_PHASE_pad( .I(PADDO), .T(GNDI), .PAD(A_PHASE));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => A_PHASE) = (0:0:0,0:0:0);
  endspecify

endmodule

module B_PHASE ( input PADDO, output B_PHASE );
  wire   GNDI;

  xo2iobuf0186 B_PHASE_pad( .I(PADDO), .T(GNDI), .PAD(B_PHASE));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => B_PHASE) = (0:0:0,0:0:0);
  endspecify

endmodule

module Z_PHASE ( input PADDO, output Z_PHASE );
  wire   GNDI;

  xo2iobuf0186 Z_PHASE_pad( .I(PADDO), .T(GNDI), .PAD(Z_PHASE));
  gnd DRIVEGND( .PWR0(GNDI));

  specify
    (PADDO => Z_PHASE) = (0:0:0,0:0:0);
  endspecify

endmodule

module clk_in ( output PADDI, input clk_in );

  xo2iobuf0188 clk_in_pad( .Z(PADDI), .PAD(clk_in));

  specify
    (clk_in => PADDI) = (0:0:0,0:0:0);
    $width (posedge clk_in, 0:0:0);
    $width (negedge clk_in, 0:0:0);
  endspecify

endmodule

module xo2iobuf0188 ( output Z, input PAD );

  IBPU INST1( .I(PAD), .O(Z));
endmodule

module rst_n_in ( output PADDI, input rst_n_in );

  xo2iobuf0188 rst_n_in_pad( .Z(PADDI), .PAD(rst_n_in));

  specify
    (rst_n_in => PADDI) = (0:0:0,0:0:0);
    $width (posedge rst_n_in, 0:0:0);
    $width (negedge rst_n_in, 0:0:0);
  endspecify

endmodule

module BUS_WE ( output PADDI, input BUS_WE );

  xo2iobuf0188 BUS_WE_pad( .Z(PADDI), .PAD(BUS_WE));

  specify
    (BUS_WE => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUS_WE, 0:0:0);
    $width (negedge BUS_WE, 0:0:0);
  endspecify

endmodule

module BUS_CS ( output PADDI, input BUS_CS );

  xo2iobuf0188 BUS_CS_pad( .Z(PADDI), .PAD(BUS_CS));

  specify
    (BUS_CS => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUS_CS, 0:0:0);
    $width (negedge BUS_CS, 0:0:0);
  endspecify

endmodule

module BUS_A_4_ ( output PADDI, input BUSA4 );

  xo2iobuf0188 BUS_A_pad_4( .Z(PADDI), .PAD(BUSA4));

  specify
    (BUSA4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSA4, 0:0:0);
    $width (negedge BUSA4, 0:0:0);
  endspecify

endmodule

module BUS_A_3_ ( output PADDI, input BUSA3 );

  xo2iobuf0188 BUS_A_pad_3( .Z(PADDI), .PAD(BUSA3));

  specify
    (BUSA3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSA3, 0:0:0);
    $width (negedge BUSA3, 0:0:0);
  endspecify

endmodule

module BUS_A_2_ ( output PADDI, input BUSA2 );

  xo2iobuf0188 BUS_A_pad_2( .Z(PADDI), .PAD(BUSA2));

  specify
    (BUSA2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSA2, 0:0:0);
    $width (negedge BUSA2, 0:0:0);
  endspecify

endmodule

module BUS_A_1_ ( output PADDI, input BUSA1 );

  xo2iobuf0188 BUS_A_pad_1( .Z(PADDI), .PAD(BUSA1));

  specify
    (BUSA1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSA1, 0:0:0);
    $width (negedge BUSA1, 0:0:0);
  endspecify

endmodule

module BUS_A_0_ ( output PADDI, input BUSA0 );

  xo2iobuf0188 BUS_A_pad_0( .Z(PADDI), .PAD(BUSA0));

  specify
    (BUSA0 => PADDI) = (0:0:0,0:0:0);
    $width (posedge BUSA0, 0:0:0);
    $width (negedge BUSA0, 0:0:0);
  endspecify

endmodule

module ENC_U ( output PADDI, input ENC_U );

  xo2iobuf0188 ENC_U_pad( .Z(PADDI), .PAD(ENC_U));

  specify
    (ENC_U => PADDI) = (0:0:0,0:0:0);
    $width (posedge ENC_U, 0:0:0);
    $width (negedge ENC_U, 0:0:0);
  endspecify

endmodule

module ENC_V ( output PADDI, input ENC_V );

  xo2iobuf0188 ENC_V_pad( .Z(PADDI), .PAD(ENC_V));

  specify
    (ENC_V => PADDI) = (0:0:0,0:0:0);
    $width (posedge ENC_V, 0:0:0);
    $width (negedge ENC_V, 0:0:0);
  endspecify

endmodule

module UVW ( output PADDI, input UVW );

  xo2iobuf0188 UVW_pad( .Z(PADDI), .PAD(UVW));

  specify
    (UVW => PADDI) = (0:0:0,0:0:0);
    $width (posedge UVW, 0:0:0);
    $width (negedge UVW, 0:0:0);
  endspecify

endmodule

module ABZ ( output PADDI, input ABZ );

  xo2iobuf0188 ABZ_pad( .Z(PADDI), .PAD(ABZ));

  specify
    (ABZ => PADDI) = (0:0:0,0:0:0);
    $width (posedge ABZ, 0:0:0);
    $width (negedge ABZ, 0:0:0);
  endspecify

endmodule

module DI1 ( output PADDI, input DI1 );

  xo2iobuf0188 DI1_pad( .Z(PADDI), .PAD(DI1));

  specify
    (DI1 => PADDI) = (0:0:0,0:0:0);
    $width (posedge DI1, 0:0:0);
    $width (negedge DI1, 0:0:0);
  endspecify

endmodule

module DI2 ( output PADDI, input DI2 );

  xo2iobuf0188 DI2_pad( .Z(PADDI), .PAD(DI2));

  specify
    (DI2 => PADDI) = (0:0:0,0:0:0);
    $width (posedge DI2, 0:0:0);
    $width (negedge DI2, 0:0:0);
  endspecify

endmodule

module DI3 ( output PADDI, input DI3 );

  xo2iobuf0189 DI3_pad( .Z(PADDI), .PAD(DI3));

  specify
    (DI3 => PADDI) = (0:0:0,0:0:0);
    $width (posedge DI3, 0:0:0);
    $width (negedge DI3, 0:0:0);
  endspecify

endmodule

module xo2iobuf0189 ( output Z, input PAD );

  IBPD INST1( .I(PAD), .O(Z));
endmodule

module DI4 ( output PADDI, input DI4 );

  xo2iobuf0188 DI4_pad( .Z(PADDI), .PAD(DI4));

  specify
    (DI4 => PADDI) = (0:0:0,0:0:0);
    $width (posedge DI4, 0:0:0);
    $width (negedge DI4, 0:0:0);
  endspecify

endmodule

module K_MODE ( output PADDI, input K_MODE );

  xo2iobuf0188 K_MODE_pad( .Z(PADDI), .PAD(K_MODE));

  specify
    (K_MODE => PADDI) = (0:0:0,0:0:0);
    $width (posedge K_MODE, 0:0:0);
    $width (negedge K_MODE, 0:0:0);
  endspecify

endmodule

module K_UP ( output PADDI, input K_UP );

  xo2iobuf0188 K_UP_pad( .Z(PADDI), .PAD(K_UP));

  specify
    (K_UP => PADDI) = (0:0:0,0:0:0);
    $width (posedge K_UP, 0:0:0);
    $width (negedge K_UP, 0:0:0);
  endspecify

endmodule

module K_DOWN ( output PADDI, input K_DOWN );

  xo2iobuf0188 K_DOWN_pad( .Z(PADDI), .PAD(K_DOWN));

  specify
    (K_DOWN => PADDI) = (0:0:0,0:0:0);
    $width (posedge K_DOWN, 0:0:0);
    $width (negedge K_DOWN, 0:0:0);
  endspecify

endmodule

module K_SET ( output PADDI, input K_SET );

  xo2iobuf0188 K_SET_pad( .Z(PADDI), .PAD(K_SET));

  specify
    (K_SET => PADDI) = (0:0:0,0:0:0);
    $width (posedge K_SET, 0:0:0);
    $width (negedge K_SET, 0:0:0);
  endspecify

endmodule

module TMR_CLK ( output PADDI, input TMR_CLK );

  xo2iobuf0188 TMR_CLK_pad( .Z(PADDI), .PAD(TMR_CLK));

  specify
    (TMR_CLK => PADDI) = (0:0:0,0:0:0);
    $width (posedge TMR_CLK, 0:0:0);
    $width (negedge TMR_CLK, 0:0:0);
  endspecify

endmodule

module TMR_DIR ( output PADDI, input TMR_DIR );

  xo2iobuf0188 TMR_DIR_pad( .Z(PADDI), .PAD(TMR_DIR));

  specify
    (TMR_DIR => PADDI) = (0:0:0,0:0:0);
    $width (posedge TMR_DIR, 0:0:0);
    $width (negedge TMR_DIR, 0:0:0);
  endspecify

endmodule

module UART_RX ( output PADDI, input UART_RX );

  xo2iobuf0188 UART_RX_pad( .Z(PADDI), .PAD(UART_RX));

  specify
    (UART_RX => PADDI) = (0:0:0,0:0:0);
    $width (posedge UART_RX, 0:0:0);
    $width (negedge UART_RX, 0:0:0);
  endspecify

endmodule

module GSR_INST ( input GSRNET );

  GSR5MODE GSR_INST_GSRMODE( .GSR(GSRNET));

  specify
  endspecify

endmodule

module GSR5MODE ( input GSR );
  wire   GSRMODE;

  BUFBA INST10( .A(GSR), .Z(GSRMODE));
  GSR INST20( .GSR(GSRMODE));
endmodule
